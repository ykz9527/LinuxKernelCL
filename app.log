nohup: ignoring input
[INFO] Scanning for projects...
[INFO] 
[INFO] ----------------------< com.cs:java-api-backend >-----------------------
[INFO] Building Java API Backend 1.0.0
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spring-boot-maven-plugin:3.2.7:run (default-cli) > test-compile @ java-api-backend >>>
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ java-api-backend ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.11.0:compile (default-compile) @ java-api-backend ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ java-api-backend ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/fdse/ytest/LinuxKernelCL/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.11.0:testCompile (default-testCompile) @ java-api-backend ---
[INFO] Changes detected - recompiling the module! :source
[INFO] Compiling 3 source files with javac [debug target 17] to target/test-classes
[WARNING] system modules path not set in conjunction with -source 17
[INFO] 
[INFO] <<< spring-boot-maven-plugin:3.2.7:run (default-cli) < test-compile @ java-api-backend <<<
[INFO] 
[INFO] 
[INFO] --- spring-boot-maven-plugin:3.2.7:run (default-cli) @ java-api-backend ---
[INFO] Attaching agents: []

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.7)

2025-06-25 10:20:19 [main] INFO  com.cs.api.ApiApplication - Starting ApiApplication using Java 21.0.3 with PID 1034559 (/home/fdse/ytest/LinuxKernelCL/target/classes started by fdse in /home/fdse/ytest/LinuxKernelCL)
2025-06-25 10:20:19 [main] DEBUG com.cs.api.ApiApplication - Running with Spring Boot v3.2.7, Spring v6.1.10
2025-06-25 10:20:19 [main] INFO  com.cs.api.ApiApplication - The following 1 profile is active: "dev"
2025-06-25 10:20:21 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-25 10:20:21 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-25 10:20:21 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.25]
2025-06-25 10:20:21 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-25 10:20:21 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2232 ms
2025-06-25 10:20:21 [main] INFO  c.c.a.s.impl.CodeTraceServiceImpl - CodeTraceServiceImpl初始化完成
2025-06-25 10:20:21 [main] DEBUG c.c.a.s.a.BootlinSearchService - BootlinSearchService 初始化完成，配置UTF-8编码
2025-06-25 10:20:21 [main] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - 启用HTTP代理: 127.0.0.1:7890
2025-06-25 10:20:22 [main] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ConceptKnowledgeAnalyzer初始化完成 - 代理配置: enabled=true, host=127.0.0.1, port=7890
Logging initialized using 'class org.apache.ibatis.logging.stdout.StdOutImpl' adapter.
Get /10.176.37.1 network interface 
Get network interface info: name:enp4s0 (enp4s0)
Initialization Sequence datacenterId:15 workerId:21
 _ _   |_  _ _|_. ___ _ |    _ 
| | |\/|_)(_| | |_\  |_)||_|_\ 
     /               |         
                        3.5.12 
2025-06-25 10:20:23 [main] INFO  c.b.m.e.s.MybatisPlusApplicationContextAware - Register ApplicationContext instances org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@e8df99a
2025-06-25 10:20:23 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 10:20:23 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-25 10:20:23 [main] INFO  com.cs.api.ApiApplication - Started ApiApplication in 5.067 seconds (process running for 5.472)

==========================================================
  应用启动成功! 
  应用地址: http://localhost:8080
  API文档: http://localhost:8080/swagger-ui.html
  数据库控制台: http://localhost:8080/h2-console
  健康检查: http://localhost:8080/actuator/health
==========================================================
2025-06-25 10:20:50 [http-nio-8080-exec-2] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-25 10:20:50 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-25 10:20:50 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-25 10:20:51 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='A folio in an operating system'}
2025-06-25 10:20:51 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收三元组搜索请求: TripleSearchRequestDTO{concept='folio', context='folio是Linux内核的重要组件，需要分析其相关概念和关系。'}
2025-06-25 10:20:51 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='A folio in an operating system', version='null'}
2025-06-25 10:20:51 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=A folio in an operating system, version=null
2025-06-25 10:20:51 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 开始搜索三元组: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
2025-06-25 10:20:51 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=A folio in an operating system
2025-06-25 10:20:51 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=A folio in an operating system
2025-06-25 10:20:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索相关实体: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
2025-06-25 10:20:51 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=A folio in an operating system
2025-06-25 10:20:51 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1205
Creating a new SqlSession
SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@24fd13db] was not registered for synchronization because synchronization is not active
2025-06-25 10:20:51 [http-nio-8080-exec-6] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 10:20:51 [http-nio-8080-exec-4] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-25 10:20:51 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-25 10:20:51 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-25 10:20:51 [http-nio-8080-exec-6] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4d4ff40a
2025-06-25 10:20:51 [http-nio-8080-exec-6] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
JDBC Connection [HikariProxyConnection@1981373341 wrapping com.mysql.cj.jdbc.ConnectionImpl@4d4ff40a] will not be managed by Spring
==>  Preparing: SELECT * FROM entities_extraction WHERE name_en = ?
==> Parameters: folio(String)
<==    Columns: eid, name_en, name_cn, source, definition_en, definition_cn, aliases, rel_desc, wikidata_id, create_time, update_time, feature_id
<==        Row: 57588, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:47, 2025-06-18 10:17:47, 33927
<==        Row: 57462, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:42, 2025-06-18 10:17:42, 33943
<==        Row: 53621, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34652
<==        Row: 53616, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34653
<==        Row: 45060, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:39, 2025-06-18 10:04:39, 36284
<==        Row: 44967, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36294
<==        Row: 44962, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36295
<==        Row: 41754, Folio, null, JSONL_EXTRACTION_6.1, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:02:50, 2025-06-18 10:02:50, 36894
<==        Row: 34240, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38350
<==        Row: 34231, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38351
<==        Row: 34221, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38353
<==        Row: 34207, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38355
<==        Row: 30507, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:42, 2025-06-18 09:56:42, 39099
<==        Row: 30368, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:37, 2025-06-18 09:56:37, 39123
<==        Row: 27246, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:55, 2025-06-18 09:54:55, 39729
<==        Row: 27197, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:53, 2025-06-18 09:54:53, 39738
<==        Row: 27097, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:50, 2025-06-18 09:54:50, 39758
<==        Row: 23515, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40454
<==        Row: 23511, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40455
<==        Row: 23506, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40456
<==        Row: 23500, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40457
<==        Row: 23457, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40468
<==        Row: 23433, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40471
<==        Row: 20228, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41114
<==        Row: 20218, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41116
<==        Row: 20210, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41117
<==        Row: 20202, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41119
<==        Row: 20193, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41120
<==        Row: 20191, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41121
<==        Row: 20186, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:52, 2025-06-18 09:50:52, 41122
<==        Row: 17391, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41675
<==        Row: 17379, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41677
<==        Row: 17354, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:20, 2025-06-18 09:49:20, 41682
<==        Row: 13712, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42404
<==        Row: 13700, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42407
<==        Row: 13619, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:17, 2025-06-18 09:47:17, 42422
<==        Row: 13600, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42426
<==        Row: 13598, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42427
<==        Row: 13578, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42431
<==        Row: 10759, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:44, 2025-06-18 09:45:44, 43004
<==        Row: 10512, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:35, 2025-06-18 09:45:35, 43056
<==        Row: 10459, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:34, 2025-06-18 09:45:34, 43065
<==        Row: 7527, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:46, 2025-06-17 22:27:46, 43667
<==        Row: 7385, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:42, 2025-06-17 22:27:42, 43689
<==        Row: 7324, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:40, 2025-06-17 22:27:40, 43702
<==        Row: 1283, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 17:20:59, 2025-01-19 17:20:59, 44490
<==        Row: 1238, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 15:15:44, 2025-01-19 15:15:44, 44498
<==        Row: 972, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 03:33:02, 2025-01-19 03:33:02, 44546
<==        Row: 913, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:47:37, 2025-01-19 00:47:37, 44559
<==        Row: 903, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:37:47, 2025-01-19 00:37:47, 44560
<==        Row: 900, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:31:26, 2025-01-19 00:31:26, 44561
<==        Row: 880, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 23:44:45, 2025-01-18 23:44:45, 44565
<==        Row: 860, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 22:55:04, 2025-01-18 22:55:04, 44569
<==        Row: 3186, folio, null, JSONL_EXTRACTION_6.12, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:25:19, 2025-06-17 22:25:19, 44577
<==      Total: 54
Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@24fd13db]
2025-06-25 10:20:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索到20个唯一相关实体
2025-06-25 10:20:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 找到20个相关实体
2025-06-25 10:20:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 提取到20个feature描述
2025-06-25 10:20:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第1批，包含5个feature描述
2025-06-25 10:20:51 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2932
2025-06-25 10:20:56 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:20:56 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-25 10:20:56 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-25 10:20:56 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-25 10:20:56 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-25 10:20:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-25 10:20:59 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-25 10:20:59 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-25 10:20:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-25 10:20:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-25 10:20:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-25 10:20:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-25 10:20:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-25 10:20:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-25 10:20:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-25 10:20:59 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-25 10:20:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-25 10:20:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-25 10:20:59 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-25 10:20:59 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-25 10:20:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-25 10:20:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-25 10:20:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-25 10:20:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-25 10:21:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-25 10:21:00 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-25 10:21:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-25 10:21:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:21:00 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:21:00 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:21:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-25 10:21:00 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-25 10:21:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-25 10:21:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:21:00 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:21:00 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:21:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-25 10:21:00 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-25 10:21:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-25 10:21:01 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-25 10:21:01 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-25 10:21:01 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-25 10:21:01 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-25 10:21:01 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-25 10:21:01 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-25 10:21:01 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-25 10:21:01 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-25 10:21:01 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-25 10:21:01 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-25 10:21:01 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:21:02 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第2批，包含5个feature描述
2025-06-25 10:21:02 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2786
2025-06-25 10:21:10 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:21:11 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第3批，包含5个feature描述
2025-06-25 10:21:11 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2590
2025-06-25 10:21:21 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:21:22 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第4批，包含5个feature描述
2025-06-25 10:21:22 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2608
2025-06-25 10:21:28 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:21:28 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 三元组搜索完成，共提取31个结果
2025-06-25 10:21:28 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 三元组搜索成功，找到31个结果
2025-06-25 10:22:34 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的变更

## 背景介绍

在Linux内核的内存管理', version='null'}
2025-06-25 10:22:34 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的变更

## 背景介绍

在Linux内核的内存管理'}
2025-06-25 10:22:34 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的变更

## 背景介绍

在Linux内核的内存管理, version=null
2025-06-25 10:22:34 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的变更

## 背景介绍

在Linux内核的内存管理
2025-06-25 10:22:34 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的变更

## 背景介绍

在Linux内核的内存管理
2025-06-25 10:22:34 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的变更

## 背景介绍

在Linux内核的内存管理
2025-06-25 10:22:34 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1365
2025-06-25 10:22:34 [http-nio-8080-exec-10] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-25 10:22:34 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-25 10:22:34 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-25 10:22:38 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:22:38 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-25 10:22:38 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-25 10:22:38 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-25 10:22:38 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-25 10:22:39 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:22:39 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:22:39 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:22:39 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-25 10:22:39 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-25 10:22:39 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的变更

## 背景介绍

在Linux内核的内存管理, version=null
2025-06-25 10:23:05 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='A folio in an operating system'}
2025-06-25 10:23:05 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=A folio in an operating system
2025-06-25 10:23:05 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=A folio in an operating system
2025-06-25 10:23:05 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='A folio in an operating system', version='null'}
2025-06-25 10:23:05 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=A folio in an operating system, version=null
2025-06-25 10:23:05 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=A folio in an operating system
2025-06-25 10:23:05 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1205
2025-06-25 10:23:05 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收三元组搜索请求: TripleSearchRequestDTO{concept='folio', context='folio是Linux内核的重要组件，需要分析其相关概念和关系。'}
2025-06-25 10:23:05 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 开始搜索三元组: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
2025-06-25 10:23:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索相关实体: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
Creating a new SqlSession
SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@61a292bf] was not registered for synchronization because synchronization is not active
JDBC Connection [HikariProxyConnection@1149121993 wrapping com.mysql.cj.jdbc.ConnectionImpl@4d4ff40a] will not be managed by Spring
==>  Preparing: SELECT * FROM entities_extraction WHERE name_en = ?
==> Parameters: folio(String)
2025-06-25 10:23:05 [http-nio-8080-exec-3] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-25 10:23:05 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-25 10:23:05 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
<==    Columns: eid, name_en, name_cn, source, definition_en, definition_cn, aliases, rel_desc, wikidata_id, create_time, update_time, feature_id
<==        Row: 57588, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:47, 2025-06-18 10:17:47, 33927
<==        Row: 57462, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:42, 2025-06-18 10:17:42, 33943
<==        Row: 53621, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34652
<==        Row: 53616, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34653
<==        Row: 45060, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:39, 2025-06-18 10:04:39, 36284
<==        Row: 44967, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36294
<==        Row: 44962, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36295
<==        Row: 41754, Folio, null, JSONL_EXTRACTION_6.1, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:02:50, 2025-06-18 10:02:50, 36894
<==        Row: 34240, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38350
<==        Row: 34231, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38351
<==        Row: 34221, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38353
<==        Row: 34207, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38355
<==        Row: 30507, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:42, 2025-06-18 09:56:42, 39099
<==        Row: 30368, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:37, 2025-06-18 09:56:37, 39123
<==        Row: 27246, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:55, 2025-06-18 09:54:55, 39729
<==        Row: 27197, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:53, 2025-06-18 09:54:53, 39738
<==        Row: 27097, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:50, 2025-06-18 09:54:50, 39758
<==        Row: 23515, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40454
<==        Row: 23511, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40455
<==        Row: 23506, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40456
<==        Row: 23500, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40457
<==        Row: 23457, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40468
<==        Row: 23433, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40471
<==        Row: 20228, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41114
<==        Row: 20218, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41116
<==        Row: 20210, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41117
<==        Row: 20202, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41119
<==        Row: 20193, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41120
<==        Row: 20191, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41121
<==        Row: 20186, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:52, 2025-06-18 09:50:52, 41122
<==        Row: 17391, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41675
<==        Row: 17379, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41677
<==        Row: 17354, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:20, 2025-06-18 09:49:20, 41682
<==        Row: 13712, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42404
<==        Row: 13700, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42407
<==        Row: 13619, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:17, 2025-06-18 09:47:17, 42422
<==        Row: 13600, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42426
<==        Row: 13598, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42427
<==        Row: 13578, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42431
<==        Row: 10759, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:44, 2025-06-18 09:45:44, 43004
<==        Row: 10512, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:35, 2025-06-18 09:45:35, 43056
<==        Row: 10459, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:34, 2025-06-18 09:45:34, 43065
<==        Row: 7527, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:46, 2025-06-17 22:27:46, 43667
<==        Row: 7385, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:42, 2025-06-17 22:27:42, 43689
<==        Row: 7324, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:40, 2025-06-17 22:27:40, 43702
<==        Row: 1283, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 17:20:59, 2025-01-19 17:20:59, 44490
<==        Row: 1238, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 15:15:44, 2025-01-19 15:15:44, 44498
<==        Row: 972, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 03:33:02, 2025-01-19 03:33:02, 44546
<==        Row: 913, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:47:37, 2025-01-19 00:47:37, 44559
<==        Row: 903, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:37:47, 2025-01-19 00:37:47, 44560
<==        Row: 900, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:31:26, 2025-01-19 00:31:26, 44561
<==        Row: 880, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 23:44:45, 2025-01-18 23:44:45, 44565
<==        Row: 860, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 22:55:04, 2025-01-18 22:55:04, 44569
<==        Row: 3186, folio, null, JSONL_EXTRACTION_6.12, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:25:19, 2025-06-17 22:25:19, 44577
<==      Total: 54
Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@61a292bf]
2025-06-25 10:23:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索到20个唯一相关实体
2025-06-25 10:23:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 找到20个相关实体
2025-06-25 10:23:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 提取到20个feature描述
2025-06-25 10:23:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第1批，包含5个feature描述
2025-06-25 10:23:05 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2932
2025-06-25 10:23:09 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:23:09 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, multi_page, folio_page]
2025-06-25 10:23:09 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, multi_page]
2025-06-25 10:23:09 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-25 10:23:09 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-25 10:23:11 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-25 10:23:11 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-25 10:23:11 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-25 10:23:11 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-25 10:23:11 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-25 10:23:11 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-25 10:23:11 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-25 10:23:11 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-25 10:23:11 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-25 10:23:11 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-25 10:23:11 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-25 10:23:11 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-25 10:23:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-25 10:23:12 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-25 10:23:12 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-25 10:23:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-25 10:23:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-25 10:23:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-25 10:23:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-25 10:23:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-25 10:23:12 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-25 10:23:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-25 10:23:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:23:12 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:23:12 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:23:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-25 10:23:12 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-25 10:23:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-25 10:23:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:23:12 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:23:12 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:23:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-25 10:23:12 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=multi_page, version=v6.14
2025-06-25 10:23:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/multi_page?version=v6.14
2025-06-25 10:23:13 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:23:13 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:23:13 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:23:13 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=multi_page, url=https://elixir.bootlin.com/api/ident/linux/multi_page?version=v6.14, 提取到0个代码片段
2025-06-25 10:23:13 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-25 10:23:13 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-25 10:23:13 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:23:14 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第2批，包含5个feature描述
2025-06-25 10:23:14 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2786
2025-06-25 10:23:22 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:23:23 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第3批，包含5个feature描述
2025-06-25 10:23:23 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2590
2025-06-25 10:23:32 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:23:33 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第4批，包含5个feature描述
2025-06-25 10:23:33 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2608
2025-06-25 10:23:39 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:23:39 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 三元组搜索完成，共提取27个结果
2025-06-25 10:23:39 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 三元组搜索成功，找到27个结果
2025-06-25 10:27:32 [http-nio-8080-exec-1] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit=''}
2025-06-25 10:27:32 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=
2025-06-25 10:27:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=
2025-06-25 10:27:32 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=
2025-06-25 10:27:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 568
2025-06-25 10:27:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-25 10:27:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-25 10:27:32 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-25 10:27:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-25 10:27:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-25 10:27:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.9-rc4
2025-06-25 10:27:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-25 10:27:32 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=309, endLine=383, snippetLength=1575
2025-06-25 10:27:32 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-25 10:27:32 [http-nio-8080-exec-1] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-25 10:27:54 [http-nio-8080-exec-3] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='05c5323b2a344c19c51cd1b91a4ab9ae90853794'}
2025-06-25 10:27:54 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-25 10:27:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-25 10:27:54 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-25 10:27:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 698
2025-06-25 10:27:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-25 10:27:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-25 10:27:54 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-25 10:27:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-25 10:27:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-25 10:27:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.9-rc4
2025-06-25 10:27:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-25 10:27:54 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=309, endLine=383, snippetLength=1575
2025-06-25 10:27:54 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-25 10:27:54 [http-nio-8080-exec-3] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-25 10:28:00 [http-nio-8080-exec-2] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='21c690a349baab895dc68ab70d291e1598d7109d'}
2025-06-25 10:28:00 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-25 10:28:00 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-25 10:28:00 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-25 10:28:00 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 586
2025-06-25 10:28:00 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-25 10:28:00 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-25 10:28:00 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-25 10:28:00 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.6-rc4
2025-06-25 10:28:00 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.6-rc4
2025-06-25 10:28:00 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.6-rc4
2025-06-25 10:28:00 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-25 10:28:00 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=293, endLine=361, snippetLength=1454
2025-06-25 10:28:00 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-25 10:28:00 [http-nio-8080-exec-2] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-25 10:28:03 [http-nio-8080-exec-5] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='1d44f2e6d178163a94980fd5f9a4b04b6b36535b'}
2025-06-25 10:28:03 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=1d44f2e6d178163a94980fd5f9a4b04b6b36535b
2025-06-25 10:28:03 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=1d44f2e6d178163a94980fd5f9a4b04b6b36535b
2025-06-25 10:28:03 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=1d44f2e6d178163a94980fd5f9a4b04b6b36535b
2025-06-25 10:28:03 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 586
2025-06-25 10:28:03 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-25 10:28:03 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-25 10:28:03 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=131521, commitId='85a1333417a7561c1d10a77d6c873a37e6ea63a0', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:47', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: use dedicated entry for swap in folio', added=15, deleted=13, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-25 10:28:03 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-25 10:28:03 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-25 10:28:03 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.5-rc4
2025-06-25 10:28:03 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-25 10:28:03 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=301, endLine=367, snippetLength=1444
2025-06-25 10:28:03 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=131521, commitId='85a1333417a7561c1d10a77d6c873a37e6ea63a0', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:47', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: use dedicated entry for swap in folio', added=15, deleted=13, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-25 10:28:03 [http-nio-8080-exec-5] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=131521, commitId='85a1333417a7561c1d10a77d6c873a37e6ea63a0', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:47', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: use dedicated entry for swap in folio', added=15, deleted=13, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-25 10:28:04 [http-nio-8080-exec-4] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='85a1333417a7561c1d10a77d6c873a37e6ea63a0'}
2025-06-25 10:28:04 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=85a1333417a7561c1d10a77d6c873a37e6ea63a0
2025-06-25 10:28:04 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=85a1333417a7561c1d10a77d6c873a37e6ea63a0
2025-06-25 10:28:04 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=85a1333417a7561c1d10a77d6c873a37e6ea63a0
2025-06-25 10:28:04 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 594
2025-06-25 10:28:04 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-25 10:28:04 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-25 10:28:04 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=131522, commitId='cfeed8ffe55b37fa10286aaaa1369da00cb88440', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:46', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: stop using page->private on tail pages for THP_SWAP', added=26, deleted=28, company='redhat.com', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-25 10:28:04 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-25 10:28:04 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-25 10:28:04 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.5-rc4
2025-06-25 10:28:04 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-25 10:28:04 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=301, endLine=367, snippetLength=1444
2025-06-25 10:28:04 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=131522, commitId='cfeed8ffe55b37fa10286aaaa1369da00cb88440', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:46', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: stop using page->private on tail pages for THP_SWAP', added=26, deleted=28, company='redhat.com', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-25 10:28:04 [http-nio-8080-exec-4] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=131522, commitId='cfeed8ffe55b37fa10286aaaa1369da00cb88440', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:46', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: stop using page->private on tail pages for THP_SWAP', added=26, deleted=28, company='redhat.com', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-25 10:28:05 [http-nio-8080-exec-6] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='cfeed8ffe55b37fa10286aaaa1369da00cb88440'}
2025-06-25 10:28:05 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=cfeed8ffe55b37fa10286aaaa1369da00cb88440
2025-06-25 10:28:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=cfeed8ffe55b37fa10286aaaa1369da00cb88440
2025-06-25 10:28:05 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=cfeed8ffe55b37fa10286aaaa1369da00cb88440
2025-06-25 10:28:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 549
2025-06-25 10:28:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-25 10:28:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-25 10:28:05 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=133180, commitId='b10ff04dc0ec7cc7dbb0eac98c4202ec8d28c21b', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-16 23:12:00', commitTime='2023-08-22 05:28:45', commitTitle='mm: add tail private fields to struct folio', added=13, deleted=1, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='Remove _folio_dtor and _folio_order', newbiesVersion='6.6', featureId='48114'}
2025-06-25 10:28:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-25 10:28:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-25 10:28:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.5-rc4
2025-06-25 10:28:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-25 10:28:05 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=301, endLine=367, snippetLength=1444
2025-06-25 10:28:05 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=133180, commitId='b10ff04dc0ec7cc7dbb0eac98c4202ec8d28c21b', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-16 23:12:00', commitTime='2023-08-22 05:28:45', commitTitle='mm: add tail private fields to struct folio', added=13, deleted=1, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='Remove _folio_dtor and _folio_order', newbiesVersion='6.6', featureId='48114'}
2025-06-25 10:28:05 [http-nio-8080-exec-6] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=133180, commitId='b10ff04dc0ec7cc7dbb0eac98c4202ec8d28c21b', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-16 23:12:00', commitTime='2023-08-22 05:28:45', commitTitle='mm: add tail private fields to struct folio', added=13, deleted=1, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='Remove _folio_dtor and _folio_order', newbiesVersion='6.6', featureId='48114'}
2025-06-25 10:33:14 [http-nio-8080-exec-8] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='b10ff04dc0ec7cc7dbb0eac98c4202ec8d28c21b'}
2025-06-25 10:33:14 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=b10ff04dc0ec7cc7dbb0eac98c4202ec8d28c21b
2025-06-25 10:33:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=b10ff04dc0ec7cc7dbb0eac98c4202ec8d28c21b
2025-06-25 10:33:14 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=b10ff04dc0ec7cc7dbb0eac98c4202ec8d28c21b
2025-06-25 10:33:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 548
2025-06-25 10:33:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-25 10:33:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-25 10:33:14 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=133182, commitId='ebc1baf5c9b46c2240c580a2fd992b2e48606dfa', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-16 23:11:58', commitTime='2023-08-22 05:28:45', commitTitle='mm: free up a word in the first tail page', added=11, deleted=12, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='Remove _folio_dtor and _folio_order', newbiesVersion='6.6', featureId='48114'}
2025-06-25 10:33:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-25 10:33:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-25 10:33:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.5-rc4
2025-06-25 10:33:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-25 10:33:14 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=301, endLine=367, snippetLength=1444
2025-06-25 10:33:14 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=133182, commitId='ebc1baf5c9b46c2240c580a2fd992b2e48606dfa', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-16 23:11:58', commitTime='2023-08-22 05:28:45', commitTitle='mm: free up a word in the first tail page', added=11, deleted=12, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='Remove _folio_dtor and _folio_order', newbiesVersion='6.6', featureId='48114'}
2025-06-25 10:33:14 [http-nio-8080-exec-8] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=133182, commitId='ebc1baf5c9b46c2240c580a2fd992b2e48606dfa', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-16 23:11:58', commitTime='2023-08-22 05:28:45', commitTitle='mm: free up a word in the first tail page', added=11, deleted=12, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='Remove _folio_dtor and _folio_order', newbiesVersion='6.6', featureId='48114'}
2025-06-25 10:35:00 [http-nio-8080-exec-10] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-25 10:35:00 [http-nio-8080-exec-1] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-25 10:35:00 [http-nio-8080-exec-3] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-25 10:35:51 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='A folio in an operating system', version='null'}
2025-06-25 10:35:51 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='A folio in an operating system'}
2025-06-25 10:35:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=A folio in an operating system, version=null
2025-06-25 10:35:51 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=A folio in an operating system
2025-06-25 10:35:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=A folio in an operating system
2025-06-25 10:35:51 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=A folio in an operating system
2025-06-25 10:35:51 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1205
2025-06-25 10:35:51 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收三元组搜索请求: TripleSearchRequestDTO{concept='folio', context='folio是Linux内核的重要组件，需要分析其相关概念和关系。'}
2025-06-25 10:35:51 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 开始搜索三元组: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
2025-06-25 10:35:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索相关实体: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
Creating a new SqlSession
SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@7e5acd5] was not registered for synchronization because synchronization is not active
JDBC Connection [HikariProxyConnection@788414017 wrapping com.mysql.cj.jdbc.ConnectionImpl@4555e47f] will not be managed by Spring
==>  Preparing: SELECT * FROM entities_extraction WHERE name_en = ?
==> Parameters: folio(String)
<==    Columns: eid, name_en, name_cn, source, definition_en, definition_cn, aliases, rel_desc, wikidata_id, create_time, update_time, feature_id
<==        Row: 57588, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:47, 2025-06-18 10:17:47, 33927
<==        Row: 57462, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:42, 2025-06-18 10:17:42, 33943
<==        Row: 53621, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34652
<==        Row: 53616, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34653
<==        Row: 45060, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:39, 2025-06-18 10:04:39, 36284
<==        Row: 44967, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36294
<==        Row: 44962, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36295
<==        Row: 41754, Folio, null, JSONL_EXTRACTION_6.1, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:02:50, 2025-06-18 10:02:50, 36894
<==        Row: 34240, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38350
<==        Row: 34231, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38351
<==        Row: 34221, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38353
<==        Row: 34207, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38355
<==        Row: 30507, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:42, 2025-06-18 09:56:42, 39099
<==        Row: 30368, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:37, 2025-06-18 09:56:37, 39123
<==        Row: 27246, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:55, 2025-06-18 09:54:55, 39729
<==        Row: 27197, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:53, 2025-06-18 09:54:53, 39738
<==        Row: 27097, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:50, 2025-06-18 09:54:50, 39758
<==        Row: 23515, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40454
<==        Row: 23511, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40455
<==        Row: 23506, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40456
<==        Row: 23500, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40457
<==        Row: 23457, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40468
<==        Row: 23433, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40471
<==        Row: 20228, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41114
<==        Row: 20218, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41116
<==        Row: 20210, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41117
<==        Row: 20202, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41119
<==        Row: 20193, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41120
<==        Row: 20191, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41121
<==        Row: 20186, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:52, 2025-06-18 09:50:52, 41122
<==        Row: 17391, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41675
<==        Row: 17379, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41677
<==        Row: 17354, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:20, 2025-06-18 09:49:20, 41682
<==        Row: 13712, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42404
<==        Row: 13700, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42407
<==        Row: 13619, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:17, 2025-06-18 09:47:17, 42422
<==        Row: 13600, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42426
<==        Row: 13598, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42427
<==        Row: 13578, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42431
<==        Row: 10759, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:44, 2025-06-18 09:45:44, 43004
<==        Row: 10512, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:35, 2025-06-18 09:45:35, 43056
<==        Row: 10459, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:34, 2025-06-18 09:45:34, 43065
<==        Row: 7527, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:46, 2025-06-17 22:27:46, 43667
<==        Row: 7385, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:42, 2025-06-17 22:27:42, 43689
<==        Row: 7324, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:40, 2025-06-17 22:27:40, 43702
<==        Row: 1283, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 17:20:59, 2025-01-19 17:20:59, 44490
<==        Row: 1238, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 15:15:44, 2025-01-19 15:15:44, 44498
<==        Row: 972, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 03:33:02, 2025-01-19 03:33:02, 44546
<==        Row: 913, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:47:37, 2025-01-19 00:47:37, 44559
<==        Row: 903, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:37:47, 2025-01-19 00:37:47, 44560
<==        Row: 900, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:31:26, 2025-01-19 00:31:26, 44561
<==        Row: 880, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 23:44:45, 2025-01-18 23:44:45, 44565
<==        Row: 860, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 22:55:04, 2025-01-18 22:55:04, 44569
<==        Row: 3186, folio, null, JSONL_EXTRACTION_6.12, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:25:19, 2025-06-17 22:25:19, 44577
<==      Total: 54
Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@7e5acd5]
2025-06-25 10:35:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索到20个唯一相关实体
2025-06-25 10:35:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 找到20个相关实体
2025-06-25 10:35:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 提取到20个feature描述
2025-06-25 10:35:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第1批，包含5个feature描述
2025-06-25 10:35:51 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2932
2025-06-25 10:35:51 [http-nio-8080-exec-7] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-25 10:35:51 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-25 10:35:51 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-25 10:35:55 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:35:55 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, memory_folio, folio_page]
2025-06-25 10:35:55 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, memory_folio]
2025-06-25 10:35:55 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-25 10:35:55 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-25 10:35:58 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-25 10:35:58 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-25 10:35:58 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-25 10:35:58 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-25 10:35:58 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-25 10:35:58 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-25 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-25 10:35:59 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:35:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:35:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:35:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:35:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-25 10:35:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-25 10:35:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-25 10:35:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:35:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:35:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:35:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-25 10:35:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-25 10:35:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-25 10:35:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:35:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:35:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:35:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-25 10:35:59 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-25 10:35:59 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-25 10:36:00 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第2批，包含5个feature描述
2025-06-25 10:36:00 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2786
2025-06-25 10:36:08 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:36:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第3批，包含5个feature描述
2025-06-25 10:36:09 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2590
2025-06-25 10:36:16 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:36:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第4批，包含5个feature描述
2025-06-25 10:36:17 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2608
2025-06-25 10:36:23 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:36:23 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 三元组搜索完成，共提取25个结果
2025-06-25 10:36:23 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 三元组搜索成功，找到25个结果
2025-06-25 10:39:40 [http-nio-8080-exec-5] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit=''}
2025-06-25 10:39:40 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=
2025-06-25 10:39:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=
2025-06-25 10:39:40 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=
2025-06-25 10:39:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 568
2025-06-25 10:39:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-25 10:39:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-25 10:39:40 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-25 10:39:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-25 10:39:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-25 10:39:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.9-rc4
2025-06-25 10:39:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-25 10:39:40 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=309, endLine=383, snippetLength=1575
2025-06-25 10:39:40 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-25 10:39:40 [http-nio-8080-exec-5] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-25 10:39:43 [http-nio-8080-exec-2] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='05c5323b2a344c19c51cd1b91a4ab9ae90853794'}
2025-06-25 10:39:43 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-25 10:39:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-25 10:39:43 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-25 10:39:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 698
2025-06-25 10:39:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-25 10:39:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-25 10:39:43 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-25 10:39:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-25 10:39:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-25 10:39:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.9-rc4
2025-06-25 10:39:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-25 10:39:43 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=309, endLine=383, snippetLength=1575
2025-06-25 10:39:43 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-25 10:39:43 [http-nio-8080-exec-2] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-25 10:42:17 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-25 10:42:17 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-25 10:42:17 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 10:42:17 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 10:42:17 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 10:42:17 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 10:42:17 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1264
2025-06-25 10:42:17 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-25 10:42:17 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-25 10:42:17 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-25 10:42:17 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 10:42:17 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 10:42:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 10:42:17 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-25 10:42:17 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 10:42:17 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 10:42:17 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 10:42:17 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 10:42:17 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 10:42:17 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1263
2025-06-25 10:42:17 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1263
2025-06-25 10:42:17 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-25 10:42:17 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-25 10:42:17 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-25 10:42:17 [http-nio-8080-exec-8] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-25 10:42:17 [http-nio-8080-exec-10] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-25 10:42:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-25 10:42:17 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-25 10:42:17 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-25 10:42:17 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-25 10:42:23 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:42:23 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-25 10:42:23 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-25 10:42:23 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-25 10:42:23 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-25 10:42:23 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:42:23 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc, vma_pages_alloc]
2025-06-25 10:42:23 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc]
2025-06-25 10:42:23 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-25 10:42:23 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-25 10:42:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:42:24 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:42:24 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:42:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-25 10:42:24 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-25 10:42:24 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 10:42:25 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:42:25 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [vma_alloc_folio, vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, __vma_alloc_folio, vma_alloc_folio_gfp]
2025-06-25 10:42:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, __vma_alloc_folio, vma_alloc_folio_gfp]
2025-06-25 10:42:25 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-25 10:42:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-25 10:42:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-25 10:42:25 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-25 10:42:25 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-25 10:42:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-25 10:42:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-25 10:42:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-25 10:42:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-25 10:42:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-25 10:42:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-25 10:42:25 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-25 10:42:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-25 10:42:26 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:42:26 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:42:26 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:42:26 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-25 10:42:26 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-25 10:42:26 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-25 10:42:26 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:42:26 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:42:26 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:42:26 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-25 10:42:26 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-25 10:42:26 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-25 10:42:26 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:42:26 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:42:26 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:42:26 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-25 10:42:26 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=__vma_alloc_folio, version=v6.14
2025-06-25 10:42:26 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/__vma_alloc_folio?version=v6.14
2025-06-25 10:42:26 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:42:26 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:42:26 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:42:26 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=__vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/__vma_alloc_folio?version=v6.14, 提取到0个代码片段
2025-06-25 10:42:26 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio_gfp, version=v6.14
2025-06-25 10:42:26 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio_gfp?version=v6.14
2025-06-25 10:42:26 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:42:26 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:42:26 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:42:26 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio_gfp, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio_gfp?version=v6.14, 提取到0个代码片段
2025-06-25 10:42:26 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-25 10:42:26 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-25 10:42:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:42:27 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:42:27 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:42:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-25 10:42:27 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_page, version=v6.14
2025-06-25 10:42:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14
2025-06-25 10:42:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:42:27 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:42:27 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:42:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_page, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14, 提取到0个代码片段
2025-06-25 10:42:27 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-25 10:42:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-25 10:42:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:42:27 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:42:27 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:42:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-25 10:42:27 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_page_alloc, version=v6.14
2025-06-25 10:42:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14
2025-06-25 10:42:28 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:42:28 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:42:28 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:42:28 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_page_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14, 提取到0个代码片段
2025-06-25 10:42:28 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-25 10:42:28 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 10:44:07 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='# Linux内核中从alloc_pages_vma()到vma_alloc_folio()的变更分析

## 背景介绍

在Linux内核的<concept>memory management</c', version='null'}
2025-06-25 10:44:07 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='# Linux内核中从alloc_pages_vma()到vma_alloc_folio()的变更分析

## 背景介绍

在Linux内核的<concept>memory management</c'}
2025-06-25 10:44:07 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=# Linux内核中从alloc_pages_vma()到vma_alloc_folio()的变更分析

## 背景介绍

在Linux内核的<concept>memory management</c, version=null
2025-06-25 10:44:07 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=# Linux内核中从alloc_pages_vma()到vma_alloc_folio()的变更分析

## 背景介绍

在Linux内核的<concept>memory management</c
2025-06-25 10:44:07 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=# Linux内核中从alloc_pages_vma()到vma_alloc_folio()的变更分析

## 背景介绍

在Linux内核的<concept>memory management</c
2025-06-25 10:44:07 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=# Linux内核中从alloc_pages_vma()到vma_alloc_folio()的变更分析

## 背景介绍

在Linux内核的<concept>memory management</c
2025-06-25 10:44:07 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1275
2025-06-25 10:44:07 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-25 10:44:07 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-25 10:44:07 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-25 10:44:12 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 10:44:12 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, vm_folio]
2025-06-25 10:44:12 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-25 10:44:12 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-25 10:44:12 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-25 10:44:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-25 10:44:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-25 10:44:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-25 10:44:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-25 10:44:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-25 10:44:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-25 10:44:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-25 10:44:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:44:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:44:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:44:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-25 10:44:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-25 10:44:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-25 10:44:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 10:44:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 10:44:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 10:44:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-25 10:44:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-25 10:44:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-25 10:44:16 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-25 10:44:16 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-25 10:44:16 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-25 10:44:16 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-25 10:44:16 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-25 10:44:16 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-25 10:44:16 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-25 10:44:16 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-25 10:44:16 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-25 10:44:16 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-25 11:12:38 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-25 11:12:38 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-25 11:12:38 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 11:12:38 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:12:38 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:12:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:12:38 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1264
2025-06-25 11:12:38 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-25 11:12:38 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-25 11:12:38 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-25 11:12:38 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:12:38 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:12:38 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 11:12:38 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:12:38 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:12:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:12:38 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1263
2025-06-25 11:12:38 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-25 11:12:38 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 11:12:38 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:12:38 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1263
2025-06-25 11:12:38 [http-nio-8080-exec-5] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-25 11:12:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-25 11:12:38 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-25 11:12:38 [http-nio-8080-exec-4] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-25 11:12:38 [http-nio-8080-exec-10] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-25 11:12:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-25 11:12:38 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-25 11:12:38 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-25 11:12:38 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-25 11:12:43 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 11:12:43 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-25 11:12:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-25 11:12:43 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-25 11:12:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-25 11:12:43 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 11:12:43 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc, vma_folio_alloc]
2025-06-25 11:12:43 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc]
2025-06-25 11:12:43 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-25 11:12:43 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-25 11:12:44 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:12:44 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:12:44 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:12:44 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-25 11:12:44 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-25 11:12:44 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 11:12:44 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:12:44 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:12:44 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:12:44 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-25 11:12:44 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-25 11:12:44 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-25 11:12:44 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:12:44 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:12:44 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:12:44 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-25 11:12:44 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_page, version=v6.14
2025-06-25 11:12:44 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14
2025-06-25 11:12:45 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:12:45 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:12:45 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:12:45 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_page, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14, 提取到0个代码片段
2025-06-25 11:12:45 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-25 11:12:45 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-25 11:12:45 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:12:45 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:12:45 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:12:45 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-25 11:12:45 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_page_alloc, version=v6.14
2025-06-25 11:12:45 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14
2025-06-25 11:12:45 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 11:12:45 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [vma_alloc_folio, vma_folio_alloc, alloc_folio_vma, __vma_alloc_folio, vma_alloc_folio_gfp, folio_alloc_vma]
2025-06-25 11:12:45 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, vma_folio_alloc, alloc_folio_vma, __vma_alloc_folio, vma_alloc_folio_gfp]
2025-06-25 11:12:45 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-25 11:12:45 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-25 11:12:45 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:12:45 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:12:45 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:12:45 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_page_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14, 提取到0个代码片段
2025-06-25 11:12:45 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-25 11:12:45 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=在Linux的folio conversion中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 11:12:45 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-25 11:12:45 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-25 11:12:45 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-25 11:12:45 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-25 11:12:45 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-25 11:12:45 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-25 11:12:45 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-25 11:12:45 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-25 11:12:45 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-25 11:12:45 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-25 11:12:45 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-25 11:12:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:12:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:12:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:12:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-25 11:12:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-25 11:12:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-25 11:12:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:12:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:12:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:12:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-25 11:12:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=__vma_alloc_folio, version=v6.14
2025-06-25 11:12:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/__vma_alloc_folio?version=v6.14
2025-06-25 11:12:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:12:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:12:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:12:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=__vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/__vma_alloc_folio?version=v6.14, 提取到0个代码片段
2025-06-25 11:12:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio_gfp, version=v6.14
2025-06-25 11:12:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio_gfp?version=v6.14
2025-06-25 11:12:47 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:12:47 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:12:47 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:12:47 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio_gfp, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio_gfp?version=v6.14, 提取到0个代码片段
2025-06-25 11:12:47 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-25 11:12:47 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-25 11:20:53 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-25 11:20:53 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-25 11:20:53 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:20:53 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 11:20:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:20:53 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:20:53 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1266
2025-06-25 11:20:53 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-25 11:20:53 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-25 11:20:53 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:20:53 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-25 11:20:53 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:20:53 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 11:20:53 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:20:53 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:20:53 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:20:53 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-25 11:20:53 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-25 11:20:53 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 11:20:53 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-25 11:20:53 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-25 11:20:53 [http-nio-8080-exec-4] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-25 11:20:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-25 11:20:53 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-25 11:20:53 [http-nio-8080-exec-1] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-25 11:20:53 [http-nio-8080-exec-3] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-25 11:20:53 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-25 11:20:53 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-25 11:20:53 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-25 11:20:53 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-25 11:20:58 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 11:20:58 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-25 11:20:58 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-25 11:20:58 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-25 11:20:58 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-25 11:20:59 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 11:20:59 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [vma_alloc_folio, vma_alloc_folio_gfp, alloc_folio_vma, __vma_alloc_folio, vma_folio_alloc]
2025-06-25 11:20:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, vma_alloc_folio_gfp, alloc_folio_vma, __vma_alloc_folio, vma_folio_alloc]
2025-06-25 11:20:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-25 11:20:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-25 11:20:59 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 11:20:59 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, alloc_pages_in_vma, vma_pages_alloc, vma_page_allocation, vma_alloc_page]
2025-06-25 11:20:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, alloc_pages_in_vma, vma_pages_alloc, vma_page_allocation]
2025-06-25 11:20:59 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-25 11:20:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-25 11:20:59 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:20:59 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:20:59 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:20:59 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-25 11:20:59 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-25 11:20:59 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 11:21:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-25 11:21:00 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-25 11:21:00 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-25 11:21:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-25 11:21:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-25 11:21:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-25 11:21:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-25 11:21:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-25 11:21:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-25 11:21:00 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio_gfp, version=v6.14
2025-06-25 11:21:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio_gfp?version=v6.14
2025-06-25 11:21:00 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:21:00 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:21:00 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:21:00 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-25 11:21:00 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-25 11:21:00 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-25 11:21:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:21:00 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:21:00 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:21:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio_gfp, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio_gfp?version=v6.14, 提取到0个代码片段
2025-06-25 11:21:00 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-25 11:21:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-25 11:21:00 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:21:00 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:21:00 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:21:00 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-25 11:21:00 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-25 11:21:00 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-25 11:21:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:21:00 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:21:00 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:21:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-25 11:21:00 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=__vma_alloc_folio, version=v6.14
2025-06-25 11:21:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/__vma_alloc_folio?version=v6.14
2025-06-25 11:21:00 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:21:00 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:21:00 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:21:00 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-25 11:21:00 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_pages_alloc, version=v6.14
2025-06-25 11:21:00 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_pages_alloc?version=v6.14
2025-06-25 11:21:01 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:21:01 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:21:01 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:21:01 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=__vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/__vma_alloc_folio?version=v6.14, 提取到0个代码片段
2025-06-25 11:21:01 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-25 11:21:01 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-25 11:21:01 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:21:01 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:21:01 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:21:01 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_pages_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_pages_alloc?version=v6.14, 提取到0个代码片段
2025-06-25 11:21:01 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_page_allocation, version=v6.14
2025-06-25 11:21:01 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_page_allocation?version=v6.14
2025-06-25 11:21:01 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:21:01 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:21:01 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:21:01 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-25 11:21:01 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-25 11:21:01 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-25 11:21:01 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 11:21:01 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 11:21:01 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 11:21:01 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_page_allocation, url=https://elixir.bootlin.com/api/ident/linux/vma_page_allocation?version=v6.14, 提取到0个代码片段
2025-06-25 11:21:01 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-25 11:21:01 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-25 15:21:34 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='folio是干啥的', version='null'}
2025-06-25 15:21:34 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='folio是干啥的'}
2025-06-25 15:21:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=folio是干啥的, version=null
2025-06-25 15:21:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=folio是干啥的
2025-06-25 15:21:34 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=folio是干啥的
2025-06-25 15:21:34 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=folio是干啥的
2025-06-25 15:21:34 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1184
2025-06-25 15:21:34 [http-nio-8080-exec-1] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-25 15:21:34 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-25 15:21:34 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-25 15:21:38 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 15:21:38 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, folio_struct]
2025-06-25 15:21:38 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-25 15:21:38 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-25 15:21:38 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-25 15:21:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-25 15:21:40 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-25 15:21:40 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-25 15:21:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-25 15:21:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-25 15:21:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-25 15:21:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-25 15:21:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-25 15:21:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-25 15:21:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-25 15:21:40 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-25 15:21:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-25 15:21:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-25 15:21:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-25 15:21:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-25 15:21:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-25 15:21:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-25 15:21:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-25 15:21:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-25 15:21:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-25 15:21:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-25 15:21:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-25 15:21:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 15:21:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 15:21:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 15:21:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-25 15:21:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-25 15:21:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-25 15:21:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 15:21:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 15:21:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 15:21:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-25 15:21:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-25 15:21:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-25 15:21:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-25 15:21:42 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-25 15:21:42 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-25 15:21:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-25 15:21:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-25 15:21:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-25 15:21:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-25 15:21:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-25 15:21:42 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-25 15:21:42 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-25 15:33:28 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='folio是干啥的 # Linux内核中的<concept>Folio</concept>机制解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，主要用于'}
2025-06-25 15:33:28 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=folio是干啥的 # Linux内核中的<concept>Folio</concept>机制解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，主要用于
2025-06-25 15:33:28 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=folio是干啥的 # Linux内核中的<concept>Folio</concept>机制解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，主要用于
2025-06-25 15:33:28 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='folio是干啥的 # Linux内核中的<concept>Folio</concept>机制解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，主要用于', version='null'}
2025-06-25 15:33:28 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=folio是干啥的 # Linux内核中的<concept>Folio</concept>机制解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，主要用于, version=null
2025-06-25 15:33:28 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=folio是干啥的 # Linux内核中的<concept>Folio</concept>机制解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，主要用于
2025-06-25 15:33:28 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1285
2025-06-25 15:33:28 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-25 15:33:28 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-25 15:33:28 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-25 15:33:34 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 15:33:34 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, folio_page, memory_folio, mm_folio]
2025-06-25 15:33:34 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, folio_page, memory_folio]
2025-06-25 15:33:34 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-25 15:33:34 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-25 15:33:36 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-25 15:33:36 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-25 15:33:36 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-25 15:33:36 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-25 15:33:36 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-25 15:33:36 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-25 15:33:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-25 15:33:37 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 15:33:37 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 15:33:37 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 15:33:37 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-25 15:33:37 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-25 15:33:37 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-25 15:33:37 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-25 15:33:37 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-25 15:33:37 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-25 15:33:37 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-25 15:33:37 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-25 15:33:37 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-25 15:33:37 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-25 15:33:37 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-25 15:33:37 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-25 15:33:37 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-25 15:33:37 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 15:33:37 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 15:33:37 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 15:33:37 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-25 15:33:37 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-25 15:33:37 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-25 19:21:59 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context='Linux中Folio是什么意思？'}
2025-06-25 19:21:59 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context='Linux中Folio是什么意思？', version='null'}
2025-06-25 19:21:59 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context=Linux中Folio是什么意思？
2025-06-25 19:21:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context=Linux中Folio是什么意思？, version=null
2025-06-25 19:21:59 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint=Linux中Folio是什么意思？
2025-06-25 19:21:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context=Linux中Folio是什么意思？
2025-06-25 19:21:59 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1192
2025-06-25 19:21:59 [http-nio-8080-exec-3] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-25 19:21:59 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-25 19:21:59 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-25 19:22:03 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 19:22:03 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [Folio, page_folio, compound_page, large_page, folio_page, folio_struct]
2025-06-25 19:22:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio, page_folio, compound_page, large_page, folio_page]
2025-06-25 19:22:03 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-25 19:22:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-25 19:22:04 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 19:22:04 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 19:22:04 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 19:22:04 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-25 19:22:04 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-25 19:22:04 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-25 19:22:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-25 19:22:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-25 19:22:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-25 19:22:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-25 19:22:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-25 19:22:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-25 19:22:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-25 19:22:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-25 19:22:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-25 19:22:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-25 19:22:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 19:22:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 19:22:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 19:22:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-25 19:22:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-25 19:22:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-25 19:22:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 19:22:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 19:22:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 19:22:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-25 19:22:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-25 19:22:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-25 19:22:06 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-25 19:22:06 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-25 19:22:06 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-25 19:22:06 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-25 19:22:06 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-25 19:22:06 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-25 19:22:06 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-25 19:22:06 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-25 19:22:06 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增8个结果
2025-06-25 19:22:06 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到8个结果
2025-06-25 20:55:02 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='# Linux内核中的<concept>Folio</concept>机制解析

## 定义与目的

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，用'}
2025-06-25 20:55:02 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=# Linux内核中的<concept>Folio</concept>机制解析

## 定义与目的

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，用
2025-06-25 20:55:02 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=# Linux内核中的<concept>Folio</concept>机制解析

## 定义与目的

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，用
2025-06-25 20:55:02 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='# Linux内核中的<concept>Folio</concept>机制解析

## 定义与目的

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，用', version='null'}
2025-06-25 20:55:02 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=# Linux内核中的<concept>Folio</concept>机制解析

## 定义与目的

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，用, version=null
2025-06-25 20:55:02 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=# Linux内核中的<concept>Folio</concept>机制解析

## 定义与目的

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，用
2025-06-25 20:55:02 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-25 20:55:02 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-25 20:55:02 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-25 20:55:02 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-25 20:55:03 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-25 20:55:03 [http-nio-8080-exec-6] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-25 20:55:03 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-25 20:55:03 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-25 20:55:06 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-25 20:55:06 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [page, folio, page_folio, memory_folio, struct_folio, folio_page]
2025-06-25 20:55:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page, folio, page_folio, memory_folio, struct_folio]
2025-06-25 20:55:06 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-25 20:55:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-25 20:55:12 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-25 20:55:12 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-25 20:55:12 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-25 20:55:12 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-25 20:55:12 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-25 20:55:12 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-25 20:55:12 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-25 20:55:12 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-25 20:55:12 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-25 20:55:12 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-25 20:55:12 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-25 20:55:12 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-25 20:55:12 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-25 20:55:12 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-25 20:55:12 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-25 20:55:13 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-25 20:55:13 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-25 20:55:13 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-25 20:55:13 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-25 20:55:13 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-25 20:55:13 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-25 20:55:13 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-25 20:55:13 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-25 20:55:13 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-25 20:55:13 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-25 20:55:13 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-25 20:55:13 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-25 20:55:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-25 20:55:14 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-25 20:55:14 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-25 20:55:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-25 20:55:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-25 20:55:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-25 20:55:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-25 20:55:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-25 20:55:14 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-25 20:55:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-25 20:55:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 20:55:14 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 20:55:14 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 20:55:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-25 20:55:14 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=struct_folio, version=v6.14
2025-06-25 20:55:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/struct_folio?version=v6.14
2025-06-25 20:55:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-25 20:55:14 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-25 20:55:14 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-25 20:55:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=struct_folio, url=https://elixir.bootlin.com/api/ident/linux/struct_folio?version=v6.14, 提取到0个代码片段
2025-06-25 20:55:14 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增17个结果
2025-06-25 20:55:14 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到17个结果
2025-06-26 09:44:30 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 09:44:30 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 09:44:30 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 09:44:30 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 09:44:30 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 09:44:30 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 09:44:30 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 09:44:30 [http-nio-8080-exec-7] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 09:44:30 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 09:44:30 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 09:44:35 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 09:44:35 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, memory_folio]
2025-06-26 09:44:35 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 09:44:35 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 09:44:35 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 09:44:37 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 09:44:37 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 09:44:37 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 09:44:37 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 09:44:37 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 09:44:38 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 09:44:38 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 09:44:38 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 09:44:38 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 09:44:38 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 09:44:38 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 09:44:38 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 09:44:38 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 09:44:38 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 09:44:38 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 09:44:38 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 09:44:38 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 09:44:38 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 09:44:38 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 09:44:38 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 09:44:40 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 09:44:40 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 09:44:40 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 09:44:40 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 09:44:40 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 09:44:40 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 09:44:40 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 09:44:40 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 09:44:40 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 09:44:40 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 09:49:10 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li'}
2025-06-26 09:49:10 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-26 09:49:10 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-26 09:49:10 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li', version='null'}
2025-06-26 09:49:10 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li, version=null
2025-06-26 09:49:10 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-26 09:49:10 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1275
2025-06-26 09:49:11 [http-nio-8080-exec-1] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-26 09:49:11 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-26 09:49:11 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-26 09:49:15 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 09:49:15 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [Folio, page_folio, compound_page, folio_page, memory_folio, folio_struct]
2025-06-26 09:49:15 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio, page_folio, compound_page, folio_page, memory_folio]
2025-06-26 09:49:15 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-26 09:49:15 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-26 09:49:16 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 09:49:16 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 09:49:16 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 09:49:16 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-26 09:49:16 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 09:49:16 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 09:49:17 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 09:49:17 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 09:49:17 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 09:49:17 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 09:49:17 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 09:49:17 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 09:49:17 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 09:49:17 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 09:49:17 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 09:49:17 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 09:49:17 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 09:49:17 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 09:49:17 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 09:49:17 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 09:49:17 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 09:49:17 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 09:49:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 09:49:18 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 09:49:18 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 09:49:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 09:49:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 09:49:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 09:49:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 09:49:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 09:49:18 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-26 09:49:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-26 09:49:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 09:49:18 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 09:49:18 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 09:49:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-26 09:49:18 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增8个结果
2025-06-26 09:49:18 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到8个结果
2025-06-26 09:49:18 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li'}
2025-06-26 09:49:18 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li', version='null'}
2025-06-26 09:49:18 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-26 09:49:18 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li, version=null
2025-06-26 09:49:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-26 09:49:18 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-26 09:49:18 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1275
2025-06-26 09:49:18 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-26 09:49:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-26 09:49:18 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-26 09:49:23 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 09:49:23 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [Folio, page_folio, compound_page, folio_page, memory_folio, file_folio]
2025-06-26 09:49:23 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio, page_folio, compound_page, folio_page, memory_folio]
2025-06-26 09:49:23 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-26 09:49:23 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-26 09:49:24 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 09:49:24 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 09:49:24 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 09:49:24 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-26 09:49:24 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 09:49:24 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 09:49:24 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 09:49:24 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 09:49:24 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 09:49:24 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 09:49:24 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 09:49:24 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 09:49:24 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 09:49:24 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 09:49:24 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 09:49:24 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 09:49:25 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 09:49:25 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 09:49:25 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 09:49:25 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 09:49:25 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 09:49:25 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 09:49:25 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 09:49:25 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 09:49:25 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 09:49:25 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 09:49:25 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 09:49:25 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 09:49:25 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 09:49:25 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 09:49:25 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-26 09:49:25 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-26 09:49:25 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 09:49:25 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 09:49:25 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 09:49:25 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-26 09:49:25 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增8个结果
2025-06-26 09:49:25 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到8个结果
2025-06-26 09:49:38 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li', version='null'}
2025-06-26 09:49:38 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li'}
2025-06-26 09:49:38 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li, version=null
2025-06-26 09:49:38 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-26 09:49:38 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-26 09:49:38 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-26 09:49:38 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 09:49:38 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 09:49:38 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 09:49:38 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 09:49:39 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 09:49:39 [http-nio-8080-exec-3] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 09:49:39 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 09:49:39 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 09:49:41 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 09:49:41 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [Page, page]
2025-06-26 09:49:41 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, page]
2025-06-26 09:49:41 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 09:49:41 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 09:49:42 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 09:49:42 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 09:49:42 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 09:49:42 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 09:49:42 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 09:49:42 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 09:49:42 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 09:49:42 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 09:49:42 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 09:49:50 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 09:49:50 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 09:49:50 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 09:49:50 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 09:49:50 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 09:49:50 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 09:49:50 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 09:49:50 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 09:49:50 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 09:49:50 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 09:49:50 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 09:49:50 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 09:49:50 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 09:49:50 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-26 09:49:50 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-26 09:53:32 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='what is folio'}
2025-06-26 09:53:32 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=what is folio
2025-06-26 09:53:32 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=what is folio
2025-06-26 09:53:32 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='what is folio', version='null'}
2025-06-26 09:53:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=what is folio, version=null
2025-06-26 09:53:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=what is folio
2025-06-26 09:53:32 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1188
2025-06-26 09:53:32 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 09:53:32 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 09:53:32 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 09:53:36 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 09:53:36 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, memory_folio]
2025-06-26 09:53:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 09:53:36 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 09:53:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 09:53:38 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 09:53:38 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 09:53:38 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 09:53:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 09:53:39 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 09:53:39 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 09:53:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 09:53:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 09:53:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 09:53:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 09:53:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 09:53:39 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 09:53:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 09:53:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 09:53:39 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 09:53:39 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 09:53:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 09:53:39 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 09:53:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 09:53:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 09:53:39 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 09:53:39 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 09:53:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 09:53:39 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 09:53:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 09:53:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 09:53:40 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 09:53:40 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 09:53:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 09:53:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 09:53:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 09:53:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 09:53:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 09:53:40 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 09:53:40 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 09:55:42 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='struct page', context='# Understanding the <concept>Folio</concept> in Linux Kernel

## Introduction

The <concept>folio</c'}
2025-06-26 09:55:42 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=struct page, context=# Understanding the <concept>Folio</concept> in Linux Kernel

## Introduction

The <concept>folio</c
2025-06-26 09:55:42 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=struct page, contextHint=# Understanding the <concept>Folio</concept> in Linux Kernel

## Introduction

The <concept>folio</c
2025-06-26 09:55:42 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='struct page', context='# Understanding the <concept>Folio</concept> in Linux Kernel

## Introduction

The <concept>folio</c', version='null'}
2025-06-26 09:55:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=struct page, context=# Understanding the <concept>Folio</concept> in Linux Kernel

## Introduction

The <concept>folio</c, version=null
2025-06-26 09:55:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=struct page, context=# Understanding the <concept>Folio</concept> in Linux Kernel

## Introduction

The <concept>folio</c
2025-06-26 09:55:42 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1281
2025-06-26 09:55:42 [http-nio-8080-exec-7] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: struct page
2025-06-26 09:55:42 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=struct page, explanationLength=56
2025-06-26 09:55:42 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=struct page
2025-06-26 09:55:47 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 09:55:47 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [struct page, page_t]
2025-06-26 09:55:47 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [struct page, page_t]
2025-06-26 09:55:47 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=struct page, version=v6.14
2025-06-26 09:55:47 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/struct_page?version=v6.14
2025-06-26 09:55:48 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 09:55:48 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 09:55:48 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 09:55:48 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=struct page, url=https://elixir.bootlin.com/api/ident/linux/struct_page?version=v6.14, 提取到0个代码片段
2025-06-26 09:55:48 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_t, version=v6.14
2025-06-26 09:55:48 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_t?version=v6.14
2025-06-26 09:55:48 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 09:55:48 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 09:55:48 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 09:55:48 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_t, url=https://elixir.bootlin.com/api/ident/linux/page_t?version=v6.14, 提取到0个代码片段
2025-06-26 09:55:48 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 09:55:48 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=struct page, context=# Understanding the <concept>Folio</concept> in Linux Kernel

## Introduction

The <concept>folio</c, version=null
2025-06-26 09:58:12 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='RISC-V', context='risc-v在linux内核的发展过程是怎样的'}
2025-06-26 09:58:12 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=RISC-V, context=risc-v在linux内核的发展过程是怎样的
2025-06-26 09:58:12 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=RISC-V, contextHint=risc-v在linux内核的发展过程是怎样的
2025-06-26 09:58:12 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='RISC-V', context='risc-v在linux内核的发展过程是怎样的', version='null'}
2025-06-26 09:58:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=RISC-V, context=risc-v在linux内核的发展过程是怎样的, version=null
2025-06-26 09:58:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=RISC-V, context=risc-v在linux内核的发展过程是怎样的
2025-06-26 09:58:12 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1199
2025-06-26 09:58:12 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=RISC-V, explanationLength=1526
2025-06-26 09:58:12 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=RISC-V
2025-06-26 09:58:16 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 09:58:16 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了4个搜索实体: [RISC-V, RISC-V, RV, RISC5]
2025-06-26 09:58:16 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [RISC-V, RV, RISC5]
2025-06-26 09:58:16 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RISC-V, version=v6.14
2025-06-26 09:58:16 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RISC-V?version=v6.14
2025-06-26 09:58:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 09:58:18 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 09:58:18 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 09:58:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RISC-V, url=https://elixir.bootlin.com/api/ident/linux/RISC-V?version=v6.14, 提取到0个代码片段
2025-06-26 09:58:18 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RV, version=v6.14
2025-06-26 09:58:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RV?version=v6.14
2025-06-26 09:58:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 1946
2025-06-26 09:58:18 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 1946
2025-06-26 09:58:18 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=4, 引用=299
2025-06-26 09:58:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=drivers/ata/ata_piix.c, line=346, version=v6.14
2025-06-26 09:58:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=drivers/ata/ata_piix.c, line=346, version=v6.14
2025-06-26 09:58:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=drivers/ata/ata_piix.c, line=346, version=v6.14
2025-06-26 09:58:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RV, url=https://elixir.bootlin.com/api/ident/linux/RV?version=v6.14, 提取到3个代码片段
2025-06-26 09:58:18 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RISC5, version=v6.14
2025-06-26 09:58:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RISC5?version=v6.14
2025-06-26 09:58:19 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 09:58:19 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 09:58:19 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 09:58:19 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RISC5, url=https://elixir.bootlin.com/api/ident/linux/RISC5?version=v6.14, 提取到0个代码片段
2025-06-26 09:58:19 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-26 09:58:19 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-26 10:09:01 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 10:09:01 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 10:09:01 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 10:09:01 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 10:09:01 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 10:09:01 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 10:09:01 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 10:09:01 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 10:09:01 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 10:09:01 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 10:09:06 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:09:06 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 10:09:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 10:09:06 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 10:09:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 10:09:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 10:09:08 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 10:09:08 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 10:09:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 10:09:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 10:09:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:09:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:09:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 10:09:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 10:09:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 10:09:08 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 10:09:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 10:09:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 10:09:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 10:09:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 10:09:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 10:09:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 10:09:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 10:09:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 10:09:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 10:09:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 10:09:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 10:09:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:09:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:09:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:09:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 10:09:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 10:09:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 10:09:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:09:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:09:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:09:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 10:09:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 10:09:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 10:09:10 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 10:09:10 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 10:09:10 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 10:09:10 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 10:09:10 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 10:09:10 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 10:09:10 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 10:09:10 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 10:09:10 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 10:09:10 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 10:19:03 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 10:19:03 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 10:19:03 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 10:19:03 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 10:19:03 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 10:19:03 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 10:19:03 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 10:19:03 [http-nio-8080-exec-3] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 10:19:03 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 10:19:03 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 10:19:07 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:19:07 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, file_page]
2025-06-26 10:19:07 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 10:19:07 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 10:19:07 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 10:19:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 10:19:18 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 10:19:18 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 10:19:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 10:19:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 10:19:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:19:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:19:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 10:19:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 10:19:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 10:19:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 10:19:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 10:19:21 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 10:19:21 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 10:19:21 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 10:19:21 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 10:19:21 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 10:19:21 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 10:19:21 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 10:19:22 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 10:19:22 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 10:19:22 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 10:19:22 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:19:22 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:19:22 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:19:22 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 10:19:22 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 10:19:22 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 10:19:24 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:19:24 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:19:24 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:19:24 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 10:19:24 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 10:19:24 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 10:19:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 10:19:25 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 10:19:25 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 10:19:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 10:19:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 10:19:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 10:19:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 10:19:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 10:19:25 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 10:19:25 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 10:19:27 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='rcu', context='什么是rcu？'}
2025-06-26 10:19:27 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=rcu, context=什么是rcu？
2025-06-26 10:19:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=rcu, contextHint=什么是rcu？
2025-06-26 10:19:27 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='rcu', context='什么是rcu？', version='null'}
2025-06-26 10:19:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=rcu, context=什么是rcu？, version=null
2025-06-26 10:19:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=rcu, context=什么是rcu？
2025-06-26 10:19:27 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1180
2025-06-26 10:19:27 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: rcu
2025-06-26 10:19:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=rcu, explanationLength=48
2025-06-26 10:19:27 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=rcu
2025-06-26 10:19:32 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:19:32 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了4个搜索实体: [rcu, RCU, Read-Copy-Update, read-copy-update]
2025-06-26 10:19:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [rcu, RCU, Read-Copy-Update, read-copy-update]
2025-06-26 10:19:32 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=rcu, version=v6.14
2025-06-26 10:19:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/rcu?version=v6.14
2025-06-26 10:19:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 72288
2025-06-26 10:19:33 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 72288
2025-06-26 10:19:33 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=493, 引用=1472
2025-06-26 10:19:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/kvm/vgic/vgic.c, line=141, version=v6.14
2025-06-26 10:19:34 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/powerpc/kvm/book3s_64_vio.c, line=64, version=v6.14
2025-06-26 10:19:34 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/powerpc/kvm/book3s_64_vio.c, line=78, version=v6.14
2025-06-26 10:19:34 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=rcu, url=https://elixir.bootlin.com/api/ident/linux/rcu?version=v6.14, 提取到3个代码片段
2025-06-26 10:19:34 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RCU, version=v6.14
2025-06-26 10:19:34 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RCU?version=v6.14
2025-06-26 10:19:34 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:19:34 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:19:34 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:19:34 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RCU, url=https://elixir.bootlin.com/api/ident/linux/RCU?version=v6.14, 提取到0个代码片段
2025-06-26 10:19:34 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Read-Copy-Update, version=v6.14
2025-06-26 10:19:34 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Read-Copy-Update?version=v6.14
2025-06-26 10:19:35 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:19:35 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:19:35 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:19:35 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Read-Copy-Update, url=https://elixir.bootlin.com/api/ident/linux/Read-Copy-Update?version=v6.14, 提取到0个代码片段
2025-06-26 10:19:35 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=read-copy-update, version=v6.14
2025-06-26 10:19:35 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/read-copy-update?version=v6.14
2025-06-26 10:19:35 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:19:35 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:19:35 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:19:35 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=read-copy-update, url=https://elixir.bootlin.com/api/ident/linux/read-copy-update?version=v6.14, 提取到0个代码片段
2025-06-26 10:19:35 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-26 10:19:35 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-26 10:22:49 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='rcu', context='什么是rcu？ # 什么是<concept>RCU</concept>（Read-Copy-Update）？

<concept>RCU</concept>是Linux内核中一种重要的同步机制，全称为Read-Cop'}
2025-06-26 10:22:49 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=rcu, context=什么是rcu？ # 什么是<concept>RCU</concept>（Read-Copy-Update）？

<concept>RCU</concept>是Linux内核中一种重要的同步机制，全称为Read-Cop
2025-06-26 10:22:49 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=rcu, contextHint=什么是rcu？ # 什么是<concept>RCU</concept>（Read-Copy-Update）？

<concept>RCU</concept>是Linux内核中一种重要的同步机制，全称为Read-Cop
2025-06-26 10:22:49 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='rcu', context='什么是rcu？ # 什么是<concept>RCU</concept>（Read-Copy-Update）？

<concept>RCU</concept>是Linux内核中一种重要的同步机制，全称为Read-Cop', version='null'}
2025-06-26 10:22:49 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=rcu, context=什么是rcu？ # 什么是<concept>RCU</concept>（Read-Copy-Update）？

<concept>RCU</concept>是Linux内核中一种重要的同步机制，全称为Read-Cop, version=null
2025-06-26 10:22:49 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=rcu, context=什么是rcu？ # 什么是<concept>RCU</concept>（Read-Copy-Update）？

<concept>RCU</concept>是Linux内核中一种重要的同步机制，全称为Read-Cop
2025-06-26 10:22:49 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1281
2025-06-26 10:22:50 [http-nio-8080-exec-7] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: rcu
2025-06-26 10:22:50 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=rcu, explanationLength=48
2025-06-26 10:22:50 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=rcu
2025-06-26 10:22:55 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:22:55 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [rcu, Read-Copy-Update, RCU, read-copy-update, rcu_sync]
2025-06-26 10:22:55 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [rcu, Read-Copy-Update, RCU, read-copy-update, rcu_sync]
2025-06-26 10:22:55 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=rcu, version=v6.14
2025-06-26 10:22:55 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/rcu?version=v6.14
2025-06-26 10:23:05 [http-nio-8080-exec-4] WARN  c.c.a.s.a.BootlinSearchService - Bootlin HTTP请求异常
org.springframework.web.client.ResourceAccessException: I/O error on GET request for "https://elixir.bootlin.com/api/ident/linux/rcu": elixir.bootlin.com
	at org.springframework.web.client.RestTemplate.createResourceAccessException(RestTemplate.java:915)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:895)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:672)
	at com.cs.api.service.analyzer.BootlinSearchService.executeSearchRequest(BootlinSearchService.java:173)
	at com.cs.api.service.analyzer.BootlinSearchService.search(BootlinSearchService.java:94)
	at com.cs.api.service.impl.EntityLinkServiceImpl.searchWithBootlin(EntityLinkServiceImpl.java:94)
	at com.cs.api.service.impl.EntityLinkServiceImpl.searchCode(EntityLinkServiceImpl.java:67)
	at com.cs.api.controller.EntityLinkController.searchCode(EntityLinkController.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.net.UnknownHostException: elixir.bootlin.com
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:567)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at java.base/sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:304)
	at java.base/sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:181)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:264)
	at java.base/sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:377)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:193)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:179)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:141)
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	... 59 common frames omitted
2025-06-26 10:23:05 [http-nio-8080-exec-4] WARN  c.c.a.s.a.BootlinSearchService - Bootlin 搜索失败，实体: rcu, 状态码: null
2025-06-26 10:23:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Read-Copy-Update, version=v6.14
2025-06-26 10:23:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Read-Copy-Update?version=v6.14
2025-06-26 10:23:05 [http-nio-8080-exec-4] WARN  c.c.a.s.a.BootlinSearchService - Bootlin HTTP请求异常
org.springframework.web.client.ResourceAccessException: I/O error on GET request for "https://elixir.bootlin.com/api/ident/linux/Read-Copy-Update": elixir.bootlin.com
	at org.springframework.web.client.RestTemplate.createResourceAccessException(RestTemplate.java:915)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:895)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:672)
	at com.cs.api.service.analyzer.BootlinSearchService.executeSearchRequest(BootlinSearchService.java:173)
	at com.cs.api.service.analyzer.BootlinSearchService.search(BootlinSearchService.java:94)
	at com.cs.api.service.impl.EntityLinkServiceImpl.searchWithBootlin(EntityLinkServiceImpl.java:94)
	at com.cs.api.service.impl.EntityLinkServiceImpl.searchCode(EntityLinkServiceImpl.java:67)
	at com.cs.api.controller.EntityLinkController.searchCode(EntityLinkController.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.net.UnknownHostException: elixir.bootlin.com
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:567)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at java.base/sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:304)
	at java.base/sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:181)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:264)
	at java.base/sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:377)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:193)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:179)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:141)
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	... 59 common frames omitted
2025-06-26 10:23:05 [http-nio-8080-exec-4] WARN  c.c.a.s.a.BootlinSearchService - Bootlin 搜索失败，实体: Read-Copy-Update, 状态码: null
2025-06-26 10:23:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RCU, version=v6.14
2025-06-26 10:23:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RCU?version=v6.14
2025-06-26 10:23:05 [http-nio-8080-exec-4] WARN  c.c.a.s.a.BootlinSearchService - Bootlin HTTP请求异常
org.springframework.web.client.ResourceAccessException: I/O error on GET request for "https://elixir.bootlin.com/api/ident/linux/RCU": elixir.bootlin.com
	at org.springframework.web.client.RestTemplate.createResourceAccessException(RestTemplate.java:915)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:895)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:672)
	at com.cs.api.service.analyzer.BootlinSearchService.executeSearchRequest(BootlinSearchService.java:173)
	at com.cs.api.service.analyzer.BootlinSearchService.search(BootlinSearchService.java:94)
	at com.cs.api.service.impl.EntityLinkServiceImpl.searchWithBootlin(EntityLinkServiceImpl.java:94)
	at com.cs.api.service.impl.EntityLinkServiceImpl.searchCode(EntityLinkServiceImpl.java:67)
	at com.cs.api.controller.EntityLinkController.searchCode(EntityLinkController.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.net.UnknownHostException: elixir.bootlin.com
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:567)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at java.base/sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:304)
	at java.base/sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:181)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:264)
	at java.base/sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:377)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:193)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:179)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:141)
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	... 59 common frames omitted
2025-06-26 10:23:05 [http-nio-8080-exec-4] WARN  c.c.a.s.a.BootlinSearchService - Bootlin 搜索失败，实体: RCU, 状态码: null
2025-06-26 10:23:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=read-copy-update, version=v6.14
2025-06-26 10:23:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/read-copy-update?version=v6.14
2025-06-26 10:23:05 [http-nio-8080-exec-4] WARN  c.c.a.s.a.BootlinSearchService - Bootlin HTTP请求异常
org.springframework.web.client.ResourceAccessException: I/O error on GET request for "https://elixir.bootlin.com/api/ident/linux/read-copy-update": elixir.bootlin.com
	at org.springframework.web.client.RestTemplate.createResourceAccessException(RestTemplate.java:915)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:895)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:672)
	at com.cs.api.service.analyzer.BootlinSearchService.executeSearchRequest(BootlinSearchService.java:173)
	at com.cs.api.service.analyzer.BootlinSearchService.search(BootlinSearchService.java:94)
	at com.cs.api.service.impl.EntityLinkServiceImpl.searchWithBootlin(EntityLinkServiceImpl.java:94)
	at com.cs.api.service.impl.EntityLinkServiceImpl.searchCode(EntityLinkServiceImpl.java:67)
	at com.cs.api.controller.EntityLinkController.searchCode(EntityLinkController.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.net.UnknownHostException: elixir.bootlin.com
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:567)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at java.base/sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:304)
	at java.base/sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:181)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:264)
	at java.base/sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:377)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:193)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:179)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:141)
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	... 59 common frames omitted
2025-06-26 10:23:05 [http-nio-8080-exec-4] WARN  c.c.a.s.a.BootlinSearchService - Bootlin 搜索失败，实体: read-copy-update, 状态码: null
2025-06-26 10:23:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=rcu_sync, version=v6.14
2025-06-26 10:23:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/rcu_sync?version=v6.14
2025-06-26 10:23:05 [http-nio-8080-exec-4] WARN  c.c.a.s.a.BootlinSearchService - Bootlin HTTP请求异常
org.springframework.web.client.ResourceAccessException: I/O error on GET request for "https://elixir.bootlin.com/api/ident/linux/rcu_sync": elixir.bootlin.com
	at org.springframework.web.client.RestTemplate.createResourceAccessException(RestTemplate.java:915)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:895)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:672)
	at com.cs.api.service.analyzer.BootlinSearchService.executeSearchRequest(BootlinSearchService.java:173)
	at com.cs.api.service.analyzer.BootlinSearchService.search(BootlinSearchService.java:94)
	at com.cs.api.service.impl.EntityLinkServiceImpl.searchWithBootlin(EntityLinkServiceImpl.java:94)
	at com.cs.api.service.impl.EntityLinkServiceImpl.searchCode(EntityLinkServiceImpl.java:67)
	at com.cs.api.controller.EntityLinkController.searchCode(EntityLinkController.java:63)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.net.UnknownHostException: elixir.bootlin.com
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:567)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at java.base/sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:304)
	at java.base/sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:181)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:264)
	at java.base/sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:377)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:193)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:179)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:141)
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	... 59 common frames omitted
2025-06-26 10:23:05 [http-nio-8080-exec-4] WARN  c.c.a.s.a.BootlinSearchService - Bootlin 搜索失败，实体: rcu_sync, 状态码: null
2025-06-26 10:23:05 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 10:23:05 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=rcu, context=什么是rcu？ # 什么是<concept>RCU</concept>（Read-Copy-Update）？

<concept>RCU</concept>是Linux内核中一种重要的同步机制，全称为Read-Cop, version=null
2025-06-26 10:25:38 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='linux内核至今做了多少将Page转换成folio的工作'}
2025-06-26 10:25:38 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=linux内核至今做了多少将Page转换成folio的工作
2025-06-26 10:25:38 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=linux内核至今做了多少将Page转换成folio的工作
2025-06-26 10:25:38 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='linux内核至今做了多少将Page转换成folio的工作', version='null'}
2025-06-26 10:25:38 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='linux内核至今做了多少将Page转换成folio的工作'}
2025-06-26 10:25:38 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=linux内核至今做了多少将Page转换成folio的工作, version=null
2025-06-26 10:25:38 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=linux内核至今做了多少将Page转换成folio的工作
2025-06-26 10:25:38 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=linux内核至今做了多少将Page转换成folio的工作
2025-06-26 10:25:38 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=linux内核至今做了多少将Page转换成folio的工作
2025-06-26 10:25:38 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1203
2025-06-26 10:25:38 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='linux内核至今做了多少将Page转换成folio的工作', version='null'}
2025-06-26 10:25:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=linux内核至今做了多少将Page转换成folio的工作, version=null
2025-06-26 10:25:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=linux内核至今做了多少将Page转换成folio的工作
2025-06-26 10:25:38 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1204
2025-06-26 10:25:38 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 10:25:38 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 10:25:38 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 10:25:38 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 10:25:38 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 10:25:38 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 10:25:39 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 10:25:39 [http-nio-8080-exec-1] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 10:25:39 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 10:25:39 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 10:25:42 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:25:42 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [Page, folio]
2025-06-26 10:25:42 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, folio]
2025-06-26 10:25:42 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 10:25:42 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 10:25:42 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:25:42 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [folio, folio_page, compound_page, page_folio, folio_struct]
2025-06-26 10:25:42 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, folio_page, compound_page, page_folio, folio_struct]
2025-06-26 10:25:42 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 10:25:42 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 10:25:44 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 10:25:44 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 10:25:44 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 10:25:44 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 10:25:44 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 10:25:44 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 10:25:44 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 10:25:44 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 10:25:44 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 10:25:46 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 10:25:46 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 10:25:46 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 10:25:46 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 10:25:46 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 10:25:46 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:25:46 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:25:46 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 10:25:46 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 10:25:46 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 10:25:46 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 10:25:46 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 10:25:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 10:25:47 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 10:25:47 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 10:25:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 10:25:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 10:25:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 10:25:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 10:25:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 10:25:47 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 10:25:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 10:25:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:25:47 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:25:47 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:25:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 10:25:47 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 10:25:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 10:25:48 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 10:25:48 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 10:25:48 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 10:25:48 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 10:25:48 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 10:25:48 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 10:25:48 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 10:25:48 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 10:25:48 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_struct, version=v6.14
2025-06-26 10:25:48 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_struct?version=v6.14
2025-06-26 10:25:48 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:25:48 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:25:48 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:25:48 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_struct, url=https://elixir.bootlin.com/api/ident/linux/folio_struct?version=v6.14, 提取到0个代码片段
2025-06-26 10:25:48 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 10:25:48 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 10:25:48 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 10:25:48 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 10:25:48 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 10:25:48 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 10:25:48 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 10:25:48 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:25:48 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:25:48 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 10:25:48 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 10:25:48 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 10:25:48 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增9个结果
2025-06-26 10:25:48 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到9个结果
2025-06-26 10:28:59 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='linux内核至今做了多少将Page转换成folio的工作'}
2025-06-26 10:28:59 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=linux内核至今做了多少将Page转换成folio的工作
2025-06-26 10:28:59 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=linux内核至今做了多少将Page转换成folio的工作
2025-06-26 10:28:59 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='linux内核至今做了多少将Page转换成folio的工作', version='null'}
2025-06-26 10:28:59 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='linux内核至今做了多少将Page转换成folio的工作'}
2025-06-26 10:28:59 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=linux内核至今做了多少将Page转换成folio的工作, version=null
2025-06-26 10:28:59 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=linux内核至今做了多少将Page转换成folio的工作
2025-06-26 10:28:59 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=linux内核至今做了多少将Page转换成folio的工作
2025-06-26 10:28:59 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=linux内核至今做了多少将Page转换成folio的工作
2025-06-26 10:28:59 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1203
2025-06-26 10:28:59 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='linux内核至今做了多少将Page转换成folio的工作', version='null'}
2025-06-26 10:28:59 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=linux内核至今做了多少将Page转换成folio的工作, version=null
2025-06-26 10:28:59 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=linux内核至今做了多少将Page转换成folio的工作
2025-06-26 10:28:59 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1204
2025-06-26 10:28:59 [http-nio-8080-exec-10] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 10:28:59 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 10:28:59 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 10:28:59 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 10:28:59 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 10:28:59 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 10:29:00 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 10:29:00 [http-nio-8080-exec-3] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 10:29:00 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 10:29:00 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 10:29:03 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:29:03 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [folio, folio_page, compound_page, page_folio, folio_struct]
2025-06-26 10:29:03 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, folio_page, compound_page, page_folio, folio_struct]
2025-06-26 10:29:03 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 10:29:03 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 10:29:03 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:29:03 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [Page, PFN]
2025-06-26 10:29:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, PFN]
2025-06-26 10:29:03 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 10:29:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 10:29:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 10:29:04 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 10:29:04 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 10:29:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 10:29:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 10:29:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 10:29:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 10:29:04 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=PFN, version=v6.14
2025-06-26 10:29:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14
2025-06-26 10:29:05 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 550
2025-06-26 10:29:05 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 550
2025-06-26 10:29:05 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=2, 引用=14
2025-06-26 10:29:05 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=236, version=v6.14
2025-06-26 10:29:05 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/kernel/phys2virt.S, line=32, version=v6.14
2025-06-26 10:29:05 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sparc/include/asm/leon.h, line=254, version=v6.14
2025-06-26 10:29:05 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第254行的代码元素
2025-06-26 10:29:05 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=PFN, url=https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14, 提取到2个代码片段
2025-06-26 10:29:05 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增5个结果
2025-06-26 10:29:05 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到5个结果
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 10:29:06 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 10:29:06 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 10:29:06 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 10:29:06 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 10:29:06 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 10:29:06 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 10:29:06 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 10:29:07 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:29:07 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:29:07 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:29:07 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 10:29:07 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 10:29:07 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 10:29:07 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 10:29:07 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 10:29:07 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 10:29:07 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 10:29:07 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 10:29:07 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 10:29:07 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 10:29:07 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 10:29:07 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_struct, version=v6.14
2025-06-26 10:29:07 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_struct?version=v6.14
2025-06-26 10:29:08 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:29:08 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:29:08 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:29:08 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_struct, url=https://elixir.bootlin.com/api/ident/linux/folio_struct?version=v6.14, 提取到0个代码片段
2025-06-26 10:29:08 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 10:29:08 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 10:29:46 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 10:29:46 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 10:29:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 10:29:46 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 10:29:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 10:29:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 10:29:46 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 10:29:46 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 10:29:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 10:29:46 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 10:29:51 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:29:51 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, folio_struct]
2025-06-26 10:29:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 10:29:51 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 10:29:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 10:30:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 10:30:08 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 10:30:08 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 10:30:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 10:30:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 10:30:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:30:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:30:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 10:30:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 10:30:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 10:30:08 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 10:30:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 10:30:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 10:30:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 10:30:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 10:30:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 10:30:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 10:30:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 10:30:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 10:30:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 10:30:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 10:30:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 10:30:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:30:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:30:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:30:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 10:30:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 10:30:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 10:30:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:30:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:30:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:30:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 10:30:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 10:30:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 10:30:11 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 10:30:11 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 10:30:11 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 10:30:11 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 10:30:11 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 10:30:11 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 10:30:11 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 10:30:11 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 10:30:11 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 10:30:11 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 10:30:36 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 10:30:36 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 10:30:36 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 10:30:36 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 10:30:36 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 10:30:36 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 10:30:36 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 10:30:36 [http-nio-8080-exec-3] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 10:30:36 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 10:30:36 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 10:30:40 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:30:40 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, folio_struct]
2025-06-26 10:30:40 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 10:30:40 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 10:30:40 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 10:30:42 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 10:30:42 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 10:30:42 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 10:30:42 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 10:30:42 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 10:30:42 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:30:42 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:30:42 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 10:30:42 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 10:30:42 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 10:30:42 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 10:30:42 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 10:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 10:30:43 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 10:30:43 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 10:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 10:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 10:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 10:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 10:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 10:30:43 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 10:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 10:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:30:43 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:30:43 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 10:30:43 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 10:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 10:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:30:43 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:30:43 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 10:30:43 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 10:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 10:30:44 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 10:30:44 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 10:30:44 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 10:30:44 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 10:30:44 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 10:30:44 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 10:30:44 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 10:30:44 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 10:30:44 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 10:30:44 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 10:32:02 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于', version='null'}
2025-06-26 10:32:02 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于'}
2025-06-26 10:32:02 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于, version=null
2025-06-26 10:32:02 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于
2025-06-26 10:32:02 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于
2025-06-26 10:32:02 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于
2025-06-26 10:32:02 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 10:32:02 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 10:32:02 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 10:32:02 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 10:32:07 [http-nio-8080-exec-6] ERROR com.cs.api.common.ai.AIService - Error calling AI model DEEPSEEK: Failed to resolve 'api.deepseek.com' [A(1)]
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'api.deepseek.com' [A(1)]
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:136)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to POST https://api.deepseek.com/v1/chat/completions [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:136)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4568)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1743)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:311)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:172)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:492)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:436)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:583)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4568)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:576)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:375)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:110)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1159)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1098)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:457)
		at io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:69)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:526)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.finishFailure(DnsQueryContext.java:380)
		at io.netty.resolver.dns.DnsQueryContext$5.run(DnsQueryContext.java:315)
		at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
		at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:153)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:469)
		at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:408)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
	Suppressed: java.lang.Exception: #block terminated with an error
		at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:104)
		at reactor.core.publisher.Mono.block(Mono.java:1779)
		at com.cs.api.common.ai.AIService.callAI(AIService.java:131)
		at com.cs.api.common.ai.AIService.deepseek(AIService.java:64)
		at com.cs.api.service.impl.EntityLinkServiceImpl.extractSearchEntities(EntityLinkServiceImpl.java:122)
		at com.cs.api.service.impl.EntityLinkServiceImpl.searchWithBootlin(EntityLinkServiceImpl.java:88)
		at com.cs.api.service.impl.EntityLinkServiceImpl.searchCode(EntityLinkServiceImpl.java:67)
		at com.cs.api.controller.EntityLinkController.searchCode(EntityLinkController.java:63)
		at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
		at java.base/java.lang.reflect.Method.invoke(Method.java:580)
		at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
		at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
		at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
		at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
		at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
		at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
		at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
		at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
		at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
		at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
		at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
		at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
		at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
		at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
		at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
		at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
		at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
		at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
		at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
		at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
		at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
		at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
		at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
		at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
		at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
		at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
		at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
		at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.net.UnknownHostException: Failed to resolve 'api.deepseek.com' [A(1)]
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1151)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1098)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:457)
	at io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:69)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:526)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.finishFailure(DnsQueryContext.java:380)
	at io.netty.resolver.dns.DnsQueryContext$5.run(DnsQueryContext.java:315)
	at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
	at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:153)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:469)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:408)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: io.netty.resolver.dns.DnsNameResolverTimeoutException: [6325: /8.8.8.8:53] DefaultDnsQuestion(api.deepseek.com. IN A) query '6325' via UDP timed out after 5000 milliseconds (no stack trace available)
2025-06-26 10:32:07 [http-nio-8080-exec-6] WARN  c.c.a.s.impl.EntityLinkServiceImpl - AI模型调用失败，使用后备策略: AI模型调用失败: Failed to resolve 'api.deepseek.com' [A(1)]
2025-06-26 10:32:07 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page]
2025-06-26 10:32:07 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 10:32:07 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 10:32:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - Wikipedia API调用失败
javax.net.ssl.SSLHandshakeException: Remote host terminated the handshake
	at java.net.http/jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:956)
	at java.net.http/jdk.internal.net.http.HttpClientFacade.send(HttpClientFacade.java:133)
	at com.cs.api.service.analyzer.ConceptKnowledgeAnalyzer.fetchFromWikipediaAPI(ConceptKnowledgeAnalyzer.java:272)
	at com.cs.api.service.analyzer.ConceptKnowledgeAnalyzer.fetchDescriptionFromUrl(ConceptKnowledgeAnalyzer.java:205)
	at com.cs.api.service.analyzer.ConceptKnowledgeAnalyzer.buildExplanationResult(ConceptKnowledgeAnalyzer.java:179)
	at com.cs.api.service.analyzer.ConceptKnowledgeAnalyzer.getConceptExplanation(ConceptKnowledgeAnalyzer.java:116)
	at com.cs.api.service.impl.EntityLinkServiceImpl.getConceptExplanation(EntityLinkServiceImpl.java:312)
	at com.cs.api.controller.EntityLinkController.getConceptExplanation(EntityLinkController.java:105)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: javax.net.ssl.SSLHandshakeException: Remote host terminated the handshake
	at java.net.http/jdk.internal.net.http.common.SSLTube.checkForHandshake(SSLTube.java:595)
	at java.net.http/jdk.internal.net.http.common.SSLTube$SSLTubeFlowDelegate.checkForHandshake(SSLTube.java:156)
	at java.net.http/jdk.internal.net.http.common.SSLFlowDelegate$Reader.errorCommon(SSLFlowDelegate.java:369)
	at java.net.http/jdk.internal.net.http.common.SubscriberWrapper.onError(SubscriberWrapper.java:412)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadSubscription.signalCompletion(SocketTube.java:645)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.read(SocketTube.java:829)
	at java.net.http/jdk.internal.net.http.SocketTube$SocketFlowTask.run(SocketTube.java:181)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:207)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:280)
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:233)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.signalReadable(SocketTube.java:782)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$ReadEvent.signalEvent(SocketTube.java:965)
	at java.net.http/jdk.internal.net.http.SocketTube$SocketFlowEvent.handle(SocketTube.java:253)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.handleEvent(HttpClientImpl.java:1467)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.lambda$run$3(HttpClientImpl.java:1412)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.run(HttpClientImpl.java:1412)
Caused by: java.net.SocketException: Connection reset
	at java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:401)
	at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:434)
	at java.net.http/jdk.internal.net.http.SocketTube.readAvailable(SocketTube.java:1178)
	at java.net.http/jdk.internal.net.http.SocketTube$InternalReadPublisher$InternalReadSubscription.read(SocketTube.java:841)
	... 11 common frames omitted
2025-06-26 10:32:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=37
2025-06-26 10:32:07 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 10:32:11 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 10:32:11 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 10:32:11 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 10:32:11 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 10:32:11 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 10:32:11 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 10:32:11 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 10:32:11 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-26 10:32:11 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-26 10:32:26 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于'}
2025-06-26 10:32:26 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于
2025-06-26 10:32:26 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于
2025-06-26 10:32:26 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于', version='null'}
2025-06-26 10:32:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于, version=null
2025-06-26 10:32:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于
2025-06-26 10:32:26 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 10:32:26 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 10:32:26 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 10:32:26 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 10:32:27 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 10:32:27 [http-nio-8080-exec-8] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 10:32:27 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 10:32:27 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 10:32:31 [http-nio-8080-exec-2] ERROR com.cs.api.common.ai.AIService - Error calling AI model DEEPSEEK: Failed to resolve 'api.deepseek.com' [A(1)]
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'api.deepseek.com' [A(1)]
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:136)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to POST https://api.deepseek.com/v1/chat/completions [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:136)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4568)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1743)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:311)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:172)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:492)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:436)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:583)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4568)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:576)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:375)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:110)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1159)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1098)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:457)
		at io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:69)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:526)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.finishFailure(DnsQueryContext.java:380)
		at io.netty.resolver.dns.DnsQueryContext$5.run(DnsQueryContext.java:315)
		at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
		at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:153)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:469)
		at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:408)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
	Suppressed: java.lang.Exception: #block terminated with an error
		at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:104)
		at reactor.core.publisher.Mono.block(Mono.java:1779)
		at com.cs.api.common.ai.AIService.callAI(AIService.java:131)
		at com.cs.api.common.ai.AIService.deepseek(AIService.java:64)
		at com.cs.api.service.impl.EntityLinkServiceImpl.extractSearchEntities(EntityLinkServiceImpl.java:122)
		at com.cs.api.service.impl.EntityLinkServiceImpl.searchWithBootlin(EntityLinkServiceImpl.java:88)
		at com.cs.api.service.impl.EntityLinkServiceImpl.searchCode(EntityLinkServiceImpl.java:67)
		at com.cs.api.controller.EntityLinkController.searchCode(EntityLinkController.java:63)
		at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
		at java.base/java.lang.reflect.Method.invoke(Method.java:580)
		at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
		at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
		at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
		at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
		at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
		at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
		at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
		at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
		at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
		at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
		at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
		at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
		at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
		at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
		at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
		at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
		at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
		at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
		at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
		at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
		at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
		at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
		at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
		at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
		at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
		at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
		at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
		at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.net.UnknownHostException: Failed to resolve 'api.deepseek.com' [A(1)]
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1151)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1098)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:457)
	at io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:69)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:526)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.finishFailure(DnsQueryContext.java:380)
	at io.netty.resolver.dns.DnsQueryContext$5.run(DnsQueryContext.java:315)
	at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
	at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:153)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:469)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:408)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: io.netty.resolver.dns.DnsNameResolverTimeoutException: [14823: /8.8.8.8:53] DefaultDnsQuestion(api.deepseek.com. IN A) query '14823' via UDP timed out after 5000 milliseconds (no stack trace available)
2025-06-26 10:32:31 [http-nio-8080-exec-2] WARN  c.c.a.s.impl.EntityLinkServiceImpl - AI模型调用失败，使用后备策略: AI模型调用失败: Failed to resolve 'api.deepseek.com' [A(1)]
2025-06-26 10:32:31 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page]
2025-06-26 10:32:31 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 10:32:31 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 10:32:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 10:32:37 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 10:32:37 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 10:32:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 10:32:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 10:32:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 10:32:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 10:32:37 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-26 10:32:37 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-26 10:35:05 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context='# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于', version='null'}
2025-06-26 10:35:05 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于, version=null
2025-06-26 10:35:05 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于
2025-06-26 10:35:05 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1275
2025-06-26 10:35:09 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context='# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于'}
2025-06-26 10:35:09 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于
2025-06-26 10:35:09 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新数据结构，用于
2025-06-26 10:35:09 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-26 10:35:09 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-26 10:35:09 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-26 10:35:10 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:35:10 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [Folio, folio_struct, page_folio, memory_folio, mm_folio, folio_page]
2025-06-26 10:35:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio, folio_struct, page_folio, memory_folio, mm_folio]
2025-06-26 10:35:10 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-26 10:35:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-26 10:35:13 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:35:13 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:35:13 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:35:13 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-26 10:35:13 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_struct, version=v6.14
2025-06-26 10:35:13 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_struct?version=v6.14
2025-06-26 10:35:13 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:35:13 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:35:13 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:35:13 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_struct, url=https://elixir.bootlin.com/api/ident/linux/folio_struct?version=v6.14, 提取到0个代码片段
2025-06-26 10:35:13 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 10:35:13 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 10:35:14 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 10:35:14 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 10:35:14 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 10:35:14 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 10:35:14 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 10:35:14 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 10:35:14 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 10:35:14 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 10:35:14 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-26 10:35:14 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-26 10:35:15 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:35:15 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:35:15 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:35:15 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-26 10:35:15 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=mm_folio, version=v6.14
2025-06-26 10:35:15 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/mm_folio?version=v6.14
2025-06-26 10:35:15 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:35:15 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:35:15 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:35:15 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=mm_folio, url=https://elixir.bootlin.com/api/ident/linux/mm_folio?version=v6.14, 提取到0个代码片段
2025-06-26 10:35:15 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增4个结果
2025-06-26 10:35:15 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到4个结果
2025-06-26 10:35:58 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='folio和page的关系是什么'}
2025-06-26 10:35:58 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=folio和page的关系是什么
2025-06-26 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=folio和page的关系是什么
2025-06-26 10:35:58 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='folio和page的关系是什么'}
2025-06-26 10:35:58 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='folio和page的关系是什么', version='null'}
2025-06-26 10:35:58 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=folio和page的关系是什么
2025-06-26 10:35:58 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=folio和page的关系是什么, version=null
2025-06-26 10:35:58 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=folio和page的关系是什么
2025-06-26 10:35:58 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=folio和page的关系是什么
2025-06-26 10:35:58 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1191
2025-06-26 10:35:58 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 10:35:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 10:35:58 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 10:35:58 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 10:35:58 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 10:35:58 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 10:35:58 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='folio和page的关系是什么', version='null'}
2025-06-26 10:35:58 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=folio和page的关系是什么, version=null
2025-06-26 10:35:58 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=folio和page的关系是什么
2025-06-26 10:35:58 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1190
2025-06-26 10:35:59 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 10:35:59 [http-nio-8080-exec-10] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 10:35:59 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 10:35:59 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 10:36:02 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:36:02 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio]
2025-06-26 10:36:02 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio]
2025-06-26 10:36:02 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 10:36:02 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 10:36:02 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:36:02 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [page, vm_page]
2025-06-26 10:36:02 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page, vm_page]
2025-06-26 10:36:02 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 10:36:02 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 10:36:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 10:36:06 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 10:36:06 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 10:36:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 10:36:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 10:36:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:36:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 10:36:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 10:36:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 10:36:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 10:36:06 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增6个结果
2025-06-26 10:36:06 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到6个结果
2025-06-26 10:36:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 10:36:08 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 10:36:08 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 10:36:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 10:36:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 10:36:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 10:36:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 10:36:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 10:36:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 10:36:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 10:36:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 10:36:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 10:36:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 10:36:08 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-26 10:36:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-26 10:36:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:36:08 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:36:08 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:36:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-26 10:36:08 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-26 10:36:08 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-26 10:37:07 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='# <concept>Folio</concept>与<concept>Page</concept>的关系分析

## 1. 基本概念

<concept>Page</concept>是Linux内核', version='null'}
2025-06-26 10:37:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=# <concept>Folio</concept>与<concept>Page</concept>的关系分析

## 1. 基本概念

<concept>Page</concept>是Linux内核, version=null
2025-06-26 10:37:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=# <concept>Folio</concept>与<concept>Page</concept>的关系分析

## 1. 基本概念

<concept>Page</concept>是Linux内核
2025-06-26 10:37:07 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 10:37:07 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='# <concept>Folio</concept>与<concept>Page</concept>的关系分析

## 1. 基本概念

<concept>Page</concept>是Linux内核'}
2025-06-26 10:37:07 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=# <concept>Folio</concept>与<concept>Page</concept>的关系分析

## 1. 基本概念

<concept>Page</concept>是Linux内核
2025-06-26 10:37:07 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=# <concept>Folio</concept>与<concept>Page</concept>的关系分析

## 1. 基本概念

<concept>Page</concept>是Linux内核
2025-06-26 10:37:07 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 10:37:07 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 10:37:07 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 10:37:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 10:37:08 [http-nio-8080-exec-7] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 10:37:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 10:37:08 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 10:37:12 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:37:12 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [Page, PFN]
2025-06-26 10:37:12 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, PFN]
2025-06-26 10:37:12 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 10:37:12 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 10:37:13 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 10:37:13 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 10:37:13 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 10:37:13 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 10:37:13 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 10:37:13 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 10:37:13 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 10:37:13 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=PFN, version=v6.14
2025-06-26 10:37:13 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14
2025-06-26 10:37:13 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 550
2025-06-26 10:37:13 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 550
2025-06-26 10:37:13 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=2, 引用=14
2025-06-26 10:37:13 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=236, version=v6.14
2025-06-26 10:37:13 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/kernel/phys2virt.S, line=32, version=v6.14
2025-06-26 10:37:13 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sparc/include/asm/leon.h, line=254, version=v6.14
2025-06-26 10:37:13 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第254行的代码元素
2025-06-26 10:37:13 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=PFN, url=https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14, 提取到2个代码片段
2025-06-26 10:37:13 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增5个结果
2025-06-26 10:37:13 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到5个结果
2025-06-26 10:38:25 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context='# <concept>Folio</concept>与<concept>Page</concept>的关系分析

## 1. 基本概念

<concept>Page</concept>是Linux内核', version='null'}
2025-06-26 10:38:25 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context='# <concept>Folio</concept>与<concept>Page</concept>的关系分析

## 1. 基本概念

<concept>Page</concept>是Linux内核'}
2025-06-26 10:38:25 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context=# <concept>Folio</concept>与<concept>Page</concept>的关系分析

## 1. 基本概念

<concept>Page</concept>是Linux内核, version=null
2025-06-26 10:38:25 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context=# <concept>Folio</concept>与<concept>Page</concept>的关系分析

## 1. 基本概念

<concept>Page</concept>是Linux内核
2025-06-26 10:38:25 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context=# <concept>Folio</concept>与<concept>Page</concept>的关系分析

## 1. 基本概念

<concept>Page</concept>是Linux内核
2025-06-26 10:38:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint=# <concept>Folio</concept>与<concept>Page</concept>的关系分析

## 1. 基本概念

<concept>Page</concept>是Linux内核
2025-06-26 10:38:25 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1275
2025-06-26 10:38:25 [http-nio-8080-exec-10] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-26 10:38:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-26 10:38:25 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-26 10:38:30 [http-nio-8080-exec-8] ERROR com.cs.api.common.ai.AIService - Error calling AI model DEEPSEEK: Failed to resolve 'api.deepseek.com' [A(1)]
org.springframework.web.reactive.function.client.WebClientRequestException: Failed to resolve 'api.deepseek.com' [A(1)]
	at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:136)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Request to POST https://api.deepseek.com/v1/chat/completions [DefaultWebClient]
Original Stack Trace:
		at org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$wrapException$9(ExchangeFunctions.java:136)
		at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4568)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:222)
		at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:205)
		at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:229)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:279)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onError(FluxContextWrite.java:121)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.maybeOnError(FluxConcatMapNoPrefetch.java:327)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:212)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SinkManyEmitterProcessor.drain(SinkManyEmitterProcessor.java:476)
		at reactor.core.publisher.SinkManyEmitterProcessor$EmitterInner.drainParent(SinkManyEmitterProcessor.java:620)
		at reactor.core.publisher.FluxPublish$PubSubInner.request(FluxPublish.java:874)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:337)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$DeferredSubscription.request(Operators.java:1743)
		at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:196)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:311)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:172)
		at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:492)
		at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:436)
		at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
		at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:205)
		at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:583)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:241)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:315)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4568)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:576)
		at reactor.netty.transport.TransportConnector.lambda$doResolveAndConnect$11(TransportConnector.java:375)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:557)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
		at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:110)
		at io.netty.resolver.InetSocketAddressResolver$2.operationComplete(InetSocketAddressResolver.java:86)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1159)
		at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1098)
		at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:457)
		at io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:69)
		at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:526)
		at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
		at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
		at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
		at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
		at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
		at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
		at io.netty.resolver.dns.DnsQueryContext.finishFailure(DnsQueryContext.java:380)
		at io.netty.resolver.dns.DnsQueryContext$5.run(DnsQueryContext.java:315)
		at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
		at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:153)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:469)
		at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:408)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
	Suppressed: java.lang.Exception: #block terminated with an error
		at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:104)
		at reactor.core.publisher.Mono.block(Mono.java:1779)
		at com.cs.api.common.ai.AIService.callAI(AIService.java:131)
		at com.cs.api.common.ai.AIService.deepseek(AIService.java:64)
		at com.cs.api.service.impl.EntityLinkServiceImpl.extractSearchEntities(EntityLinkServiceImpl.java:122)
		at com.cs.api.service.impl.EntityLinkServiceImpl.searchWithBootlin(EntityLinkServiceImpl.java:88)
		at com.cs.api.service.impl.EntityLinkServiceImpl.searchCode(EntityLinkServiceImpl.java:67)
		at com.cs.api.controller.EntityLinkController.searchCode(EntityLinkController.java:63)
		at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
		at java.base/java.lang.reflect.Method.invoke(Method.java:580)
		at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
		at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
		at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
		at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
		at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
		at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
		at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
		at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
		at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
		at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
		at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
		at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
		at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
		at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
		at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
		at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
		at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
		at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
		at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
		at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
		at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
		at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
		at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
		at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
		at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
		at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
		at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
		at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
		at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.net.UnknownHostException: Failed to resolve 'api.deepseek.com' [A(1)]
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1151)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1098)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:457)
	at io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:69)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:526)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:590)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:583)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:559)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:492)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:636)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:629)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:118)
	at io.netty.resolver.dns.DnsQueryContext.finishFailure(DnsQueryContext.java:380)
	at io.netty.resolver.dns.DnsQueryContext$5.run(DnsQueryContext.java:315)
	at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
	at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:153)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:469)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:408)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: io.netty.resolver.dns.DnsNameResolverTimeoutException: [12551: /8.8.8.8:53] DefaultDnsQuestion(api.deepseek.com. IN A) query '12551' via UDP timed out after 5000 milliseconds (no stack trace available)
2025-06-26 10:38:30 [http-nio-8080-exec-8] WARN  c.c.a.s.impl.EntityLinkServiceImpl - AI模型调用失败，使用后备策略: AI模型调用失败: Failed to resolve 'api.deepseek.com' [A(1)]
2025-06-26 10:38:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio]
2025-06-26 10:38:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-26 10:38:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-26 10:38:35 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:38:35 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:38:35 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:38:35 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-26 10:38:35 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 10:38:35 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=Folio, context=# <concept>Folio</concept>与<concept>Page</concept>的关系分析

## 1. 基本概念

<concept>Page</concept>是Linux内核, version=null
2025-06-26 10:42:40 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='CFS', context='什么是CFS'}
2025-06-26 10:42:40 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=CFS, context=什么是CFS
2025-06-26 10:42:40 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=CFS, contextHint=什么是CFS
2025-06-26 10:42:40 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='CFS', context='什么是CFS', version='null'}
2025-06-26 10:42:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=CFS, context=什么是CFS, version=null
2025-06-26 10:42:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=CFS, context=什么是CFS
2025-06-26 10:42:40 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1179
2025-06-26 10:42:40 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: CFS
2025-06-26 10:42:40 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=CFS, explanationLength=48
2025-06-26 10:42:40 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=CFS
2025-06-26 10:42:45 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:42:45 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [CFS]
2025-06-26 10:42:45 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [CFS]
2025-06-26 10:42:45 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=CFS, version=v6.14
2025-06-26 10:42:45 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/CFS?version=v6.14
2025-06-26 10:42:46 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:42:46 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:42:46 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:42:46 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=CFS, url=https://elixir.bootlin.com/api/ident/linux/CFS?version=v6.14, 提取到0个代码片段
2025-06-26 10:42:46 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 10:42:46 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=CFS, context=什么是CFS, version=null
2025-06-26 10:46:17 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='RISC-V', context='risc-v在linux内核中的应用'}
2025-06-26 10:46:17 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=RISC-V, context=risc-v在linux内核中的应用
2025-06-26 10:46:17 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=RISC-V, contextHint=risc-v在linux内核中的应用
2025-06-26 10:46:17 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='RISC-V', context='risc-v在linux内核中的应用', version='null'}
2025-06-26 10:46:17 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=RISC-V, context=risc-v在linux内核中的应用, version=null
2025-06-26 10:46:17 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=RISC-V, context=risc-v在linux内核中的应用
2025-06-26 10:46:17 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1194
2025-06-26 10:46:17 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=RISC-V, explanationLength=1526
2025-06-26 10:46:17 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=RISC-V
2025-06-26 10:46:22 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:46:22 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了3个搜索实体: [RISC-V, RV, RV64]
2025-06-26 10:46:22 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [RISC-V, RV, RV64]
2025-06-26 10:46:22 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RISC-V, version=v6.14
2025-06-26 10:46:22 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RISC-V?version=v6.14
2025-06-26 10:46:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:46:23 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:46:23 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:46:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RISC-V, url=https://elixir.bootlin.com/api/ident/linux/RISC-V?version=v6.14, 提取到0个代码片段
2025-06-26 10:46:23 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RV, version=v6.14
2025-06-26 10:46:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RV?version=v6.14
2025-06-26 10:46:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 1946
2025-06-26 10:46:23 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 1946
2025-06-26 10:46:23 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=4, 引用=299
2025-06-26 10:46:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=drivers/ata/ata_piix.c, line=346, version=v6.14
2025-06-26 10:46:24 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=drivers/ata/ata_piix.c, line=346, version=v6.14
2025-06-26 10:46:24 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=drivers/ata/ata_piix.c, line=346, version=v6.14
2025-06-26 10:46:24 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RV, url=https://elixir.bootlin.com/api/ident/linux/RV?version=v6.14, 提取到3个代码片段
2025-06-26 10:46:24 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RV64, version=v6.14
2025-06-26 10:46:24 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RV64?version=v6.14
2025-06-26 10:46:24 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:46:24 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:46:24 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:46:24 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RV64, url=https://elixir.bootlin.com/api/ident/linux/RV64?version=v6.14, 提取到0个代码片段
2025-06-26 10:46:24 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-26 10:46:24 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-26 10:50:09 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='RISC', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集', version='null'}
2025-06-26 10:50:09 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='RISC', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集'}
2025-06-26 10:50:09 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集, version=null
2025-06-26 10:50:09 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:50:09 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:50:09 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=RISC, contextHint=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:50:09 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 10:50:09 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/PA-RISC
2025-06-26 10:50:09 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/PA-RISC
2025-06-26 10:50:09 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/PA-RISC
2025-06-26 10:50:10 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 206
2025-06-26 10:50:10 [http-nio-8080-exec-1] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 206, 内容: Precision Architecture RISC (PA-RISC) or Hewlett Packard Precision Architecture, is a general purpose computer instruction set architecture (ISA) deve...
2025-06-26 10:50:10 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=RISC, explanationLength=206
2025-06-26 10:50:10 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=RISC
2025-06-26 10:50:14 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:50:14 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [RISC, RISC]
2025-06-26 10:50:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [RISC]
2025-06-26 10:50:14 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RISC, version=v6.14
2025-06-26 10:50:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RISC?version=v6.14
2025-06-26 10:50:15 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:50:15 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:50:15 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:50:15 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RISC, url=https://elixir.bootlin.com/api/ident/linux/RISC?version=v6.14, 提取到0个代码片段
2025-06-26 10:50:15 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 10:50:15 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集, version=null
2025-06-26 10:50:42 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='RISC', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集', version='null'}
2025-06-26 10:50:42 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='RISC', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集'}
2025-06-26 10:50:42 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集, version=null
2025-06-26 10:50:42 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:50:42 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:50:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=RISC, contextHint=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:50:42 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 10:50:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/PA-RISC
2025-06-26 10:50:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/PA-RISC
2025-06-26 10:50:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/PA-RISC
2025-06-26 10:50:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 206
2025-06-26 10:50:42 [http-nio-8080-exec-4] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 206, 内容: Precision Architecture RISC (PA-RISC) or Hewlett Packard Precision Architecture, is a general purpose computer instruction set architecture (ISA) deve...
2025-06-26 10:50:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=RISC, explanationLength=206
2025-06-26 10:50:42 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=RISC
2025-06-26 10:50:46 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:50:46 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [RISC]
2025-06-26 10:50:46 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [RISC]
2025-06-26 10:50:46 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RISC, version=v6.14
2025-06-26 10:50:46 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RISC?version=v6.14
2025-06-26 10:50:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:50:47 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:50:47 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:50:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RISC, url=https://elixir.bootlin.com/api/ident/linux/RISC?version=v6.14, 提取到0个代码片段
2025-06-26 10:50:47 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 10:50:47 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集, version=null
2025-06-26 10:52:29 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='ISA', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集', version='null'}
2025-06-26 10:52:29 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='ISA', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集'}
2025-06-26 10:52:29 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=ISA, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:52:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=ISA, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集, version=null
2025-06-26 10:52:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=ISA, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:52:29 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=ISA, contextHint=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:52:29 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1273
2025-06-26 10:52:29 [http-nio-8080-exec-10] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: ISA
2025-06-26 10:52:29 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=ISA, explanationLength=48
2025-06-26 10:52:29 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=ISA
2025-06-26 10:52:34 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:52:34 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [ISA]
2025-06-26 10:52:34 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [ISA]
2025-06-26 10:52:34 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=ISA, version=v6.14
2025-06-26 10:52:34 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/ISA?version=v6.14
2025-06-26 10:52:35 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 428
2025-06-26 10:52:35 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 428
2025-06-26 10:52:35 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=5
2025-06-26 10:52:35 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/entry-arcv2.h, line=168, version=v6.14
2025-06-26 10:52:35 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/kernel/entry-arcv2.S, line=172, version=v6.14
2025-06-26 10:52:35 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/mips/pci/fixup-fuloong2e.c, line=131, version=v6.14
2025-06-26 10:52:35 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=ISA, url=https://elixir.bootlin.com/api/ident/linux/ISA?version=v6.14, 提取到3个代码片段
2025-06-26 10:52:35 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-26 10:52:35 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-26 10:52:55 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='RISC', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集'}
2025-06-26 10:52:55 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='RISC', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集', version='null'}
2025-06-26 10:52:55 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:52:55 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=RISC, contextHint=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:52:55 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集, version=null
2025-06-26 10:52:55 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:52:55 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 10:52:55 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/PA-RISC
2025-06-26 10:52:55 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/PA-RISC
2025-06-26 10:52:55 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/PA-RISC
2025-06-26 10:52:56 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 206
2025-06-26 10:52:56 [http-nio-8080-exec-7] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 206, 内容: Precision Architecture RISC (PA-RISC) or Hewlett Packard Precision Architecture, is a general purpose computer instruction set architecture (ISA) deve...
2025-06-26 10:52:56 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=RISC, explanationLength=206
2025-06-26 10:52:56 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=RISC
2025-06-26 10:53:01 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:53:01 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [RISC, RISC]
2025-06-26 10:53:01 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [RISC]
2025-06-26 10:53:01 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RISC, version=v6.14
2025-06-26 10:53:01 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RISC?version=v6.14
2025-06-26 10:53:03 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:53:03 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:53:03 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:53:03 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RISC, url=https://elixir.bootlin.com/api/ident/linux/RISC?version=v6.14, 提取到0个代码片段
2025-06-26 10:53:03 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 10:53:03 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集, version=null
2025-06-26 10:53:59 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='RISC', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集', version='null'}
2025-06-26 10:53:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集, version=null
2025-06-26 10:53:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:53:59 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 10:54:03 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='RISC', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集'}
2025-06-26 10:54:03 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:54:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=RISC, contextHint=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:54:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/PA-RISC
2025-06-26 10:54:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/PA-RISC
2025-06-26 10:54:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/PA-RISC
2025-06-26 10:54:03 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:54:03 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [RISC, RISC]
2025-06-26 10:54:03 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [RISC]
2025-06-26 10:54:03 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RISC, version=v6.14
2025-06-26 10:54:03 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RISC?version=v6.14
2025-06-26 10:54:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 206
2025-06-26 10:54:04 [http-nio-8080-exec-2] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 206, 内容: Precision Architecture RISC (PA-RISC) or Hewlett Packard Precision Architecture, is a general purpose computer instruction set architecture (ISA) deve...
2025-06-26 10:54:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=RISC, explanationLength=206
2025-06-26 10:54:04 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=RISC
2025-06-26 10:54:04 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:54:04 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:54:04 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:54:04 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RISC, url=https://elixir.bootlin.com/api/ident/linux/RISC?version=v6.14, 提取到0个代码片段
2025-06-26 10:54:04 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 10:54:04 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集, version=null
2025-06-26 10:56:19 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='RISC', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集'}
2025-06-26 10:56:19 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='RISC', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集', version='null'}
2025-06-26 10:56:19 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:56:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集, version=null
2025-06-26 10:56:19 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=RISC, contextHint=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:56:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:56:19 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 10:56:19 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/PA-RISC
2025-06-26 10:56:19 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/PA-RISC
2025-06-26 10:56:19 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/PA-RISC
2025-06-26 10:56:20 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 206
2025-06-26 10:56:20 [http-nio-8080-exec-9] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 206, 内容: Precision Architecture RISC (PA-RISC) or Hewlett Packard Precision Architecture, is a general purpose computer instruction set architecture (ISA) deve...
2025-06-26 10:56:20 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=RISC, explanationLength=206
2025-06-26 10:56:20 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=RISC
2025-06-26 10:56:24 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:56:24 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [RISC, RISC]
2025-06-26 10:56:24 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [RISC]
2025-06-26 10:56:24 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RISC, version=v6.14
2025-06-26 10:56:24 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RISC?version=v6.14
2025-06-26 10:56:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:56:25 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:56:25 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:56:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RISC, url=https://elixir.bootlin.com/api/ident/linux/RISC?version=v6.14, 提取到0个代码片段
2025-06-26 10:56:25 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 10:56:25 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=RISC, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集, version=null
2025-06-26 10:56:53 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='ISA', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集', version='null'}
2025-06-26 10:56:53 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='ISA', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集'}
2025-06-26 10:56:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=ISA, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集, version=null
2025-06-26 10:56:53 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=ISA, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:56:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=ISA, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:56:53 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=ISA, contextHint=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:56:53 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1273
2025-06-26 10:56:54 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: ISA
2025-06-26 10:56:54 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=ISA, explanationLength=48
2025-06-26 10:56:54 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=ISA
2025-06-26 10:56:58 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:56:58 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [ISA]
2025-06-26 10:56:58 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [ISA]
2025-06-26 10:56:58 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=ISA, version=v6.14
2025-06-26 10:56:58 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/ISA?version=v6.14
2025-06-26 10:57:01 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 428
2025-06-26 10:57:01 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 428
2025-06-26 10:57:01 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=5
2025-06-26 10:57:01 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/entry-arcv2.h, line=168, version=v6.14
2025-06-26 10:57:01 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/kernel/entry-arcv2.S, line=172, version=v6.14
2025-06-26 10:57:01 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/mips/pci/fixup-fuloong2e.c, line=131, version=v6.14
2025-06-26 10:57:01 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=ISA, url=https://elixir.bootlin.com/api/ident/linux/ISA?version=v6.14, 提取到3个代码片段
2025-06-26 10:57:01 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-26 10:57:01 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-26 10:57:27 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='ISA', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集'}
2025-06-26 10:57:27 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='ISA', context='# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集', version='null'}
2025-06-26 10:57:27 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=ISA, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:57:27 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=ISA, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集, version=null
2025-06-26 10:57:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=ISA, contextHint=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:57:27 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=ISA, context=# RISC-V在Linux内核中的应用

## 概述

<concept>RISC-V</concept>是一种基于精简指令集计算机(<concept>RISC</concept>)原则的开源指令集
2025-06-26 10:57:27 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1273
2025-06-26 10:57:27 [http-nio-8080-exec-10] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: ISA
2025-06-26 10:57:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=ISA, explanationLength=48
2025-06-26 10:57:27 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=ISA
2025-06-26 10:57:31 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:57:31 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [ISA]
2025-06-26 10:57:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [ISA]
2025-06-26 10:57:31 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=ISA, version=v6.14
2025-06-26 10:57:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/ISA?version=v6.14
2025-06-26 10:57:33 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 428
2025-06-26 10:57:33 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 428
2025-06-26 10:57:33 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=5
2025-06-26 10:57:33 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/entry-arcv2.h, line=168, version=v6.14
2025-06-26 10:57:33 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/kernel/entry-arcv2.S, line=172, version=v6.14
2025-06-26 10:57:33 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/mips/pci/fixup-fuloong2e.c, line=131, version=v6.14
2025-06-26 10:57:33 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=ISA, url=https://elixir.bootlin.com/api/ident/linux/ISA?version=v6.14, 提取到3个代码片段
2025-06-26 10:57:33 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-26 10:57:33 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-26 10:58:23 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='RISC-V', context='risc-v在linux内核中的应用'}
2025-06-26 10:58:23 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=RISC-V, context=risc-v在linux内核中的应用
2025-06-26 10:58:23 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=RISC-V, contextHint=risc-v在linux内核中的应用
2025-06-26 10:58:23 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='RISC-V', context='risc-v在linux内核中的应用', version='null'}
2025-06-26 10:58:23 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=RISC-V, context=risc-v在linux内核中的应用, version=null
2025-06-26 10:58:23 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=RISC-V, context=risc-v在linux内核中的应用
2025-06-26 10:58:23 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1194
2025-06-26 10:58:23 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=RISC-V, explanationLength=1526
2025-06-26 10:58:23 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=RISC-V
2025-06-26 10:58:27 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:58:27 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了4个搜索实体: [RISC-V, RV, RV64, RV32]
2025-06-26 10:58:27 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [RISC-V, RV, RV64, RV32]
2025-06-26 10:58:27 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RISC-V, version=v6.14
2025-06-26 10:58:27 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RISC-V?version=v6.14
2025-06-26 10:58:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:58:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:58:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:58:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RISC-V, url=https://elixir.bootlin.com/api/ident/linux/RISC-V?version=v6.14, 提取到0个代码片段
2025-06-26 10:58:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RV, version=v6.14
2025-06-26 10:58:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RV?version=v6.14
2025-06-26 10:58:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 1946
2025-06-26 10:58:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 1946
2025-06-26 10:58:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=4, 引用=299
2025-06-26 10:58:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=drivers/ata/ata_piix.c, line=346, version=v6.14
2025-06-26 10:58:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=drivers/ata/ata_piix.c, line=346, version=v6.14
2025-06-26 10:58:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=drivers/ata/ata_piix.c, line=346, version=v6.14
2025-06-26 10:58:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RV, url=https://elixir.bootlin.com/api/ident/linux/RV?version=v6.14, 提取到3个代码片段
2025-06-26 10:58:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RV64, version=v6.14
2025-06-26 10:58:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RV64?version=v6.14
2025-06-26 10:58:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:58:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:58:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:58:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RV64, url=https://elixir.bootlin.com/api/ident/linux/RV64?version=v6.14, 提取到0个代码片段
2025-06-26 10:58:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=RV32, version=v6.14
2025-06-26 10:58:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/RV32?version=v6.14
2025-06-26 10:58:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:58:30 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:58:30 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:58:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=RV32, url=https://elixir.bootlin.com/api/ident/linux/RV32?version=v6.14, 提取到0个代码片段
2025-06-26 10:58:30 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-26 10:58:30 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-26 10:58:36 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='memory compression', context='什么是内存压缩'}
2025-06-26 10:58:36 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=memory compression, context=什么是内存压缩
2025-06-26 10:58:36 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=memory compression, contextHint=什么是内存压缩
2025-06-26 10:58:36 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='memory compression', context='什么是内存压缩', version='null'}
2025-06-26 10:58:36 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=memory compression, context=什么是内存压缩, version=null
2025-06-26 10:58:36 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=memory compression, context=什么是内存压缩
2025-06-26 10:58:36 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1195
2025-06-26 10:58:36 [http-nio-8080-exec-4] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: memory compression
2025-06-26 10:58:36 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=memory compression, explanationLength=63
2025-06-26 10:58:36 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=memory compression
2025-06-26 10:58:40 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 10:58:40 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [memory compression, 内存压缩, 内存压紧, 内存紧缩, 内存压缩技术, 内存压缩算法]
2025-06-26 10:58:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [memory compression, 内存压缩, 内存压紧, 内存紧缩, 内存压缩技术]
2025-06-26 10:58:40 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory compression, version=v6.14
2025-06-26 10:58:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_compression?version=v6.14
2025-06-26 10:58:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 10:58:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 10:58:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 10:58:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory compression, url=https://elixir.bootlin.com/api/ident/linux/memory_compression?version=v6.14, 提取到0个代码片段
2025-06-26 10:58:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=内存压缩, version=v6.14
2025-06-26 10:58:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/内存压缩?version=v6.14
2025-06-26 10:58:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin HTTP请求失败，状态码: 404, 响应体: <!doctype html>
<html class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico" />
        <title>
        
    Elixir error - Bootlin

        </title>
        <meta name="description"
            content="Elixir Cross Referencer - Explore source code in your browser - Particularly useful for the Linux kernel and other low-level projects in C/C++ (bootloaders, C libraries...)">
        <meta name="viewport" content="user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1" />
        <link rel="stylesheet" href="/static/style.css?v=15">

        <link rel="preload" href="/static/img/2penguins.svg" as="image" />
        <link rel="preload" href="/static/img/arrow-dropdown-16.svg" as="image" />

        <link rel="preload" crossorigin href="/static/fonts/lxr.ttf" as="font" />
        <link rel="preload" crossorigin href="/static/fonts/ubuntu/ubuntu-v14-cyrillic_greek_latin_latin-ext_greek-ext_cyrillic-ext-regular.woff2" as="font" />
        <link rel="preload" crossorigin href="/static/fonts/ubuntu/ubuntu-v14-cyrillic_greek_latin_latin-ext_greek-ext_cyrillic-ext-700.woff2" as="font" />
        <link rel="preload" crossorigin href="/static/fonts/ubuntu/ubuntu-v14-cyrillic_greek_latin_latin-ext_greek-ext_cyrillic-ext-italic.woff2" as="font" />

        <link rel="preload" crossorigin href="/static/messages.json" as="fetch" />

        <script>
            document.documentElement.classList.remove('no-js');
            document.documentElement.classList.add('js');

            //NOTE: placing this here, instead of script.js makes the sidebar less likely to flash on navigation
            const showSidebarStr = window.localStorage.getItem('show-sidebar');
            const showSidebar = showSidebarStr == "true" || showSidebarStr == null;
            if (showSidebar) {
              // special class that opens the sidebar only on widescreen devices
              document.documentElement.classList.add('show-menu');
            }
        </script>
    </head>
    <body>
        <!--[if lte IE 9]>
                <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience and security.</p>
        <![endif]-->
        <div class="wrapper">
            <header class="header">
    <nav>
        <ul class="nav-links">
            <li><a href="https://bootlin.com/">Home</a></li>
            <li><a href="https://bootlin.com/engineering/">Engineering</a></li>
            <li><a href="https://bootlin.com/training/">Training</a></li>
            <li><a href="https://bootlin.com/docs/">Docs</a></li>
            <li><a href="https://bootlin.com/community/">Community</a></li>
            <li><a href="https://bootlin.com/company/">Company</a></li>
        </ul>
        <ul class="social-icons">
            <li><a target="_blank" class="icon-twitter" href="http://twitter.com/bootlincom">twitter</a></li>
            <li><a target="_blank" class="icon-mastodon" href="https://fosstodon.org/@bootlin">mastodon</a></li>
            <li><a target="_blank" class="icon-linkedin" href="https://www.linkedin.com/company/bootlin/">linkedin</a></li>
            <li><a target="_blank" class="icon-github" href="https://github.com/bootlin">github</a></li>
        </ul>
    </nav>
    <div class="header-main">
        <div class="banners">
            <div class="message-banner-mobile">
                <p class="title">Linux Audio</p>
                <p class="subtitle">Check our new training course</p>
                <a class="message-link" target="_blank" href="https://bootlin.com/training/audio/"></a>
            </div>
            <div class="message-banner-desktop">
                 <p class="title"></p>
                 <div class="subtitle"></div>
                 <div class="subtitle"></div>
                 <div class="subtitle"></div>
                 <a class="message-link" target="_blank" href="https://bootlin.com/"></a>
            </div>
        </div>
        <div class="header-logo">
            <h1>
                <img src="/static/img/bootlin-logo-white.svg" alt="Bootlin logo"/>
            </h1>
            <h2>Elixir Cross Referencer</h2>
        </div>
        <div></div>
    </div>
</header>
            <header class="topbar">
    <div class="breadcrumb">
        <a href="#menu" class="open-menu icon-menu screenreader" title="Open Menu">Open Menu</a>
        <a class="project" href="/">/</a>
        
    </div>
    <div class="search">
        <form method="post" action="" id="search-form">
            <select name="f" title="Restricts search to specific file families">
            
                <option value="A" selected>
                All symbols
                </option>
            
                <option value="C" >
                C/CPP/ASM
                </option>
            
                <option value="K" >
                Kconfig
                </option>
            
                <option value="D" >
                Devicetree
                </option>
            
                <option value="B" >
                DT compatible
                </option>
            
            </select>

            <div class="search-controls">
                <input placeholder="Search Identifier" type="text" id="search-input" name="i"
                    value="" autofocus/>
                <button type="button" id="clear-search" class="visible-if-js icon-cross"><span class="screenreader">Clear</span></button>
                <button type="submit" class="icon-search"><span class="screenreader">Go get it</span></button>
            </div>
        </form>
    </div>
</header>
            <main>
                <aside class="sidebar" id="menu">
    <div class="filter">
        <select class="select-projects" onchange="window.location.href=this.value">
            <option  value="/amazon-freertos/latest/source">amazon-freertos</option>
            <option  value="/arm-trusted-firmware/latest/source">arm-trusted-firmware</option>
            <option  value="/barebox/latest/source">barebox</option>
            <option  value="/bluez/latest/source">bluez</option>
            <option  value="/busybox/latest/source">busybox</option>
            <option  value="/coreboot/latest/source">coreboot</option>
            <option  value="/dpdk/latest/source">dpdk</option>
            <option  value="/freebsd/latest/source">freebsd</option>
            <option  value="/glibc/latest/source">glibc</option>
            <option  value="/grub/latest/source">grub</option>
            <option  value="/linux/latest/source">linux</option>
            <option  value="/llvm/latest/source">llvm</option>
            <option  value="/mesa/latest/source">mesa</option>
            <option  value="/musl/latest/source">musl</option>
            <option  value="/ofono/latest/source">ofono</option>
            <option  value="/op-tee/latest/source">op-tee</option>
            <option  value="/qemu/latest/source">qemu</option>
            <option  value="/toybox/latest/source">toybox</option>
            <option  value="/u-boot/latest/source">u-boot</option>
            <option  value="/uclibc-ng/latest/source">uclibc-ng</option>
            <option  value="/xen/latest/source">xen</option>
            <option  value="/zephyr/latest/source">zephyr</option>
        </select>
        <input class="filter-input" placeholder="Filter tags">
        <a title="Close Menu" class="close-menu icon-cross"></a>
        <button class="icon-filter" tabindex="-1"><span class="screenreader">Filter tags</span></button>
    </div>
    <nav>
        <h3 class="screenreader">Projects</h3>
        <ul class="projects">
            <li><a href="/amazon-freertos/latest/source">amazon-freertos</a></li>
            <li><a href="/arm-trusted-firmware/latest/source">arm-trusted-firmware</a></li>
            <li><a href="/barebox/latest/source">barebox</a></li>
            <li><a href="/bluez/latest/source">bluez</a></li>
            <li><a href="/busybox/latest/source">busybox</a></li>
            <li><a href="/coreboot/latest/source">coreboot</a></li>
            <li><a href="/dpdk/latest/source">dpdk</a></li>
            <li><a href="/freebsd/latest/source">freebsd</a></li>
            <li><a href="/glibc/latest/source">glibc</a></li>
            <li><a href="/grub/latest/source">grub</a></li>
            <li><a href="/linux/latest/source">linux</a></li>
            <li><a href="/llvm/latest/source">llvm</a></li>
            <li><a href="/mesa/latest/source">mesa</a></li>
            <li><a href="/musl/latest/source">musl</a></li>
            <li><a href="/ofono/latest/source">ofono</a></li>
            <li><a href="/op-tee/latest/source">op-tee</a></li>
            <li><a href="/qemu/latest/source">qemu</a></li>
            <li><a href="/toybox/latest/source">toybox</a></li>
            <li><a href="/u-boot/latest/source">u-boot</a></li>
            <li><a href="/uclibc-ng/latest/source">uclibc-ng</a></li>
            <li><a href="/xen/latest/source">xen</a></li>
            <li><a href="/zephyr/latest/source">zephyr</a></li>
        </ul>

        <h3 class="screenreader">Versions</h3>
        <ul class="versions">
            
            
        </ul>

        <div class="filter-results"></div>
    </nav>
</aside>
                <div class="workspace">
                    <div id="reference-popup-wrapper">
                        <div id="reference-popup"></div>
                        <div id="loading-popup">Loading...</div>
                    </div>
                    

<div class="lxrerror">
    <h2>Error</h2>
    <div id="error-details">
        Unknown project
    </div>
    <span>You might want to:</span>
    <ul>
        
        <li><a class="link" href="/">Go to home page</a></li>
        <li><a class="link" href="https://github.com/bootlin/elixir/issues/new?body=TODO%3A%20add%20information%20on%20how%20you%20reached%20the%20error%20here%20and%20validate%20the%20details%20below.%0A%0A---%0A%0ARequest%20date%3A%202025-06-26%2002%3A58%3A42.535463%0APath%3A%20/api/ident/linux/%25E5%2586%2585%25E5%25AD%2598%25E5%258E%258B%25E7%25BC%25A9%0AQuery%20string%3A%20version%3Dv6.14%0AMethod%3A%20GET%0AStatus%20code%3A%20404%20Not%20Found%0AError%20title%3A%20Error%0AError%20details%3A%20Unknown%20project%0A">Report a bug</a></li>
    </ul>
    <details>
        <summary id="report-error-details-header">Error details for a bug report</summary>
        <pre>Request date: 2025-06-26 02:58:42.535463
Path: /api/ident/linux/%E5%86%85%E5%AD%98%E5%8E%8B%E7%BC%A9
Query string: version=v6.14
Method: GET
Status code: 404 Not Found
Error title: Error
Error details: Unknown project
</pre>
    </details>
    </div>


                </div>
            </main>
            <footer class="footer">
                <span class="version">
                    <a href="/"></a>
                    <em class="icon-tag"></em>
                </span>
                
                
                <a title="Go to top of the page" class="go-top icon-up screenreader" href="#">
                    Top
                </a>
                <span class="poweredby">powered by
                    <a target="_blank" href="https://github.com/bootlin/elixir/tree/be2e621">
                        Elixir be2e621
                    </a>
                </span>
            </footer>
        </div>
        <script src="/static/script.js?v=16"></script>
        <script src="/static/dynamic-references.js?v=4"></script>
        <script src="/static/autocomplete.js" project=""></script>
    </body>
</html>
2025-06-26 10:58:42 [http-nio-8080-exec-2] WARN  c.c.a.s.a.BootlinSearchService - Bootlin 搜索失败，实体: 内存压缩, 状态码: null
2025-06-26 10:58:42 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=内存压紧, version=v6.14
2025-06-26 10:58:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/内存压紧?version=v6.14
2025-06-26 10:58:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin HTTP请求失败，状态码: 404, 响应体: <!doctype html>
<html class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico" />
        <title>
        
    Elixir error - Bootlin

        </title>
        <meta name="description"
            content="Elixir Cross Referencer - Explore source code in your browser - Particularly useful for the Linux kernel and other low-level projects in C/C++ (bootloaders, C libraries...)">
        <meta name="viewport" content="user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1" />
        <link rel="stylesheet" href="/static/style.css?v=15">

        <link rel="preload" href="/static/img/2penguins.svg" as="image" />
        <link rel="preload" href="/static/img/arrow-dropdown-16.svg" as="image" />

        <link rel="preload" crossorigin href="/static/fonts/lxr.ttf" as="font" />
        <link rel="preload" crossorigin href="/static/fonts/ubuntu/ubuntu-v14-cyrillic_greek_latin_latin-ext_greek-ext_cyrillic-ext-regular.woff2" as="font" />
        <link rel="preload" crossorigin href="/static/fonts/ubuntu/ubuntu-v14-cyrillic_greek_latin_latin-ext_greek-ext_cyrillic-ext-700.woff2" as="font" />
        <link rel="preload" crossorigin href="/static/fonts/ubuntu/ubuntu-v14-cyrillic_greek_latin_latin-ext_greek-ext_cyrillic-ext-italic.woff2" as="font" />

        <link rel="preload" crossorigin href="/static/messages.json" as="fetch" />

        <script>
            document.documentElement.classList.remove('no-js');
            document.documentElement.classList.add('js');

            //NOTE: placing this here, instead of script.js makes the sidebar less likely to flash on navigation
            const showSidebarStr = window.localStorage.getItem('show-sidebar');
            const showSidebar = showSidebarStr == "true" || showSidebarStr == null;
            if (showSidebar) {
              // special class that opens the sidebar only on widescreen devices
              document.documentElement.classList.add('show-menu');
            }
        </script>
    </head>
    <body>
        <!--[if lte IE 9]>
                <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience and security.</p>
        <![endif]-->
        <div class="wrapper">
            <header class="header">
    <nav>
        <ul class="nav-links">
            <li><a href="https://bootlin.com/">Home</a></li>
            <li><a href="https://bootlin.com/engineering/">Engineering</a></li>
            <li><a href="https://bootlin.com/training/">Training</a></li>
            <li><a href="https://bootlin.com/docs/">Docs</a></li>
            <li><a href="https://bootlin.com/community/">Community</a></li>
            <li><a href="https://bootlin.com/company/">Company</a></li>
        </ul>
        <ul class="social-icons">
            <li><a target="_blank" class="icon-twitter" href="http://twitter.com/bootlincom">twitter</a></li>
            <li><a target="_blank" class="icon-mastodon" href="https://fosstodon.org/@bootlin">mastodon</a></li>
            <li><a target="_blank" class="icon-linkedin" href="https://www.linkedin.com/company/bootlin/">linkedin</a></li>
            <li><a target="_blank" class="icon-github" href="https://github.com/bootlin">github</a></li>
        </ul>
    </nav>
    <div class="header-main">
        <div class="banners">
            <div class="message-banner-mobile">
                <p class="title">Linux Audio</p>
                <p class="subtitle">Check our new training course</p>
                <a class="message-link" target="_blank" href="https://bootlin.com/training/audio/"></a>
            </div>
            <div class="message-banner-desktop">
                 <p class="title"></p>
                 <div class="subtitle"></div>
                 <div class="subtitle"></div>
                 <div class="subtitle"></div>
                 <a class="message-link" target="_blank" href="https://bootlin.com/"></a>
            </div>
        </div>
        <div class="header-logo">
            <h1>
                <img src="/static/img/bootlin-logo-white.svg" alt="Bootlin logo"/>
            </h1>
            <h2>Elixir Cross Referencer</h2>
        </div>
        <div></div>
    </div>
</header>
            <header class="topbar">
    <div class="breadcrumb">
        <a href="#menu" class="open-menu icon-menu screenreader" title="Open Menu">Open Menu</a>
        <a class="project" href="/">/</a>
        
    </div>
    <div class="search">
        <form method="post" action="" id="search-form">
            <select name="f" title="Restricts search to specific file families">
            
                <option value="A" selected>
                All symbols
                </option>
            
                <option value="C" >
                C/CPP/ASM
                </option>
            
                <option value="K" >
                Kconfig
                </option>
            
                <option value="D" >
                Devicetree
                </option>
            
                <option value="B" >
                DT compatible
                </option>
            
            </select>

            <div class="search-controls">
                <input placeholder="Search Identifier" type="text" id="search-input" name="i"
                    value="" autofocus/>
                <button type="button" id="clear-search" class="visible-if-js icon-cross"><span class="screenreader">Clear</span></button>
                <button type="submit" class="icon-search"><span class="screenreader">Go get it</span></button>
            </div>
        </form>
    </div>
</header>
            <main>
                <aside class="sidebar" id="menu">
    <div class="filter">
        <select class="select-projects" onchange="window.location.href=this.value">
            <option  value="/amazon-freertos/latest/source">amazon-freertos</option>
            <option  value="/arm-trusted-firmware/latest/source">arm-trusted-firmware</option>
            <option  value="/barebox/latest/source">barebox</option>
            <option  value="/bluez/latest/source">bluez</option>
            <option  value="/busybox/latest/source">busybox</option>
            <option  value="/coreboot/latest/source">coreboot</option>
            <option  value="/dpdk/latest/source">dpdk</option>
            <option  value="/freebsd/latest/source">freebsd</option>
            <option  value="/glibc/latest/source">glibc</option>
            <option  value="/grub/latest/source">grub</option>
            <option  value="/linux/latest/source">linux</option>
            <option  value="/llvm/latest/source">llvm</option>
            <option  value="/mesa/latest/source">mesa</option>
            <option  value="/musl/latest/source">musl</option>
            <option  value="/ofono/latest/source">ofono</option>
            <option  value="/op-tee/latest/source">op-tee</option>
            <option  value="/qemu/latest/source">qemu</option>
            <option  value="/toybox/latest/source">toybox</option>
            <option  value="/u-boot/latest/source">u-boot</option>
            <option  value="/uclibc-ng/latest/source">uclibc-ng</option>
            <option  value="/xen/latest/source">xen</option>
            <option  value="/zephyr/latest/source">zephyr</option>
        </select>
        <input class="filter-input" placeholder="Filter tags">
        <a title="Close Menu" class="close-menu icon-cross"></a>
        <button class="icon-filter" tabindex="-1"><span class="screenreader">Filter tags</span></button>
    </div>
    <nav>
        <h3 class="screenreader">Projects</h3>
        <ul class="projects">
            <li><a href="/amazon-freertos/latest/source">amazon-freertos</a></li>
            <li><a href="/arm-trusted-firmware/latest/source">arm-trusted-firmware</a></li>
            <li><a href="/barebox/latest/source">barebox</a></li>
            <li><a href="/bluez/latest/source">bluez</a></li>
            <li><a href="/busybox/latest/source">busybox</a></li>
            <li><a href="/coreboot/latest/source">coreboot</a></li>
            <li><a href="/dpdk/latest/source">dpdk</a></li>
            <li><a href="/freebsd/latest/source">freebsd</a></li>
            <li><a href="/glibc/latest/source">glibc</a></li>
            <li><a href="/grub/latest/source">grub</a></li>
            <li><a href="/linux/latest/source">linux</a></li>
            <li><a href="/llvm/latest/source">llvm</a></li>
            <li><a href="/mesa/latest/source">mesa</a></li>
            <li><a href="/musl/latest/source">musl</a></li>
            <li><a href="/ofono/latest/source">ofono</a></li>
            <li><a href="/op-tee/latest/source">op-tee</a></li>
            <li><a href="/qemu/latest/source">qemu</a></li>
            <li><a href="/toybox/latest/source">toybox</a></li>
            <li><a href="/u-boot/latest/source">u-boot</a></li>
            <li><a href="/uclibc-ng/latest/source">uclibc-ng</a></li>
            <li><a href="/xen/latest/source">xen</a></li>
            <li><a href="/zephyr/latest/source">zephyr</a></li>
        </ul>

        <h3 class="screenreader">Versions</h3>
        <ul class="versions">
            
            
        </ul>

        <div class="filter-results"></div>
    </nav>
</aside>
                <div class="workspace">
                    <div id="reference-popup-wrapper">
                        <div id="reference-popup"></div>
                        <div id="loading-popup">Loading...</div>
                    </div>
                    

<div class="lxrerror">
    <h2>Error</h2>
    <div id="error-details">
        Unknown project
    </div>
    <span>You might want to:</span>
    <ul>
        
        <li><a class="link" href="/">Go to home page</a></li>
        <li><a class="link" href="https://github.com/bootlin/elixir/issues/new?body=TODO%3A%20add%20information%20on%20how%20you%20reached%20the%20error%20here%20and%20validate%20the%20details%20below.%0A%0A---%0A%0ARequest%20date%3A%202025-06-26%2002%3A58%3A42.860508%0APath%3A%20/api/ident/linux/%25E5%2586%2585%25E5%25AD%2598%25E5%258E%258B%25E7%25B4%25A7%0AQuery%20string%3A%20version%3Dv6.14%0AMethod%3A%20GET%0AStatus%20code%3A%20404%20Not%20Found%0AError%20title%3A%20Error%0AError%20details%3A%20Unknown%20project%0A">Report a bug</a></li>
    </ul>
    <details>
        <summary id="report-error-details-header">Error details for a bug report</summary>
        <pre>Request date: 2025-06-26 02:58:42.860508
Path: /api/ident/linux/%E5%86%85%E5%AD%98%E5%8E%8B%E7%B4%A7
Query string: version=v6.14
Method: GET
Status code: 404 Not Found
Error title: Error
Error details: Unknown project
</pre>
    </details>
    </div>


                </div>
            </main>
            <footer class="footer">
                <span class="version">
                    <a href="/"></a>
                    <em class="icon-tag"></em>
                </span>
                
                
                <a title="Go to top of the page" class="go-top icon-up screenreader" href="#">
                    Top
                </a>
                <span class="poweredby">powered by
                    <a target="_blank" href="https://github.com/bootlin/elixir/tree/be2e621">
                        Elixir be2e621
                    </a>
                </span>
            </footer>
        </div>
        <script src="/static/script.js?v=16"></script>
        <script src="/static/dynamic-references.js?v=4"></script>
        <script src="/static/autocomplete.js" project=""></script>
    </body>
</html>
2025-06-26 10:58:43 [http-nio-8080-exec-2] WARN  c.c.a.s.a.BootlinSearchService - Bootlin 搜索失败，实体: 内存压紧, 状态码: null
2025-06-26 10:58:43 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=内存紧缩, version=v6.14
2025-06-26 10:58:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/内存紧缩?version=v6.14
2025-06-26 10:58:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin HTTP请求失败，状态码: 404, 响应体: <!doctype html>
<html class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico" />
        <title>
        
    Elixir error - Bootlin

        </title>
        <meta name="description"
            content="Elixir Cross Referencer - Explore source code in your browser - Particularly useful for the Linux kernel and other low-level projects in C/C++ (bootloaders, C libraries...)">
        <meta name="viewport" content="user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1" />
        <link rel="stylesheet" href="/static/style.css?v=15">

        <link rel="preload" href="/static/img/2penguins.svg" as="image" />
        <link rel="preload" href="/static/img/arrow-dropdown-16.svg" as="image" />

        <link rel="preload" crossorigin href="/static/fonts/lxr.ttf" as="font" />
        <link rel="preload" crossorigin href="/static/fonts/ubuntu/ubuntu-v14-cyrillic_greek_latin_latin-ext_greek-ext_cyrillic-ext-regular.woff2" as="font" />
        <link rel="preload" crossorigin href="/static/fonts/ubuntu/ubuntu-v14-cyrillic_greek_latin_latin-ext_greek-ext_cyrillic-ext-700.woff2" as="font" />
        <link rel="preload" crossorigin href="/static/fonts/ubuntu/ubuntu-v14-cyrillic_greek_latin_latin-ext_greek-ext_cyrillic-ext-italic.woff2" as="font" />

        <link rel="preload" crossorigin href="/static/messages.json" as="fetch" />

        <script>
            document.documentElement.classList.remove('no-js');
            document.documentElement.classList.add('js');

            //NOTE: placing this here, instead of script.js makes the sidebar less likely to flash on navigation
            const showSidebarStr = window.localStorage.getItem('show-sidebar');
            const showSidebar = showSidebarStr == "true" || showSidebarStr == null;
            if (showSidebar) {
              // special class that opens the sidebar only on widescreen devices
              document.documentElement.classList.add('show-menu');
            }
        </script>
    </head>
    <body>
        <!--[if lte IE 9]>
                <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience and security.</p>
        <![endif]-->
        <div class="wrapper">
            <header class="header">
    <nav>
        <ul class="nav-links">
            <li><a href="https://bootlin.com/">Home</a></li>
            <li><a href="https://bootlin.com/engineering/">Engineering</a></li>
            <li><a href="https://bootlin.com/training/">Training</a></li>
            <li><a href="https://bootlin.com/docs/">Docs</a></li>
            <li><a href="https://bootlin.com/community/">Community</a></li>
            <li><a href="https://bootlin.com/company/">Company</a></li>
        </ul>
        <ul class="social-icons">
            <li><a target="_blank" class="icon-twitter" href="http://twitter.com/bootlincom">twitter</a></li>
            <li><a target="_blank" class="icon-mastodon" href="https://fosstodon.org/@bootlin">mastodon</a></li>
            <li><a target="_blank" class="icon-linkedin" href="https://www.linkedin.com/company/bootlin/">linkedin</a></li>
            <li><a target="_blank" class="icon-github" href="https://github.com/bootlin">github</a></li>
        </ul>
    </nav>
    <div class="header-main">
        <div class="banners">
            <div class="message-banner-mobile">
                <p class="title">Linux Audio</p>
                <p class="subtitle">Check our new training course</p>
                <a class="message-link" target="_blank" href="https://bootlin.com/training/audio/"></a>
            </div>
            <div class="message-banner-desktop">
                 <p class="title"></p>
                 <div class="subtitle"></div>
                 <div class="subtitle"></div>
                 <div class="subtitle"></div>
                 <a class="message-link" target="_blank" href="https://bootlin.com/"></a>
            </div>
        </div>
        <div class="header-logo">
            <h1>
                <img src="/static/img/bootlin-logo-white.svg" alt="Bootlin logo"/>
            </h1>
            <h2>Elixir Cross Referencer</h2>
        </div>
        <div></div>
    </div>
</header>
            <header class="topbar">
    <div class="breadcrumb">
        <a href="#menu" class="open-menu icon-menu screenreader" title="Open Menu">Open Menu</a>
        <a class="project" href="/">/</a>
        
    </div>
    <div class="search">
        <form method="post" action="" id="search-form">
            <select name="f" title="Restricts search to specific file families">
            
                <option value="A" selected>
                All symbols
                </option>
            
                <option value="C" >
                C/CPP/ASM
                </option>
            
                <option value="K" >
                Kconfig
                </option>
            
                <option value="D" >
                Devicetree
                </option>
            
                <option value="B" >
                DT compatible
                </option>
            
            </select>

            <div class="search-controls">
                <input placeholder="Search Identifier" type="text" id="search-input" name="i"
                    value="" autofocus/>
                <button type="button" id="clear-search" class="visible-if-js icon-cross"><span class="screenreader">Clear</span></button>
                <button type="submit" class="icon-search"><span class="screenreader">Go get it</span></button>
            </div>
        </form>
    </div>
</header>
            <main>
                <aside class="sidebar" id="menu">
    <div class="filter">
        <select class="select-projects" onchange="window.location.href=this.value">
            <option  value="/amazon-freertos/latest/source">amazon-freertos</option>
            <option  value="/arm-trusted-firmware/latest/source">arm-trusted-firmware</option>
            <option  value="/barebox/latest/source">barebox</option>
            <option  value="/bluez/latest/source">bluez</option>
            <option  value="/busybox/latest/source">busybox</option>
            <option  value="/coreboot/latest/source">coreboot</option>
            <option  value="/dpdk/latest/source">dpdk</option>
            <option  value="/freebsd/latest/source">freebsd</option>
            <option  value="/glibc/latest/source">glibc</option>
            <option  value="/grub/latest/source">grub</option>
            <option  value="/linux/latest/source">linux</option>
            <option  value="/llvm/latest/source">llvm</option>
            <option  value="/mesa/latest/source">mesa</option>
            <option  value="/musl/latest/source">musl</option>
            <option  value="/ofono/latest/source">ofono</option>
            <option  value="/op-tee/latest/source">op-tee</option>
            <option  value="/qemu/latest/source">qemu</option>
            <option  value="/toybox/latest/source">toybox</option>
            <option  value="/u-boot/latest/source">u-boot</option>
            <option  value="/uclibc-ng/latest/source">uclibc-ng</option>
            <option  value="/xen/latest/source">xen</option>
            <option  value="/zephyr/latest/source">zephyr</option>
        </select>
        <input class="filter-input" placeholder="Filter tags">
        <a title="Close Menu" class="close-menu icon-cross"></a>
        <button class="icon-filter" tabindex="-1"><span class="screenreader">Filter tags</span></button>
    </div>
    <nav>
        <h3 class="screenreader">Projects</h3>
        <ul class="projects">
            <li><a href="/amazon-freertos/latest/source">amazon-freertos</a></li>
            <li><a href="/arm-trusted-firmware/latest/source">arm-trusted-firmware</a></li>
            <li><a href="/barebox/latest/source">barebox</a></li>
            <li><a href="/bluez/latest/source">bluez</a></li>
            <li><a href="/busybox/latest/source">busybox</a></li>
            <li><a href="/coreboot/latest/source">coreboot</a></li>
            <li><a href="/dpdk/latest/source">dpdk</a></li>
            <li><a href="/freebsd/latest/source">freebsd</a></li>
            <li><a href="/glibc/latest/source">glibc</a></li>
            <li><a href="/grub/latest/source">grub</a></li>
            <li><a href="/linux/latest/source">linux</a></li>
            <li><a href="/llvm/latest/source">llvm</a></li>
            <li><a href="/mesa/latest/source">mesa</a></li>
            <li><a href="/musl/latest/source">musl</a></li>
            <li><a href="/ofono/latest/source">ofono</a></li>
            <li><a href="/op-tee/latest/source">op-tee</a></li>
            <li><a href="/qemu/latest/source">qemu</a></li>
            <li><a href="/toybox/latest/source">toybox</a></li>
            <li><a href="/u-boot/latest/source">u-boot</a></li>
            <li><a href="/uclibc-ng/latest/source">uclibc-ng</a></li>
            <li><a href="/xen/latest/source">xen</a></li>
            <li><a href="/zephyr/latest/source">zephyr</a></li>
        </ul>

        <h3 class="screenreader">Versions</h3>
        <ul class="versions">
            
            
        </ul>

        <div class="filter-results"></div>
    </nav>
</aside>
                <div class="workspace">
                    <div id="reference-popup-wrapper">
                        <div id="reference-popup"></div>
                        <div id="loading-popup">Loading...</div>
                    </div>
                    

<div class="lxrerror">
    <h2>Error</h2>
    <div id="error-details">
        Unknown project
    </div>
    <span>You might want to:</span>
    <ul>
        
        <li><a class="link" href="/">Go to home page</a></li>
        <li><a class="link" href="https://github.com/bootlin/elixir/issues/new?body=TODO%3A%20add%20information%20on%20how%20you%20reached%20the%20error%20here%20and%20validate%20the%20details%20below.%0A%0A---%0A%0ARequest%20date%3A%202025-06-26%2002%3A58%3A43.884519%0APath%3A%20/api/ident/linux/%25E5%2586%2585%25E5%25AD%2598%25E7%25B4%25A7%25E7%25BC%25A9%0AQuery%20string%3A%20version%3Dv6.14%0AMethod%3A%20GET%0AStatus%20code%3A%20404%20Not%20Found%0AError%20title%3A%20Error%0AError%20details%3A%20Unknown%20project%0A">Report a bug</a></li>
    </ul>
    <details>
        <summary id="report-error-details-header">Error details for a bug report</summary>
        <pre>Request date: 2025-06-26 02:58:43.884519
Path: /api/ident/linux/%E5%86%85%E5%AD%98%E7%B4%A7%E7%BC%A9
Query string: version=v6.14
Method: GET
Status code: 404 Not Found
Error title: Error
Error details: Unknown project
</pre>
    </details>
    </div>


                </div>
            </main>
            <footer class="footer">
                <span class="version">
                    <a href="/"></a>
                    <em class="icon-tag"></em>
                </span>
                
                
                <a title="Go to top of the page" class="go-top icon-up screenreader" href="#">
                    Top
                </a>
                <span class="poweredby">powered by
                    <a target="_blank" href="https://github.com/bootlin/elixir/tree/be2e621">
                        Elixir be2e621
                    </a>
                </span>
            </footer>
        </div>
        <script src="/static/script.js?v=16"></script>
        <script src="/static/dynamic-references.js?v=4"></script>
        <script src="/static/autocomplete.js" project=""></script>
    </body>
</html>
2025-06-26 10:58:43 [http-nio-8080-exec-2] WARN  c.c.a.s.a.BootlinSearchService - Bootlin 搜索失败，实体: 内存紧缩, 状态码: null
2025-06-26 10:58:43 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=内存压缩技术, version=v6.14
2025-06-26 10:58:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/内存压缩技术?version=v6.14
2025-06-26 10:58:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin HTTP请求失败，状态码: 404, 响应体: <!doctype html>
<html class="no-js">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico" />
        <title>
        
    Elixir error - Bootlin

        </title>
        <meta name="description"
            content="Elixir Cross Referencer - Explore source code in your browser - Particularly useful for the Linux kernel and other low-level projects in C/C++ (bootloaders, C libraries...)">
        <meta name="viewport" content="user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1" />
        <link rel="stylesheet" href="/static/style.css?v=15">

        <link rel="preload" href="/static/img/2penguins.svg" as="image" />
        <link rel="preload" href="/static/img/arrow-dropdown-16.svg" as="image" />

        <link rel="preload" crossorigin href="/static/fonts/lxr.ttf" as="font" />
        <link rel="preload" crossorigin href="/static/fonts/ubuntu/ubuntu-v14-cyrillic_greek_latin_latin-ext_greek-ext_cyrillic-ext-regular.woff2" as="font" />
        <link rel="preload" crossorigin href="/static/fonts/ubuntu/ubuntu-v14-cyrillic_greek_latin_latin-ext_greek-ext_cyrillic-ext-700.woff2" as="font" />
        <link rel="preload" crossorigin href="/static/fonts/ubuntu/ubuntu-v14-cyrillic_greek_latin_latin-ext_greek-ext_cyrillic-ext-italic.woff2" as="font" />

        <link rel="preload" crossorigin href="/static/messages.json" as="fetch" />

        <script>
            document.documentElement.classList.remove('no-js');
            document.documentElement.classList.add('js');

            //NOTE: placing this here, instead of script.js makes the sidebar less likely to flash on navigation
            const showSidebarStr = window.localStorage.getItem('show-sidebar');
            const showSidebar = showSidebarStr == "true" || showSidebarStr == null;
            if (showSidebar) {
              // special class that opens the sidebar only on widescreen devices
              document.documentElement.classList.add('show-menu');
            }
        </script>
    </head>
    <body>
        <!--[if lte IE 9]>
                <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience and security.</p>
        <![endif]-->
        <div class="wrapper">
            <header class="header">
    <nav>
        <ul class="nav-links">
            <li><a href="https://bootlin.com/">Home</a></li>
            <li><a href="https://bootlin.com/engineering/">Engineering</a></li>
            <li><a href="https://bootlin.com/training/">Training</a></li>
            <li><a href="https://bootlin.com/docs/">Docs</a></li>
            <li><a href="https://bootlin.com/community/">Community</a></li>
            <li><a href="https://bootlin.com/company/">Company</a></li>
        </ul>
        <ul class="social-icons">
            <li><a target="_blank" class="icon-twitter" href="http://twitter.com/bootlincom">twitter</a></li>
            <li><a target="_blank" class="icon-mastodon" href="https://fosstodon.org/@bootlin">mastodon</a></li>
            <li><a target="_blank" class="icon-linkedin" href="https://www.linkedin.com/company/bootlin/">linkedin</a></li>
            <li><a target="_blank" class="icon-github" href="https://github.com/bootlin">github</a></li>
        </ul>
    </nav>
    <div class="header-main">
        <div class="banners">
            <div class="message-banner-mobile">
                <p class="title">Linux Audio</p>
                <p class="subtitle">Check our new training course</p>
                <a class="message-link" target="_blank" href="https://bootlin.com/training/audio/"></a>
            </div>
            <div class="message-banner-desktop">
                 <p class="title"></p>
                 <div class="subtitle"></div>
                 <div class="subtitle"></div>
                 <div class="subtitle"></div>
                 <a class="message-link" target="_blank" href="https://bootlin.com/"></a>
            </div>
        </div>
        <div class="header-logo">
            <h1>
                <img src="/static/img/bootlin-logo-white.svg" alt="Bootlin logo"/>
            </h1>
            <h2>Elixir Cross Referencer</h2>
        </div>
        <div></div>
    </div>
</header>
            <header class="topbar">
    <div class="breadcrumb">
        <a href="#menu" class="open-menu icon-menu screenreader" title="Open Menu">Open Menu</a>
        <a class="project" href="/">/</a>
        
    </div>
    <div class="search">
        <form method="post" action="" id="search-form">
            <select name="f" title="Restricts search to specific file families">
            
                <option value="A" selected>
                All symbols
                </option>
            
                <option value="C" >
                C/CPP/ASM
                </option>
            
                <option value="K" >
                Kconfig
                </option>
            
                <option value="D" >
                Devicetree
                </option>
            
                <option value="B" >
                DT compatible
                </option>
            
            </select>

            <div class="search-controls">
                <input placeholder="Search Identifier" type="text" id="search-input" name="i"
                    value="" autofocus/>
                <button type="button" id="clear-search" class="visible-if-js icon-cross"><span class="screenreader">Clear</span></button>
                <button type="submit" class="icon-search"><span class="screenreader">Go get it</span></button>
            </div>
        </form>
    </div>
</header>
            <main>
                <aside class="sidebar" id="menu">
    <div class="filter">
        <select class="select-projects" onchange="window.location.href=this.value">
            <option  value="/amazon-freertos/latest/source">amazon-freertos</option>
            <option  value="/arm-trusted-firmware/latest/source">arm-trusted-firmware</option>
            <option  value="/barebox/latest/source">barebox</option>
            <option  value="/bluez/latest/source">bluez</option>
            <option  value="/busybox/latest/source">busybox</option>
            <option  value="/coreboot/latest/source">coreboot</option>
            <option  value="/dpdk/latest/source">dpdk</option>
            <option  value="/freebsd/latest/source">freebsd</option>
            <option  value="/glibc/latest/source">glibc</option>
            <option  value="/grub/latest/source">grub</option>
            <option  value="/linux/latest/source">linux</option>
            <option  value="/llvm/latest/source">llvm</option>
            <option  value="/mesa/latest/source">mesa</option>
            <option  value="/musl/latest/source">musl</option>
            <option  value="/ofono/latest/source">ofono</option>
            <option  value="/op-tee/latest/source">op-tee</option>
            <option  value="/qemu/latest/source">qemu</option>
            <option  value="/toybox/latest/source">toybox</option>
            <option  value="/u-boot/latest/source">u-boot</option>
            <option  value="/uclibc-ng/latest/source">uclibc-ng</option>
            <option  value="/xen/latest/source">xen</option>
            <option  value="/zephyr/latest/source">zephyr</option>
        </select>
        <input class="filter-input" placeholder="Filter tags">
        <a title="Close Menu" class="close-menu icon-cross"></a>
        <button class="icon-filter" tabindex="-1"><span class="screenreader">Filter tags</span></button>
    </div>
    <nav>
        <h3 class="screenreader">Projects</h3>
        <ul class="projects">
            <li><a href="/amazon-freertos/latest/source">amazon-freertos</a></li>
            <li><a href="/arm-trusted-firmware/latest/source">arm-trusted-firmware</a></li>
            <li><a href="/barebox/latest/source">barebox</a></li>
            <li><a href="/bluez/latest/source">bluez</a></li>
            <li><a href="/busybox/latest/source">busybox</a></li>
            <li><a href="/coreboot/latest/source">coreboot</a></li>
            <li><a href="/dpdk/latest/source">dpdk</a></li>
            <li><a href="/freebsd/latest/source">freebsd</a></li>
            <li><a href="/glibc/latest/source">glibc</a></li>
            <li><a href="/grub/latest/source">grub</a></li>
            <li><a href="/linux/latest/source">linux</a></li>
            <li><a href="/llvm/latest/source">llvm</a></li>
            <li><a href="/mesa/latest/source">mesa</a></li>
            <li><a href="/musl/latest/source">musl</a></li>
            <li><a href="/ofono/latest/source">ofono</a></li>
            <li><a href="/op-tee/latest/source">op-tee</a></li>
            <li><a href="/qemu/latest/source">qemu</a></li>
            <li><a href="/toybox/latest/source">toybox</a></li>
            <li><a href="/u-boot/latest/source">u-boot</a></li>
            <li><a href="/uclibc-ng/latest/source">uclibc-ng</a></li>
            <li><a href="/xen/latest/source">xen</a></li>
            <li><a href="/zephyr/latest/source">zephyr</a></li>
        </ul>

        <h3 class="screenreader">Versions</h3>
        <ul class="versions">
            
            
        </ul>

        <div class="filter-results"></div>
    </nav>
</aside>
                <div class="workspace">
                    <div id="reference-popup-wrapper">
                        <div id="reference-popup"></div>
                        <div id="loading-popup">Loading...</div>
                    </div>
                    

<div class="lxrerror">
    <h2>Error</h2>
    <div id="error-details">
        Unknown project
    </div>
    <span>You might want to:</span>
    <ul>
        
        <li><a class="link" href="/">Go to home page</a></li>
        <li><a class="link" href="https://github.com/bootlin/elixir/issues/new?body=TODO%3A%20add%20information%20on%20how%20you%20reached%20the%20error%20here%20and%20validate%20the%20details%20below.%0A%0A---%0A%0ARequest%20date%3A%202025-06-26%2002%3A58%3A44.205175%0APath%3A%20/api/ident/linux/%25E5%2586%2585%25E5%25AD%2598%25E5%258E%258B%25E7%25BC%25A9%25E6%258A%2580%25E6%259C%25AF%0AQuery%20string%3A%20version%3Dv6.14%0AMethod%3A%20GET%0AStatus%20code%3A%20404%20Not%20Found%0AError%20title%3A%20Error%0AError%20details%3A%20Unknown%20project%0A">Report a bug</a></li>
    </ul>
    <details>
        <summary id="report-error-details-header">Error details for a bug report</summary>
        <pre>Request date: 2025-06-26 02:58:44.205175
Path: /api/ident/linux/%E5%86%85%E5%AD%98%E5%8E%8B%E7%BC%A9%E6%8A%80%E6%9C%AF
Query string: version=v6.14
Method: GET
Status code: 404 Not Found
Error title: Error
Error details: Unknown project
</pre>
    </details>
    </div>


                </div>
            </main>
            <footer class="footer">
                <span class="version">
                    <a href="/"></a>
                    <em class="icon-tag"></em>
                </span>
                
                
                <a title="Go to top of the page" class="go-top icon-up screenreader" href="#">
                    Top
                </a>
                <span class="poweredby">powered by
                    <a target="_blank" href="https://github.com/bootlin/elixir/tree/be2e621">
                        Elixir be2e621
                    </a>
                </span>
            </footer>
        </div>
        <script src="/static/script.js?v=16"></script>
        <script src="/static/dynamic-references.js?v=4"></script>
        <script src="/static/autocomplete.js" project=""></script>
    </body>
</html>
2025-06-26 10:58:43 [http-nio-8080-exec-2] WARN  c.c.a.s.a.BootlinSearchService - Bootlin 搜索失败，实体: 内存压缩技术, 状态码: null
2025-06-26 10:58:43 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 10:58:43 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=memory compression, context=什么是内存压缩, version=null
2025-06-26 11:00:18 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='swap', context='# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存'}
2025-06-26 11:00:18 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=swap, context=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存
2025-06-26 11:00:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=swap, contextHint=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存
2025-06-26 11:00:18 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='swap', context='# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存', version='null'}
2025-06-26 11:00:18 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=swap, context=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存, version=null
2025-06-26 11:00:18 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=swap, context=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存
2025-06-26 11:00:18 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 11:00:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Memory_paging
2025-06-26 11:00:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Memory_paging
2025-06-26 11:00:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Memory_paging
2025-06-26 11:00:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 254
2025-06-26 11:00:18 [http-nio-8080-exec-9] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 254, 内容: In computer operating systems, memory paging is a memory management scheme that allows the physical memory used by a program to be non-contiguous. Thi...
2025-06-26 11:00:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=swap, explanationLength=254
2025-06-26 11:00:18 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=swap
2025-06-26 11:00:22 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 11:00:22 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [swap]
2025-06-26 11:00:22 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [swap]
2025-06-26 11:00:22 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=swap, version=v6.14
2025-06-26 11:00:22 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/swap?version=v6.14
2025-06-26 11:00:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 45104
2025-06-26 11:00:24 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 45104
2025-06-26 11:00:24 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=44, 引用=1472
2025-06-26 11:00:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=samples/bpf/xdp_sample_user.c, line=1488, version=v6.14
2025-06-26 11:00:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/lib/csum_ipv6_magic.S, line=26, version=v6.14
2025-06-26 11:00:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/kernel/unwind.c, line=249, version=v6.14
2025-06-26 11:00:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/kernel/unwind.c, line=250, version=v6.14
2025-06-26 11:00:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/minmax.h, line=302, version=v6.14
2025-06-26 11:00:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=swap, url=https://elixir.bootlin.com/api/ident/linux/swap?version=v6.14, 提取到5个代码片段
2025-06-26 11:00:24 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增5个结果
2025-06-26 11:00:24 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到5个结果
2025-06-26 11:00:58 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='swap', context='# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存', version='null'}
2025-06-26 11:00:58 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='swap', context='# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存'}
2025-06-26 11:00:58 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=swap, context=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存, version=null
2025-06-26 11:00:58 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=swap, context=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存
2025-06-26 11:00:58 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=swap, context=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存
2025-06-26 11:00:58 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=swap, contextHint=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存
2025-06-26 11:00:58 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 11:00:58 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Memory_paging
2025-06-26 11:00:58 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Memory_paging
2025-06-26 11:00:58 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Memory_paging
2025-06-26 11:00:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 254
2025-06-26 11:00:59 [http-nio-8080-exec-5] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 254, 内容: In computer operating systems, memory paging is a memory management scheme that allows the physical memory used by a program to be non-contiguous. Thi...
2025-06-26 11:00:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=swap, explanationLength=254
2025-06-26 11:00:59 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=swap
2025-06-26 11:01:02 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 11:01:02 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [swap, swapfile]
2025-06-26 11:01:02 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [swap, swapfile]
2025-06-26 11:01:02 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=swap, version=v6.14
2025-06-26 11:01:02 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/swap?version=v6.14
2025-06-26 11:01:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 45104
2025-06-26 11:01:04 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 45104
2025-06-26 11:01:04 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=44, 引用=1472
2025-06-26 11:01:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=samples/bpf/xdp_sample_user.c, line=1488, version=v6.14
2025-06-26 11:01:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/lib/csum_ipv6_magic.S, line=26, version=v6.14
2025-06-26 11:01:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/kernel/unwind.c, line=249, version=v6.14
2025-06-26 11:01:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/kernel/unwind.c, line=250, version=v6.14
2025-06-26 11:01:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/minmax.h, line=302, version=v6.14
2025-06-26 11:01:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=swap, url=https://elixir.bootlin.com/api/ident/linux/swap?version=v6.14, 提取到5个代码片段
2025-06-26 11:01:04 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=swapfile, version=v6.14
2025-06-26 11:01:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/swapfile?version=v6.14
2025-06-26 11:01:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 384
2025-06-26 11:01:04 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 384
2025-06-26 11:01:04 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=5
2025-06-26 11:01:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=fs/smb/client/cifsfs.c, line=1499, version=v6.14
2025-06-26 11:01:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=fs/smb/client/file.c, line=3175, version=v6.14
2025-06-26 11:01:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=fs/smb/client/file.c, line=3195, version=v6.14
2025-06-26 11:01:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=swapfile, url=https://elixir.bootlin.com/api/ident/linux/swapfile?version=v6.14, 提取到3个代码片段
2025-06-26 11:01:04 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增8个结果
2025-06-26 11:01:04 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到8个结果
2025-06-26 11:01:34 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='swap', context='# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存', version='null'}
2025-06-26 11:01:34 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='swap', context='# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存'}
2025-06-26 11:01:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=swap, context=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存, version=null
2025-06-26 11:01:34 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=swap, context=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存
2025-06-26 11:01:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=swap, context=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存
2025-06-26 11:01:34 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=swap, contextHint=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存
2025-06-26 11:01:34 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 11:01:34 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Memory_paging
2025-06-26 11:01:34 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Memory_paging
2025-06-26 11:01:34 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Memory_paging
2025-06-26 11:01:35 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 254
2025-06-26 11:01:35 [http-nio-8080-exec-8] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 254, 内容: In computer operating systems, memory paging is a memory management scheme that allows the physical memory used by a program to be non-contiguous. Thi...
2025-06-26 11:01:35 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=swap, explanationLength=254
2025-06-26 11:01:35 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=swap
2025-06-26 11:01:39 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 11:01:39 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了3个搜索实体: [swap, memcompression, mem_compression]
2025-06-26 11:01:39 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [swap, memcompression, mem_compression]
2025-06-26 11:01:39 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=swap, version=v6.14
2025-06-26 11:01:39 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/swap?version=v6.14
2025-06-26 11:01:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 45104
2025-06-26 11:01:40 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 45104
2025-06-26 11:01:40 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=44, 引用=1472
2025-06-26 11:01:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=samples/bpf/xdp_sample_user.c, line=1488, version=v6.14
2025-06-26 11:01:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/lib/csum_ipv6_magic.S, line=26, version=v6.14
2025-06-26 11:01:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/kernel/unwind.c, line=249, version=v6.14
2025-06-26 11:01:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/kernel/unwind.c, line=250, version=v6.14
2025-06-26 11:01:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/minmax.h, line=302, version=v6.14
2025-06-26 11:01:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=swap, url=https://elixir.bootlin.com/api/ident/linux/swap?version=v6.14, 提取到5个代码片段
2025-06-26 11:01:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memcompression, version=v6.14
2025-06-26 11:01:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memcompression?version=v6.14
2025-06-26 11:01:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 11:01:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 11:01:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 11:01:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memcompression, url=https://elixir.bootlin.com/api/ident/linux/memcompression?version=v6.14, 提取到0个代码片段
2025-06-26 11:01:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=mem_compression, version=v6.14
2025-06-26 11:01:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/mem_compression?version=v6.14
2025-06-26 11:01:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 11:01:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 11:01:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 11:01:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=mem_compression, url=https://elixir.bootlin.com/api/ident/linux/mem_compression?version=v6.14, 提取到0个代码片段
2025-06-26 11:01:41 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增5个结果
2025-06-26 11:01:41 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到5个结果
2025-06-26 11:01:45 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='zram', context='# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存'}
2025-06-26 11:01:45 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=zram, context=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存
2025-06-26 11:01:45 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=zram, contextHint=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存
2025-06-26 11:01:45 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='zram', context='# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存', version='null'}
2025-06-26 11:01:45 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=zram, context=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存, version=null
2025-06-26 11:01:45 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=zram, context=# Linux内核中的<concept>内存压缩</concept>(Memory Compression)

## 概述

<concept>内存压缩</concept>是Linux内核中的一种内存
2025-06-26 11:01:45 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 11:01:45 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=zram, explanationLength=2938
2025-06-26 11:01:45 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=zram
2025-06-26 11:01:50 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 11:01:50 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [zram, zram]
2025-06-26 11:01:50 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [zram]
2025-06-26 11:01:50 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=zram, version=v6.14
2025-06-26 11:01:50 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/zram?version=v6.14
2025-06-26 11:01:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3528
2025-06-26 11:01:51 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3528
2025-06-26 11:01:51 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=2, 引用=708
2025-06-26 11:01:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=drivers/block/zram/zram_drv.h, line=102, version=v6.14
2025-06-26 11:01:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=drivers/block/zram/zram_drv.c, line=57, version=v6.14
2025-06-26 11:01:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=drivers/block/zram/zram_drv.c, line=57, version=v6.14
2025-06-26 11:01:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=drivers/block/zram/zram_drv.c, line=58, version=v6.14
2025-06-26 11:01:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=zram, url=https://elixir.bootlin.com/api/ident/linux/zram?version=v6.14, 提取到4个代码片段
2025-06-26 11:01:51 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增4个结果
2025-06-26 11:01:51 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到4个结果
2025-06-26 11:19:54 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='什么叫folio conversion'}
2025-06-26 11:19:54 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=什么叫folio conversion
2025-06-26 11:19:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=什么叫folio conversion
2025-06-26 11:19:54 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='什么叫folio conversion', version='null'}
2025-06-26 11:19:54 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=什么叫folio conversion, version=null
2025-06-26 11:19:54 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=什么叫folio conversion
2025-06-26 11:19:54 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1205
2025-06-26 11:19:54 [http-nio-8080-exec-4] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-26 11:19:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-26 11:19:54 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-26 11:19:59 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 11:19:59 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio conversion, folio_transform, folio_mapping, page_to_folio, folio_remap, folio_remapping]
2025-06-26 11:19:59 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion, folio_transform, folio_mapping, page_to_folio, folio_remap]
2025-06-26 11:19:59 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-26 11:19:59 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-26 11:20:00 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 11:20:00 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 11:20:00 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 11:20:00 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-26 11:20:00 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_transform, version=v6.14
2025-06-26 11:20:00 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_transform?version=v6.14
2025-06-26 11:20:00 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 11:20:00 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 11:20:00 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 11:20:00 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_transform, url=https://elixir.bootlin.com/api/ident/linux/folio_transform?version=v6.14, 提取到0个代码片段
2025-06-26 11:20:00 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_mapping, version=v6.14
2025-06-26 11:20:00 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_mapping?version=v6.14
2025-06-26 11:20:01 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 1581
2025-06-26 11:20:01 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 1581
2025-06-26 11:20:01 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=2, 引用=44
2025-06-26 11:20:01 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=mm/util.c, line=851, version=v6.14
2025-06-26 11:20:01 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/s390/kernel/uv.c, line=255, version=v6.14
2025-06-26 11:20:01 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=fs/crypto/inline_crypt.c, line=295, version=v6.14
2025-06-26 11:20:01 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=fs/nfs/write.c, line=826, version=v6.14
2025-06-26 11:20:01 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=mm/util.c, line=839, version=v6.14
2025-06-26 11:20:01 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_mapping, url=https://elixir.bootlin.com/api/ident/linux/folio_mapping?version=v6.14, 提取到5个代码片段
2025-06-26 11:20:01 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_to_folio, version=v6.14
2025-06-26 11:20:01 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_to_folio?version=v6.14
2025-06-26 11:20:01 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 11:20:01 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 11:20:01 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 11:20:01 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_to_folio, url=https://elixir.bootlin.com/api/ident/linux/page_to_folio?version=v6.14, 提取到0个代码片段
2025-06-26 11:20:01 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_remap, version=v6.14
2025-06-26 11:20:01 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_remap?version=v6.14
2025-06-26 11:20:01 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 11:20:01 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 11:20:01 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 11:20:01 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_remap, url=https://elixir.bootlin.com/api/ident/linux/folio_remap?version=v6.14, 提取到0个代码片段
2025-06-26 11:20:01 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增5个结果
2025-06-26 11:20:01 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到5个结果
2025-06-26 13:50:58 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux内核中folio和page有什么区别？'}
2025-06-26 13:50:58 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux内核中folio和page有什么区别？
2025-06-26 13:50:58 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux内核中folio和page有什么区别？
2025-06-26 13:50:58 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='Linux内核中folio和page有什么区别？'}
2025-06-26 13:50:58 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux内核中folio和page有什么区别？', version='null'}
2025-06-26 13:50:58 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=Linux内核中folio和page有什么区别？
2025-06-26 13:50:58 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux内核中folio和page有什么区别？, version=null
2025-06-26 13:50:58 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=Linux内核中folio和page有什么区别？
2025-06-26 13:50:58 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux内核中folio和page有什么区别？
2025-06-26 13:50:58 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1199
2025-06-26 13:50:58 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='Linux内核中folio和page有什么区别？', version='null'}
2025-06-26 13:50:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=Linux内核中folio和page有什么区别？, version=null
2025-06-26 13:50:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=Linux内核中folio和page有什么区别？
2025-06-26 13:50:58 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1198
2025-06-26 13:50:58 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 13:50:58 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 13:50:58 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 13:50:58 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 13:50:58 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 13:50:58 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 13:50:59 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 13:50:59 [http-nio-8080-exec-7] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 13:50:59 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 13:50:59 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 13:51:03 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 13:51:03 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [page]
2025-06-26 13:51:03 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page]
2025-06-26 13:51:03 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 13:51:03 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 13:51:03 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 13:51:03 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio]
2025-06-26 13:51:03 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio]
2025-06-26 13:51:03 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 13:51:03 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 13:51:05 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 13:51:05 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 13:51:05 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 13:51:05 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 13:51:05 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 13:51:05 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 13:51:05 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 13:51:05 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 13:51:05 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 13:51:05 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 13:51:05 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增6个结果
2025-06-26 13:51:05 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到6个结果
2025-06-26 13:51:09 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 13:51:09 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 13:51:09 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 13:51:09 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 13:51:09 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 13:51:09 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 13:51:09 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 13:51:09 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 13:51:09 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 13:51:09 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 13:51:09 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 13:51:09 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 13:51:09 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 13:51:09 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-26 13:51:09 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-26 13:51:22 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux内核中folio和page有什么区别？'}
2025-06-26 13:51:22 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux内核中folio和page有什么区别？
2025-06-26 13:51:22 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux内核中folio和page有什么区别？
2025-06-26 13:51:22 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux内核中folio和page有什么区别？', version='null'}
2025-06-26 13:51:22 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='Linux内核中folio和page有什么区别？'}
2025-06-26 13:51:22 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux内核中folio和page有什么区别？, version=null
2025-06-26 13:51:22 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=Linux内核中folio和page有什么区别？
2025-06-26 13:51:22 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux内核中folio和page有什么区别？
2025-06-26 13:51:22 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=Linux内核中folio和page有什么区别？
2025-06-26 13:51:22 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1199
2025-06-26 13:51:22 [http-nio-8080-exec-5] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 13:51:22 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 13:51:22 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 13:51:22 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 13:51:22 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 13:51:22 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 13:51:22 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='Linux内核中folio和page有什么区别？', version='null'}
2025-06-26 13:51:22 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=Linux内核中folio和page有什么区别？, version=null
2025-06-26 13:51:22 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=Linux内核中folio和page有什么区别？
2025-06-26 13:51:22 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1198
2025-06-26 13:51:22 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 13:51:22 [http-nio-8080-exec-8] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 13:51:22 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 13:51:22 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 13:51:25 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 13:51:25 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio]
2025-06-26 13:51:25 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio]
2025-06-26 13:51:25 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 13:51:25 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 13:51:26 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 13:51:26 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [page, PFN]
2025-06-26 13:51:26 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page, PFN]
2025-06-26 13:51:26 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 13:51:26 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 13:51:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 13:51:27 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 13:51:27 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 13:51:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 13:51:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 13:51:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 13:51:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 13:51:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 13:51:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 13:51:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 13:51:27 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增6个结果
2025-06-26 13:51:27 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到6个结果
2025-06-26 13:51:32 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 13:51:32 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 13:51:32 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 13:51:32 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 13:51:32 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 13:51:32 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 13:51:32 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 13:51:32 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 13:51:32 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 13:51:32 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 13:51:32 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 13:51:32 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 13:51:32 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 13:51:32 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=PFN, version=v6.14
2025-06-26 13:51:32 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14
2025-06-26 13:51:33 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 550
2025-06-26 13:51:33 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 550
2025-06-26 13:51:33 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=2, 引用=14
2025-06-26 13:51:33 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=236, version=v6.14
2025-06-26 13:51:33 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/kernel/phys2virt.S, line=32, version=v6.14
2025-06-26 13:51:33 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sparc/include/asm/leon.h, line=254, version=v6.14
2025-06-26 13:51:33 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第254行的代码元素
2025-06-26 13:51:33 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=PFN, url=https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14, 提取到2个代码片段
2025-06-26 13:51:33 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增9个结果
2025-06-26 13:51:33 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到9个结果
2025-06-26 14:01:23 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 14:01:23 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 14:01:23 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:01:23 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:23 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:23 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:23 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1266
2025-06-26 14:01:23 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 14:01:23 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 14:01:23 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 14:01:23 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:23 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:01:23 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:23 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:23 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:23 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 14:01:23 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 14:01:23 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:01:23 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:23 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 14:01:23 [http-nio-8080-exec-10] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-26 14:01:23 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-26 14:01:23 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-26 14:01:23 [http-nio-8080-exec-7] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-26 14:01:23 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-26 14:01:23 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-26 14:01:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-26 14:01:23 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-26 14:01:23 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-26 14:01:28 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:01:28 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-26 14:01:28 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-26 14:01:28 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-26 14:01:28 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-26 14:01:28 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:01:28 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [vma_alloc_folio, vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, alloc_vma_folio]
2025-06-26 14:01:28 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, alloc_vma_folio]
2025-06-26 14:01:28 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 14:01:28 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 14:01:29 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:01:29 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:01:29 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:01:29 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-26 14:01:29 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 14:01:29 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:01:30 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 14:01:30 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 14:01:30 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 14:01:30 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 14:01:30 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 14:01:30 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 14:01:30 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 14:01:30 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 14:01:30 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 14:01:30 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-26 14:01:30 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-26 14:01:30 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:01:30 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_folio, alloc_pages_in_vma, vma_page_alloc, vma_folio_alloc]
2025-06-26 14:01:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_folio, alloc_pages_in_vma, vma_page_alloc]
2025-06-26 14:01:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-26 14:01:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-26 14:01:30 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:01:30 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:01:30 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:01:30 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-26 14:01:30 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-26 14:01:30 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-26 14:01:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:01:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:01:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:01:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 14:01:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-26 14:01:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-26 14:01:30 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:01:30 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:01:30 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:01:30 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 14:01:30 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_vma_folio, version=v6.14
2025-06-26 14:01:30 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_vma_folio?version=v6.14
2025-06-26 14:01:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:01:31 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:01:31 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:01:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-26 14:01:31 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 14:01:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 14:01:31 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:01:31 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:01:31 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:01:31 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_vma_folio, url=https://elixir.bootlin.com/api/ident/linux/alloc_vma_folio?version=v6.14, 提取到0个代码片段
2025-06-26 14:01:31 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 14:01:31 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-26 14:01:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 14:01:31 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 14:01:31 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 14:01:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 14:01:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 14:01:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 14:01:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 14:01:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 14:01:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 14:01:31 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-26 14:01:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-26 14:01:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:01:31 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:01:31 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:01:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-26 14:01:31 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_page_alloc, version=v6.14
2025-06-26 14:01:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14
2025-06-26 14:01:32 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:01:32 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:01:32 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:01:32 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_page_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 14:01:32 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 14:01:32 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-26 14:01:59 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 14:01:59 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 14:01:59 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 14:01:59 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:01:59 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:59 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:59 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:59 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1266
2025-06-26 14:01:59 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 14:01:59 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 14:01:59 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:01:59 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:59 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 14:01:59 [http-nio-8080-exec-1] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-26 14:01:59 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-26 14:01:59 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-26 14:01:59 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-26 14:01:59 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-26 14:01:59 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-26 14:01:59 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-26 14:01:59 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-26 14:01:59 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-26 14:01:59 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 14:01:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:01:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:01:59 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 14:02:03 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:02:03 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-26 14:02:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-26 14:02:03 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-26 14:02:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-26 14:02:04 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:02:04 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc, vma_folio_alloc]
2025-06-26 14:02:04 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc]
2025-06-26 14:02:04 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-26 14:02:04 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-26 14:02:04 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:02:04 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [vma_alloc_folio, vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, alloc_vma_folio, vma_folio_allocation]
2025-06-26 14:02:04 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, alloc_vma_folio, vma_folio_allocation]
2025-06-26 14:02:04 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 14:02:04 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 14:02:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:02:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:02:05 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:02:05 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-26 14:02:05 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 14:02:05 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:02:05 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:02:05 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:02:05 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:02:05 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 14:02:05 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-26 14:02:05 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-26 14:02:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 14:02:05 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 14:02:05 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 14:02:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 14:02:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 14:02:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 14:02:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 14:02:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 14:02:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 14:02:05 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-26 14:02:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-26 14:02:05 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:02:05 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:02:05 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:02:05 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-26 14:02:05 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_page, version=v6.14
2025-06-26 14:02:05 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14
2025-06-26 14:02:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:02:05 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:02:05 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:02:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-26 14:02:05 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-26 14:02:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-26 14:02:05 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:02:05 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:02:05 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:02:05 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_page, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:02:05 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-26 14:02:05 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-26 14:02:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:02:06 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:02:06 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:02:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 14:02:06 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_vma_folio, version=v6.14
2025-06-26 14:02:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_vma_folio?version=v6.14
2025-06-26 14:02:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:02:06 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:02:06 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:02:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-26 14:02:06 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_page_alloc, version=v6.14
2025-06-26 14:02:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14
2025-06-26 14:02:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:02:06 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:02:06 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:02:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_vma_folio, url=https://elixir.bootlin.com/api/ident/linux/alloc_vma_folio?version=v6.14, 提取到0个代码片段
2025-06-26 14:02:06 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_allocation, version=v6.14
2025-06-26 14:02:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_allocation?version=v6.14
2025-06-26 14:02:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:02:06 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:02:06 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:02:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_page_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 14:02:06 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 14:02:06 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:02:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:02:06 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:02:06 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:02:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_allocation, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_allocation?version=v6.14, 提取到0个代码片段
2025-06-26 14:02:06 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 14:02:06 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-26 14:22:11 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context='# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep', version='null'}
2025-06-26 14:22:11 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context='# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep'}
2025-06-26 14:22:11 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context=# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep, version=null
2025-06-26 14:22:11 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context=# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep
2025-06-26 14:22:11 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context=# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep
2025-06-26 14:22:11 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint=# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep
2025-06-26 14:22:11 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1275
2025-06-26 14:22:11 [http-nio-8080-exec-3] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-26 14:22:11 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-26 14:22:11 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-26 14:22:17 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:22:17 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [Folio, page_folio, compound_page, large_page, page_container, folio_page]
2025-06-26 14:22:17 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio, page_folio, compound_page, large_page, page_container]
2025-06-26 14:22:17 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-26 14:22:17 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-26 14:22:18 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:22:18 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:22:18 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:22:18 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-26 14:22:18 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 14:22:18 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 14:22:19 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 14:22:19 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 14:22:19 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 14:22:19 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 14:22:19 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 14:22:19 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 14:22:19 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 14:22:19 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 14:22:19 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 14:22:19 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 14:22:19 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:22:19 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:22:19 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:22:19 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:22:19 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 14:22:19 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 14:22:19 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:22:19 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:22:19 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:22:19 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:22:19 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_container, version=v6.14
2025-06-26 14:22:19 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_container?version=v6.14
2025-06-26 14:22:20 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:22:20 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:22:20 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:22:20 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_container, url=https://elixir.bootlin.com/api/ident/linux/page_container?version=v6.14, 提取到0个代码片段
2025-06-26 14:22:20 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增4个结果
2025-06-26 14:22:20 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到4个结果
2025-06-26 14:22:48 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context='# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep'}
2025-06-26 14:22:48 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context=# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep
2025-06-26 14:22:48 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint=# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep
2025-06-26 14:22:48 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context='# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep', version='null'}
2025-06-26 14:22:48 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context=# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep, version=null
2025-06-26 14:22:48 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context=# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep
2025-06-26 14:22:48 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1275
2025-06-26 14:22:48 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-26 14:22:48 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-26 14:22:48 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-26 14:22:53 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:22:53 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [Folio, page_folio, compound_page, large_page, memory_folio, folio_page]
2025-06-26 14:22:53 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio, page_folio, compound_page, large_page, memory_folio]
2025-06-26 14:22:53 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-26 14:22:53 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-26 14:22:54 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:22:54 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:22:54 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:22:54 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-26 14:22:54 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 14:22:54 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 14:22:54 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 14:22:54 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 14:22:54 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 14:22:54 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 14:22:54 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 14:22:54 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 14:22:54 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 14:22:54 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 14:22:54 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 14:22:54 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 14:22:55 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:22:55 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:22:55 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:22:55 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:22:55 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 14:22:55 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 14:22:55 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:22:55 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:22:55 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:22:55 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:22:55 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-26 14:22:55 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-26 14:22:55 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:22:55 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:22:55 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:22:55 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-26 14:22:55 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增4个结果
2025-06-26 14:22:55 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到4个结果
2025-06-26 14:23:13 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context='# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep'}
2025-06-26 14:23:13 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context='# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep', version='null'}
2025-06-26 14:23:13 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context=# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep
2025-06-26 14:23:13 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context=# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep, version=null
2025-06-26 14:23:13 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint=# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep
2025-06-26 14:23:13 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context=# Folio Conversion in Linux Kernel

## 什么是<concept>Folio</concept>

在Linux内核中，<concept>Folio</concep
2025-06-26 14:23:13 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1275
2025-06-26 14:23:13 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-26 14:23:13 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-26 14:23:13 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-26 14:23:18 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:23:18 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [Folio, page_folio, compound_page, folio_page, memory_folio, struct_folio]
2025-06-26 14:23:18 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio, page_folio, compound_page, folio_page, memory_folio]
2025-06-26 14:23:18 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-26 14:23:18 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-26 14:23:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:23:19 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:23:19 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:23:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-26 14:23:19 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 14:23:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 14:23:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 14:23:19 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 14:23:19 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 14:23:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 14:23:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 14:23:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 14:23:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 14:23:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 14:23:19 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 14:23:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 14:23:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:23:20 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:23:20 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:23:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:23:20 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 14:23:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 14:23:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 14:23:20 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 14:23:20 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 14:23:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 14:23:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 14:23:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 14:23:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 14:23:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 14:23:20 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-26 14:23:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-26 14:23:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:23:20 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:23:20 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:23:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-26 14:23:20 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增8个结果
2025-06-26 14:23:20 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到8个结果
2025-06-26 14:23:36 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio？'}
2025-06-26 14:23:36 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio？
2025-06-26 14:23:36 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio？
2025-06-26 14:23:36 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio？', version='null'}
2025-06-26 14:23:36 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio？, version=null
2025-06-26 14:23:36 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio？
2025-06-26 14:23:36 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1184
2025-06-26 14:23:36 [http-nio-8080-exec-4] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 14:23:36 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 14:23:36 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 14:23:40 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:23:40 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, folio_struct]
2025-06-26 14:23:40 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 14:23:40 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 14:23:40 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 14:23:43 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 14:23:43 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 14:23:43 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 14:23:43 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 14:23:43 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 14:23:43 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:23:43 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:23:43 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 14:23:43 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 14:23:43 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 14:23:43 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 14:23:43 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 14:23:44 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 14:23:44 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 14:23:44 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 14:23:44 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 14:23:44 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 14:23:44 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 14:23:44 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 14:23:44 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 14:23:44 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 14:23:44 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 14:23:45 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:23:45 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:23:45 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:23:45 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:23:45 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 14:23:45 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 14:23:45 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:23:45 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:23:45 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:23:45 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:23:45 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 14:23:45 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 14:23:45 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 14:23:45 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 14:23:45 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 14:23:45 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 14:23:45 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 14:23:45 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 14:23:45 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 14:23:45 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 14:23:45 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 14:23:45 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 14:24:18 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='folio和page的区别是？'}
2025-06-26 14:24:18 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=folio和page的区别是？
2025-06-26 14:24:18 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=folio和page的区别是？
2025-06-26 14:24:18 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='folio和page的区别是？'}
2025-06-26 14:24:18 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='folio和page的区别是？', version='null'}
2025-06-26 14:24:18 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=folio和page的区别是？
2025-06-26 14:24:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=folio和page的区别是？, version=null
2025-06-26 14:24:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=folio和page的区别是？
2025-06-26 14:24:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=folio和page的区别是？
2025-06-26 14:24:18 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1190
2025-06-26 14:24:18 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='folio和page的区别是？', version='null'}
2025-06-26 14:24:18 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=folio和page的区别是？, version=null
2025-06-26 14:24:18 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=folio和page的区别是？
2025-06-26 14:24:18 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1189
2025-06-26 14:24:18 [http-nio-8080-exec-5] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 14:24:18 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 14:24:18 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 14:24:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 14:24:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 14:24:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 14:24:19 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 14:24:19 [http-nio-8080-exec-9] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 14:24:19 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 14:24:19 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 14:24:23 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:24:23 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio]
2025-06-26 14:24:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio]
2025-06-26 14:24:23 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 14:24:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 14:24:23 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:24:23 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [page]
2025-06-26 14:24:23 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page]
2025-06-26 14:24:23 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 14:24:23 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 14:24:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 14:24:26 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 14:24:26 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 14:24:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 14:24:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 14:24:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:24:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:24:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 14:24:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 14:24:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 14:24:26 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增6个结果
2025-06-26 14:24:26 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到6个结果
2025-06-26 14:24:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 14:24:32 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 14:24:32 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 14:24:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 14:24:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 14:24:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 14:24:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 14:24:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 14:24:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 14:24:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 14:24:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 14:24:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 14:24:32 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 14:24:32 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-26 14:24:32 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-26 14:25:33 [http-nio-8080-exec-6] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-26 14:25:33 [http-nio-8080-exec-7] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-26 14:25:33 [http-nio-8080-exec-5] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-26 14:27:52 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='A folio in an operating system'}
2025-06-26 14:27:52 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=A folio in an operating system
2025-06-26 14:27:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=A folio in an operating system
2025-06-26 14:27:52 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收三元组搜索请求: TripleSearchRequestDTO{concept='folio', context='folio是Linux内核的重要组件，需要分析其相关概念和关系。'}
2025-06-26 14:27:52 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 开始搜索三元组: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
2025-06-26 14:27:52 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索相关实体: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
Creating a new SqlSession
SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@2027c77] was not registered for synchronization because synchronization is not active
JDBC Connection [HikariProxyConnection@141609139 wrapping com.mysql.cj.jdbc.ConnectionImpl@398be39c] will not be managed by Spring
==>  Preparing: SELECT * FROM entities_extraction WHERE name_en = ?
==> Parameters: folio(String)
2025-06-26 14:27:52 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='A folio in an operating system', version='null'}
2025-06-26 14:27:52 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=A folio in an operating system, version=null
2025-06-26 14:27:52 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=A folio in an operating system
2025-06-26 14:27:52 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1205
2025-06-26 14:27:52 [http-nio-8080-exec-3] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 14:27:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 14:27:52 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
<==    Columns: eid, name_en, name_cn, source, definition_en, definition_cn, aliases, rel_desc, wikidata_id, create_time, update_time, feature_id
<==        Row: 57588, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:47, 2025-06-18 10:17:47, 33927
<==        Row: 57462, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:42, 2025-06-18 10:17:42, 33943
<==        Row: 53621, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34652
<==        Row: 53616, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34653
<==        Row: 45060, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:39, 2025-06-18 10:04:39, 36284
<==        Row: 44967, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36294
<==        Row: 44962, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36295
<==        Row: 41754, Folio, null, JSONL_EXTRACTION_6.1, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:02:50, 2025-06-18 10:02:50, 36894
<==        Row: 34240, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38350
<==        Row: 34231, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38351
<==        Row: 34221, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38353
<==        Row: 34207, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38355
<==        Row: 30507, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:42, 2025-06-18 09:56:42, 39099
<==        Row: 30368, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:37, 2025-06-18 09:56:37, 39123
<==        Row: 27246, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:55, 2025-06-18 09:54:55, 39729
<==        Row: 27197, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:53, 2025-06-18 09:54:53, 39738
<==        Row: 27097, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:50, 2025-06-18 09:54:50, 39758
<==        Row: 23515, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40454
<==        Row: 23511, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40455
<==        Row: 23506, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40456
<==        Row: 23500, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40457
<==        Row: 23457, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40468
<==        Row: 23433, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40471
<==        Row: 20228, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41114
<==        Row: 20218, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41116
<==        Row: 20210, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41117
<==        Row: 20202, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41119
<==        Row: 20193, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41120
<==        Row: 20191, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41121
<==        Row: 20186, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:52, 2025-06-18 09:50:52, 41122
<==        Row: 17391, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41675
<==        Row: 17379, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41677
<==        Row: 17354, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:20, 2025-06-18 09:49:20, 41682
<==        Row: 13712, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42404
<==        Row: 13700, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42407
<==        Row: 13619, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:17, 2025-06-18 09:47:17, 42422
<==        Row: 13600, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42426
<==        Row: 13598, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42427
<==        Row: 13578, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42431
<==        Row: 10759, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:44, 2025-06-18 09:45:44, 43004
<==        Row: 10512, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:35, 2025-06-18 09:45:35, 43056
<==        Row: 10459, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:34, 2025-06-18 09:45:34, 43065
<==        Row: 7527, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:46, 2025-06-17 22:27:46, 43667
<==        Row: 7385, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:42, 2025-06-17 22:27:42, 43689
<==        Row: 7324, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:40, 2025-06-17 22:27:40, 43702
<==        Row: 1283, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 17:20:59, 2025-01-19 17:20:59, 44490
<==        Row: 1238, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 15:15:44, 2025-01-19 15:15:44, 44498
<==        Row: 972, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 03:33:02, 2025-01-19 03:33:02, 44546
<==        Row: 913, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:47:37, 2025-01-19 00:47:37, 44559
<==        Row: 903, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:37:47, 2025-01-19 00:37:47, 44560
<==        Row: 900, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:31:26, 2025-01-19 00:31:26, 44561
<==        Row: 880, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 23:44:45, 2025-01-18 23:44:45, 44565
<==        Row: 860, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 22:55:04, 2025-01-18 22:55:04, 44569
<==        Row: 3186, folio, null, JSONL_EXTRACTION_6.12, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:25:19, 2025-06-17 22:25:19, 44577
<==      Total: 54
Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@2027c77]
2025-06-26 14:27:52 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索到20个唯一相关实体
2025-06-26 14:27:52 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 找到20个相关实体
2025-06-26 14:27:52 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 提取到20个feature描述
2025-06-26 14:27:52 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第1批，包含5个feature描述
2025-06-26 14:27:52 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2932
2025-06-26 14:27:56 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:27:56 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, memory_folio, folio_page]
2025-06-26 14:27:56 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, memory_folio]
2025-06-26 14:27:56 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 14:27:56 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 14:27:58 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 14:27:58 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 14:27:58 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 14:27:58 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 14:27:59 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 14:27:59 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 14:27:59 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 14:27:59 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:27:59 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:27:59 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:27:59 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 14:27:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 14:28:00 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:28:00 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:28:00 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:28:00 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:28:00 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-26 14:28:00 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-26 14:28:00 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:28:00 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:28:00 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:28:00 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-26 14:28:00 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-26 14:28:00 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-26 14:28:01 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:28:02 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第2批，包含5个feature描述
2025-06-26 14:28:02 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2786
2025-06-26 14:28:11 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:28:12 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第3批，包含5个feature描述
2025-06-26 14:28:12 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2590
2025-06-26 14:28:20 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:28:21 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第4批，包含5个feature描述
2025-06-26 14:28:21 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2608
2025-06-26 14:28:28 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:28:28 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 三元组搜索完成，共提取24个结果
2025-06-26 14:28:28 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 三元组搜索成功，找到24个结果
2025-06-26 14:28:36 [http-nio-8080-exec-6] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit=''}
2025-06-26 14:28:36 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=
2025-06-26 14:28:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=
2025-06-26 14:28:36 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=
2025-06-26 14:28:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 568
2025-06-26 14:28:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-26 14:28:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-26 14:28:36 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-26 14:28:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-26 14:28:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-26 14:28:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.9-rc4
2025-06-26 14:28:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-26 14:28:36 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=309, endLine=383, snippetLength=1575
2025-06-26 14:28:36 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-26 14:28:36 [http-nio-8080-exec-6] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-26 14:28:38 [http-nio-8080-exec-7] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='05c5323b2a344c19c51cd1b91a4ab9ae90853794'}
2025-06-26 14:28:38 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-26 14:28:38 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-26 14:28:38 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-26 14:28:38 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 698
2025-06-26 14:28:38 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-26 14:28:38 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-26 14:28:38 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-26 14:28:38 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-26 14:28:38 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-26 14:28:38 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.9-rc4
2025-06-26 14:28:38 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-26 14:28:38 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=309, endLine=383, snippetLength=1575
2025-06-26 14:28:38 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-26 14:28:38 [http-nio-8080-exec-7] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-26 14:28:39 [http-nio-8080-exec-5] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='21c690a349baab895dc68ab70d291e1598d7109d'}
2025-06-26 14:28:39 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-26 14:28:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-26 14:28:39 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-26 14:28:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 586
2025-06-26 14:28:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-26 14:28:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-26 14:28:39 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-26 14:28:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.6-rc4
2025-06-26 14:28:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.6-rc4
2025-06-26 14:28:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.6-rc4
2025-06-26 14:28:39 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-26 14:28:39 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=293, endLine=361, snippetLength=1454
2025-06-26 14:28:39 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-26 14:28:39 [http-nio-8080-exec-5] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-26 14:28:39 [http-nio-8080-exec-9] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='1d44f2e6d178163a94980fd5f9a4b04b6b36535b'}
2025-06-26 14:28:39 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=1d44f2e6d178163a94980fd5f9a4b04b6b36535b
2025-06-26 14:28:39 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=1d44f2e6d178163a94980fd5f9a4b04b6b36535b
2025-06-26 14:28:39 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=1d44f2e6d178163a94980fd5f9a4b04b6b36535b
2025-06-26 14:28:39 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 586
2025-06-26 14:28:39 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-26 14:28:39 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-26 14:28:39 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=131521, commitId='85a1333417a7561c1d10a77d6c873a37e6ea63a0', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:47', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: use dedicated entry for swap in folio', added=15, deleted=13, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-26 14:28:39 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-26 14:28:39 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-26 14:28:39 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.5-rc4
2025-06-26 14:28:39 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-26 14:28:39 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=301, endLine=367, snippetLength=1444
2025-06-26 14:28:39 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=131521, commitId='85a1333417a7561c1d10a77d6c873a37e6ea63a0', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:47', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: use dedicated entry for swap in folio', added=15, deleted=13, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-26 14:28:39 [http-nio-8080-exec-9] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=131521, commitId='85a1333417a7561c1d10a77d6c873a37e6ea63a0', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:47', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: use dedicated entry for swap in folio', added=15, deleted=13, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-26 14:28:40 [http-nio-8080-exec-2] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='85a1333417a7561c1d10a77d6c873a37e6ea63a0'}
2025-06-26 14:28:40 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=85a1333417a7561c1d10a77d6c873a37e6ea63a0
2025-06-26 14:28:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=85a1333417a7561c1d10a77d6c873a37e6ea63a0
2025-06-26 14:28:40 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=85a1333417a7561c1d10a77d6c873a37e6ea63a0
2025-06-26 14:28:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 594
2025-06-26 14:28:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-26 14:28:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-26 14:28:40 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=131522, commitId='cfeed8ffe55b37fa10286aaaa1369da00cb88440', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:46', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: stop using page->private on tail pages for THP_SWAP', added=26, deleted=28, company='redhat.com', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-26 14:28:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-26 14:28:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-26 14:28:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.5-rc4
2025-06-26 14:28:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-26 14:28:40 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=301, endLine=367, snippetLength=1444
2025-06-26 14:28:40 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=131522, commitId='cfeed8ffe55b37fa10286aaaa1369da00cb88440', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:46', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: stop using page->private on tail pages for THP_SWAP', added=26, deleted=28, company='redhat.com', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-26 14:28:40 [http-nio-8080-exec-2] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=131522, commitId='cfeed8ffe55b37fa10286aaaa1369da00cb88440', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:46', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: stop using page->private on tail pages for THP_SWAP', added=26, deleted=28, company='redhat.com', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-26 14:37:08 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 14:37:08 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 14:37:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:37:08 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:37:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:37:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:37:08 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1266
2025-06-26 14:37:08 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 14:37:08 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 14:37:08 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 14:37:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:37:08 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:37:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:37:08 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:37:08 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:37:08 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 14:37:08 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:37:08 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 14:37:08 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:37:08 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:37:08 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 14:37:08 [http-nio-8080-exec-10] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-26 14:37:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-26 14:37:08 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-26 14:37:08 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-26 14:37:08 [http-nio-8080-exec-5] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-26 14:37:08 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-26 14:37:08 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-26 14:37:08 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-26 14:37:08 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-26 14:37:13 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:37:13 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, alloc_pages_in_vma, vma_pages_alloc, vma_page_allocation, vma_mem_alloc]
2025-06-26 14:37:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, alloc_pages_in_vma, vma_pages_alloc, vma_page_allocation]
2025-06-26 14:37:13 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-26 14:37:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-26 14:37:13 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:37:13 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [vma_alloc_folio, vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, __vma_alloc_folio, vma_alloc_folio_gfp]
2025-06-26 14:37:13 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, __vma_alloc_folio, vma_alloc_folio_gfp]
2025-06-26 14:37:13 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 14:37:13 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 14:37:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:37:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:37:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:37:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 14:37:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-26 14:37:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-26 14:37:14 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 14:37:14 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 14:37:14 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 14:37:14 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 14:37:14 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 14:37:14 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 14:37:14 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 14:37:14 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 14:37:14 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 14:37:14 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-26 14:37:14 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-26 14:37:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:37:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:37:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:37:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-26 14:37:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-26 14:37:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-26 14:37:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:37:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:37:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:37:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-26 14:37:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_pages_alloc, version=v6.14
2025-06-26 14:37:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_pages_alloc?version=v6.14
2025-06-26 14:37:15 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:37:15 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-26 14:37:15 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-26 14:37:15 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-26 14:37:15 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-26 14:37:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:37:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:37:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:37:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_pages_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_pages_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 14:37:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_page_allocation, version=v6.14
2025-06-26 14:37:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_page_allocation?version=v6.14
2025-06-26 14:37:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:37:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:37:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:37:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_page_allocation, url=https://elixir.bootlin.com/api/ident/linux/vma_page_allocation?version=v6.14, 提取到0个代码片段
2025-06-26 14:37:15 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 14:37:15 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:37:15 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:37:15 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:37:15 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:37:15 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-26 14:37:15 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-26 14:37:15 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-26 14:37:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:37:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:37:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:37:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 14:37:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=__vma_alloc_folio, version=v6.14
2025-06-26 14:37:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/__vma_alloc_folio?version=v6.14
2025-06-26 14:37:16 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:37:16 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:37:16 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:37:16 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-26 14:37:16 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 14:37:16 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:37:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:37:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:37:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:37:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=__vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/__vma_alloc_folio?version=v6.14, 提取到0个代码片段
2025-06-26 14:37:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio_gfp, version=v6.14
2025-06-26 14:37:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio_gfp?version=v6.14
2025-06-26 14:37:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:37:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:37:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:37:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio_gfp, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio_gfp?version=v6.14, 提取到0个代码片段
2025-06-26 14:37:16 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 14:37:16 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-26 14:40:28 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 14:40:28 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 14:40:28 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 14:40:28 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 14:40:28 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 14:40:28 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 14:40:28 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 14:40:28 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 14:40:28 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 14:40:28 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 14:40:33 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:40:33 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, memory_folio, folio_page]
2025-06-26 14:40:33 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, memory_folio]
2025-06-26 14:40:33 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 14:40:33 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 14:40:35 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 14:40:35 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 14:40:35 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 14:40:35 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 14:40:35 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 14:40:35 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:40:35 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:40:35 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 14:40:35 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 14:40:35 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 14:40:35 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 14:40:35 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 14:40:35 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 14:40:35 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 14:40:35 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 14:40:35 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 14:40:35 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 14:40:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 14:40:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 14:40:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 14:40:36 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 14:40:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 14:40:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:40:36 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:40:36 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:40:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:40:36 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 14:40:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 14:40:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:40:36 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:40:36 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:40:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:40:36 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-26 14:40:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-26 14:40:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:40:36 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:40:36 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:40:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-26 14:40:36 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-26 14:40:36 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-26 14:41:18 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 14:41:18 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 14:41:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:41:18 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:41:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:41:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:41:18 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1266
2025-06-26 14:41:18 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 14:41:18 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 14:41:18 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:41:18 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 14:41:18 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:41:18 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:41:18 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:41:18 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:41:18 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 14:41:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:41:18 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 14:41:18 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:41:18 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 14:41:18 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 14:41:18 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-26 14:41:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-26 14:41:18 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-26 14:41:18 [http-nio-8080-exec-10] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-26 14:41:18 [http-nio-8080-exec-3] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-26 14:41:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-26 14:41:18 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-26 14:41:18 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-26 14:41:18 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-26 14:41:23 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:41:23 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-26 14:41:23 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-26 14:41:23 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-26 14:41:23 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-26 14:41:24 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:41:24 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_folio, __alloc_pages_vma, alloc_pages_vma_gfp, vma_page_alloc]
2025-06-26 14:41:24 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_folio, __alloc_pages_vma, alloc_pages_vma_gfp]
2025-06-26 14:41:24 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-26 14:41:24 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-26 14:41:24 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:41:24 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:41:24 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:41:24 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-26 14:41:24 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 14:41:24 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 14:41:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:41:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:41:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:41:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 14:41:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-26 14:41:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-26 14:41:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:41:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:41:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:41:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-26 14:41:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 14:41:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 14:41:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 14:41:26 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 14:41:26 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 14:41:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 14:41:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 14:41:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 14:41:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 14:41:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 14:41:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 14:41:26 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=__alloc_pages_vma, version=v6.14
2025-06-26 14:41:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/__alloc_pages_vma?version=v6.14
2025-06-26 14:41:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:41:26 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:41:26 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:41:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=__alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/__alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 14:41:26 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma_gfp, version=v6.14
2025-06-26 14:41:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma_gfp?version=v6.14
2025-06-26 14:41:26 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:41:26 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [vma_alloc_folio, vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, __vma_alloc_folio, folio_alloc_vma]
2025-06-26 14:41:26 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, __vma_alloc_folio, folio_alloc_vma]
2025-06-26 14:41:26 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 14:41:26 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 14:41:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:41:26 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:41:26 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:41:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma_gfp, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma_gfp?version=v6.14, 提取到0个代码片段
2025-06-26 14:41:26 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 14:41:26 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-26 14:41:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 14:41:27 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 14:41:27 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 14:41:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 14:41:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 14:41:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 14:41:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 14:41:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 14:41:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 14:41:27 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-26 14:41:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-26 14:41:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:41:27 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:41:27 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:41:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-26 14:41:27 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-26 14:41:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-26 14:41:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:41:27 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:41:27 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:41:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 14:41:27 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=__vma_alloc_folio, version=v6.14
2025-06-26 14:41:27 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/__vma_alloc_folio?version=v6.14
2025-06-26 14:41:28 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:41:28 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:41:28 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:41:28 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=__vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/__vma_alloc_folio?version=v6.14, 提取到0个代码片段
2025-06-26 14:41:28 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_alloc_vma, version=v6.14
2025-06-26 14:41:28 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_alloc_vma?version=v6.14
2025-06-26 14:41:28 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:41:28 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:41:28 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:41:28 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_alloc_vma, url=https://elixir.bootlin.com/api/ident/linux/folio_alloc_vma?version=v6.14, 提取到0个代码片段
2025-06-26 14:41:28 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 14:41:28 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-26 14:42:21 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L'}
2025-06-26 14:42:21 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L', version='null'}
2025-06-26 14:42:21 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 14:42:21 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 14:42:21 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L, version=null
2025-06-26 14:42:21 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 14:42:21 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 14:42:21 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 14:42:21 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 14:42:21 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 14:42:23 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 14:42:23 [http-nio-8080-exec-3] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 14:42:23 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 14:42:23 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 14:42:25 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:42:25 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [Page, page]
2025-06-26 14:42:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, page]
2025-06-26 14:42:25 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 14:42:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 14:42:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 14:42:27 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 14:42:27 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 14:42:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 14:42:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 14:42:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 14:42:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 14:42:27 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 14:42:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 14:42:31 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 14:42:31 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 14:42:31 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 14:42:31 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 14:42:31 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 14:42:31 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 14:42:31 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 14:42:31 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 14:42:31 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 14:42:31 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 14:42:31 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 14:42:31 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 14:42:31 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 14:42:31 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-26 14:42:31 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-26 14:42:51 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='# Linux内核中folio conversion的alloc_pages_vma到vma_alloc_folio变更

## 概述

在Linux内核的<concept>memory manage', version='null'}
2025-06-26 14:42:51 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='# Linux内核中folio conversion的alloc_pages_vma到vma_alloc_folio变更

## 概述

在Linux内核的<concept>memory manage'}
2025-06-26 14:42:51 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=# Linux内核中folio conversion的alloc_pages_vma到vma_alloc_folio变更

## 概述

在Linux内核的<concept>memory manage, version=null
2025-06-26 14:42:51 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=# Linux内核中folio conversion的alloc_pages_vma到vma_alloc_folio变更

## 概述

在Linux内核的<concept>memory manage
2025-06-26 14:42:51 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=# Linux内核中folio conversion的alloc_pages_vma到vma_alloc_folio变更

## 概述

在Linux内核的<concept>memory manage
2025-06-26 14:42:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=# Linux内核中folio conversion的alloc_pages_vma到vma_alloc_folio变更

## 概述

在Linux内核的<concept>memory manage
2025-06-26 14:42:51 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1275
2025-06-26 14:42:51 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 14:42:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 14:42:51 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 14:42:56 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:42:56 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, memory_folio, folio_page, vma_folio]
2025-06-26 14:42:56 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, memory_folio, folio_page]
2025-06-26 14:42:56 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 14:42:56 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 14:42:58 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 14:42:58 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 14:42:58 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 14:42:58 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 14:42:58 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 14:42:58 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:42:58 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:42:58 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 14:42:58 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 14:42:58 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 14:42:58 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 14:42:58 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 14:42:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 14:42:59 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 14:42:59 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 14:42:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 14:42:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 14:42:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 14:42:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 14:42:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 14:42:59 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 14:42:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 14:42:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:42:59 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:42:59 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:42:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:42:59 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-26 14:42:59 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-26 14:43:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:43:00 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:43:00 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:43:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-26 14:43:00 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 14:43:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 14:43:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 14:43:00 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 14:43:00 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 14:43:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 14:43:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 14:43:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 14:43:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 14:43:00 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 14:43:00 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 14:43:00 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 14:44:23 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 14:44:23 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 14:44:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 14:44:23 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 14:44:23 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 14:44:23 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 14:44:23 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 14:44:23 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 14:44:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 14:44:23 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 14:44:27 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:44:27 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, folio_struct]
2025-06-26 14:44:27 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 14:44:27 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 14:44:27 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 14:44:30 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 14:44:30 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 14:44:30 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 14:44:30 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 14:44:30 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 14:44:30 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 14:44:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 14:44:31 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:44:31 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:44:31 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:44:31 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:44:31 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 14:44:31 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 14:44:31 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:44:31 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:44:31 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:44:31 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:44:31 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 14:44:31 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 14:44:31 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 14:44:31 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 14:44:31 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 14:44:31 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 14:44:31 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 14:44:31 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 14:44:31 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 14:44:31 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 14:44:31 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 14:44:31 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 14:45:53 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 1. 什么是<concept>Folio</concept>？

<concept>Folio</concept'}
2025-06-26 14:45:53 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 1. 什么是<concept>Folio</concept>？

<concept>Folio</concept', version='null'}
2025-06-26 14:45:53 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 1. 什么是<concept>Folio</concept>？

<concept>Folio</concept
2025-06-26 14:45:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 1. 什么是<concept>Folio</concept>？

<concept>Folio</concept, version=null
2025-06-26 14:45:53 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=# Linux内核中的<concept>Folio</concept>概念解析

## 1. 什么是<concept>Folio</concept>？

<concept>Folio</concept
2025-06-26 14:45:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 1. 什么是<concept>Folio</concept>？

<concept>Folio</concept
2025-06-26 14:45:53 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 14:45:53 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 14:45:53 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 14:45:53 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 14:45:54 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 14:45:54 [http-nio-8080-exec-7] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 14:45:54 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 14:45:54 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 14:45:57 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:45:57 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [Page, page]
2025-06-26 14:45:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, page]
2025-06-26 14:45:57 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 14:45:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 14:45:58 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 14:45:58 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 14:45:58 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 14:45:58 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 14:45:58 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 14:45:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 14:45:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 14:45:59 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 14:45:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 14:46:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 14:46:03 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 14:46:03 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 14:46:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 14:46:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 14:46:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 14:46:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 14:46:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 14:46:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 14:46:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 14:46:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 14:46:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 14:46:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 14:46:03 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-26 14:46:03 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-26 14:48:10 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 14:48:10 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 14:48:10 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 14:48:10 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 14:48:10 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 14:48:10 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 14:48:10 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 14:48:10 [http-nio-8080-exec-8] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 14:48:10 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 14:48:10 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 14:48:16 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:48:16 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, page_container]
2025-06-26 14:48:16 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 14:48:16 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 14:48:16 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 14:48:18 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 14:48:18 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 14:48:18 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 14:48:18 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 14:48:18 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 14:48:18 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:48:18 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:48:18 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 14:48:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 14:48:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 14:48:19 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 14:48:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 14:48:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 14:48:19 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 14:48:19 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 14:48:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 14:48:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 14:48:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 14:48:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 14:48:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 14:48:19 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 14:48:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 14:48:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:48:19 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:48:19 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:48:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:48:19 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 14:48:19 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 14:48:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:48:20 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:48:20 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:48:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:48:20 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 14:48:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 14:48:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 14:48:20 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 14:48:20 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 14:48:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 14:48:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 14:48:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 14:48:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 14:48:20 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 14:48:20 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 14:48:20 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 14:56:09 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio？'}
2025-06-26 14:56:09 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio？
2025-06-26 14:56:09 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio？
2025-06-26 14:56:09 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio？', version='null'}
2025-06-26 14:56:09 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio？, version=null
2025-06-26 14:56:09 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio？
2025-06-26 14:56:09 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1184
2025-06-26 14:56:09 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 14:56:09 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 14:56:09 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 14:56:14 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:56:14 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, folio_page, linux_folio, memory_folio]
2025-06-26 14:56:14 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, folio_page, linux_folio]
2025-06-26 14:56:14 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 14:56:14 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 14:56:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 14:56:18 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 14:56:18 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 14:56:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 14:56:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 14:56:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:56:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 14:56:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 14:56:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 14:56:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 14:56:18 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 14:56:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 14:56:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 14:56:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 14:56:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 14:56:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 14:56:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 14:56:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 14:56:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 14:56:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 14:56:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 14:56:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 14:56:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:56:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:56:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:56:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:56:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 14:56:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 14:56:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 14:56:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 14:56:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 14:56:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 14:56:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 14:56:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 14:56:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 14:56:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 14:56:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=linux_folio, version=v6.14
2025-06-26 14:56:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/linux_folio?version=v6.14
2025-06-26 14:56:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:56:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:56:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:56:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=linux_folio, url=https://elixir.bootlin.com/api/ident/linux/linux_folio?version=v6.14, 提取到0个代码片段
2025-06-26 14:56:20 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 14:56:20 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 14:58:12 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L', version='null'}
2025-06-26 14:58:12 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L'}
2025-06-26 14:58:12 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L, version=null
2025-06-26 14:58:12 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 14:58:12 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 14:58:12 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 14:58:12 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 14:58:12 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 14:58:12 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 14:58:12 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 14:58:13 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 14:58:13 [http-nio-8080-exec-6] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 14:58:13 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 14:58:13 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 14:58:17 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:58:17 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了3个搜索实体: [Page, page, vm_page]
2025-06-26 14:58:17 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, page, vm_page]
2025-06-26 14:58:17 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 14:58:17 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 14:58:18 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 14:58:18 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 14:58:18 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 14:58:18 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 14:58:18 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 14:58:18 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 14:58:18 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 14:58:18 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 14:58:18 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 14:58:30 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 14:58:30 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 14:58:30 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 14:58:30 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 14:58:30 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 14:58:30 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 14:58:30 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 14:58:30 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 14:58:30 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 14:58:30 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 14:58:30 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 14:58:30 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 14:58:30 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 14:58:30 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-26 14:58:30 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-26 14:58:31 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 14:58:31 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 14:58:31 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 14:58:31 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-26 14:58:31 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-26 14:58:31 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-26 14:58:55 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L'}
2025-06-26 14:58:55 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L', version='null'}
2025-06-26 14:58:55 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 14:58:55 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L, version=null
2025-06-26 14:58:55 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 14:58:55 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 14:58:55 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 14:58:55 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 14:58:55 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 14:58:55 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 14:58:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 14:58:56 [http-nio-8080-exec-2] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 14:58:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 14:58:56 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 14:58:59 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 14:58:59 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [Page, page]
2025-06-26 14:58:59 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, page]
2025-06-26 14:58:59 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 14:58:59 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 14:59:00 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 14:59:00 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 14:59:00 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 14:59:00 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 14:59:00 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 14:59:00 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 14:59:00 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 14:59:00 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 14:59:00 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 14:59:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 14:59:04 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 14:59:04 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 14:59:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 14:59:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 14:59:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 14:59:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 14:59:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 14:59:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 14:59:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 14:59:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 14:59:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 14:59:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 14:59:04 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-26 14:59:04 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-26 15:00:28 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L'}
2025-06-26 15:00:28 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 15:00:28 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 15:00:28 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L', version='null'}
2025-06-26 15:00:28 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L, version=null
2025-06-26 15:00:28 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 15:00:28 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 15:00:28 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 15:00:28 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 15:00:28 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 15:00:29 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 15:00:29 [http-nio-8080-exec-7] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 15:00:29 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 15:00:29 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 15:00:33 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 15:00:33 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [Page, page]
2025-06-26 15:00:33 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, page]
2025-06-26 15:00:33 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 15:00:33 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 15:00:35 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 15:00:35 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 15:00:35 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 15:00:35 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 15:00:35 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 15:00:35 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 15:00:35 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 15:00:35 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 15:00:35 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 15:00:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 15:00:39 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 15:00:39 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 15:00:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 15:00:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 15:00:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 15:00:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 15:00:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 15:00:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 15:00:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 15:00:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 15:00:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 15:00:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 15:00:39 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-26 15:00:39 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-26 15:20:07 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='page和folio的区别是什么'}
2025-06-26 15:20:07 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=page和folio的区别是什么
2025-06-26 15:20:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=page和folio的区别是什么
2025-06-26 15:20:07 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='page和folio的区别是什么', version='null'}
2025-06-26 15:20:07 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='page和folio的区别是什么'}
2025-06-26 15:20:07 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=page和folio的区别是什么, version=null
2025-06-26 15:20:07 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=page和folio的区别是什么
2025-06-26 15:20:07 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=page和folio的区别是什么
2025-06-26 15:20:07 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=page和folio的区别是什么
2025-06-26 15:20:07 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1190
2025-06-26 15:20:07 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='page和folio的区别是什么', version='null'}
2025-06-26 15:20:07 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=page和folio的区别是什么, version=null
2025-06-26 15:20:07 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=page和folio的区别是什么
2025-06-26 15:20:07 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1191
2025-06-26 15:20:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 15:20:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 15:20:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 15:20:07 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 15:20:07 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 15:20:07 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 15:20:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 15:20:08 [http-nio-8080-exec-8] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 15:20:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 15:20:08 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 15:20:11 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 15:20:11 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [page]
2025-06-26 15:20:11 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page]
2025-06-26 15:20:11 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 15:20:11 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 15:20:11 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 15:20:11 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [folio, page_folio, compound_page, folio_page, linux_folio]
2025-06-26 15:20:11 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, folio_page, linux_folio]
2025-06-26 15:20:11 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 15:20:11 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 15:20:14 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 15:20:14 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 15:20:14 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 15:20:14 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 15:20:14 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 15:20:14 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 15:20:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 15:20:15 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 15:20:15 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 15:20:15 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 15:20:15 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 15:20:15 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 15:20:15 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 15:20:15 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 15:20:15 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 15:20:15 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 15:20:15 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 15:20:15 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 15:20:15 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 15:20:15 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 15:20:15 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 15:20:15 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=linux_folio, version=v6.14
2025-06-26 15:20:15 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/linux_folio?version=v6.14
2025-06-26 15:20:16 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 15:20:16 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 15:20:16 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 15:20:16 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=linux_folio, url=https://elixir.bootlin.com/api/ident/linux/linux_folio?version=v6.14, 提取到0个代码片段
2025-06-26 15:20:16 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 15:20:16 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 15:20:19 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 15:20:19 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 15:20:19 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 15:20:19 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 15:20:19 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 15:20:19 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 15:20:19 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 15:20:19 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 15:20:19 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 15:20:19 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 15:20:19 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 15:20:19 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 15:20:19 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 15:20:19 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-26 15:20:19 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-26 15:30:32 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L'}
2025-06-26 15:30:32 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 15:30:32 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 15:30:32 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L', version='null'}
2025-06-26 15:30:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L, version=null
2025-06-26 15:30:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 15:30:32 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 15:30:32 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 15:30:32 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 15:30:32 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 15:30:33 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 15:30:33 [http-nio-8080-exec-6] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 15:30:33 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 15:30:33 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 15:30:37 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 15:30:37 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了3个搜索实体: [Page, page, PF]
2025-06-26 15:30:37 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, page, PF]
2025-06-26 15:30:37 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 15:30:37 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 15:30:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 15:30:38 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 15:30:38 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 15:30:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 15:30:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 15:30:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 15:30:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 15:30:38 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 15:30:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 15:30:44 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 15:30:44 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 15:30:44 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 15:30:44 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 15:30:44 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 15:30:44 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 15:30:44 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 15:30:44 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 15:30:44 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 15:30:44 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 15:30:44 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 15:30:44 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 15:30:44 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 15:30:44 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=PF, version=v6.14
2025-06-26 15:30:44 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/PF?version=v6.14
2025-06-26 15:30:45 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 2023
2025-06-26 15:30:45 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 2023
2025-06-26 15:30:45 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=8, 引用=117
2025-06-26 15:30:45 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/68000/dragen2.c, line=59, version=v6.14
2025-06-26 15:30:45 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/68000/dragen2.c, line=60, version=v6.14
2025-06-26 15:30:45 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/68000/dragen2.c, line=61, version=v6.14
2025-06-26 15:30:45 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=PF, url=https://elixir.bootlin.com/api/ident/linux/PF?version=v6.14, 提取到3个代码片段
2025-06-26 15:30:45 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增13个结果
2025-06-26 15:30:45 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到13个结果
2025-06-26 15:32:43 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio？'}
2025-06-26 15:32:43 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio？
2025-06-26 15:32:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio？
2025-06-26 15:32:43 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio？', version='null'}
2025-06-26 15:32:43 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio？, version=null
2025-06-26 15:32:43 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio？
2025-06-26 15:32:43 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1184
2025-06-26 15:32:43 [http-nio-8080-exec-1] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 15:32:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 15:32:43 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 15:32:50 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 15:32:50 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 15:32:50 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 15:32:50 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 15:32:50 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 15:32:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 15:32:52 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 15:32:52 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 15:32:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 15:32:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 15:32:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 15:32:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 15:32:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 15:32:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 15:32:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 15:32:52 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 15:32:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 15:32:53 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 15:32:53 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 15:32:53 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 15:32:53 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 15:32:53 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 15:32:53 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 15:32:53 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 15:32:53 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 15:32:53 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 15:32:53 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 15:32:53 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 15:32:53 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 15:32:53 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 15:32:53 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 15:32:53 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 15:32:53 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 15:32:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 15:32:54 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 15:32:54 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 15:32:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 15:32:54 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 15:32:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 15:32:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 15:32:54 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 15:32:54 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 15:32:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 15:32:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 15:32:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 15:32:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 15:32:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 15:32:54 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 15:32:54 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 15:35:29 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio？'}
2025-06-26 15:35:29 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio？
2025-06-26 15:35:29 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio？
2025-06-26 15:35:29 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio？', version='null'}
2025-06-26 15:35:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio？, version=null
2025-06-26 15:35:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio？
2025-06-26 15:35:29 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1184
2025-06-26 15:35:29 [http-nio-8080-exec-7] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 15:35:29 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 15:35:29 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 15:35:35 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 15:35:35 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, memory_folio]
2025-06-26 15:35:35 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 15:35:35 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 15:35:35 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 15:35:37 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 15:35:37 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 15:35:37 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 15:35:37 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 15:35:37 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 15:35:37 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 15:35:37 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 15:35:37 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 15:35:37 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 15:35:37 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 15:35:37 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 15:35:37 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 15:35:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 15:35:38 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 15:35:38 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 15:35:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 15:35:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 15:35:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 15:35:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 15:35:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 15:35:38 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 15:35:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 15:35:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 15:35:38 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 15:35:38 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 15:35:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 15:35:38 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 15:35:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 15:35:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 15:35:38 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 15:35:38 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 15:35:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 15:35:38 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 15:35:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 15:35:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 15:35:39 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 15:35:39 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 15:35:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 15:35:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 15:35:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 15:35:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 15:35:39 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 15:35:39 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 15:35:39 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 15:42:02 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='在Linux内核中folio和page是一组意思相近的概念'}
2025-06-26 15:42:02 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=在Linux内核中folio和page是一组意思相近的概念
2025-06-26 15:42:02 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=在Linux内核中folio和page是一组意思相近的概念
2025-06-26 15:42:02 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='在Linux内核中folio和page是一组意思相近的概念', version='null'}
2025-06-26 15:42:02 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=在Linux内核中folio和page是一组意思相近的概念, version=null
2025-06-26 15:42:02 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=在Linux内核中folio和page是一组意思相近的概念
2025-06-26 15:42:02 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1204
2025-06-26 15:42:02 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 15:42:02 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 15:42:02 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 15:42:07 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 15:42:07 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [folio, page]
2025-06-26 15:42:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page]
2025-06-26 15:42:07 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 15:42:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 15:42:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 15:42:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 15:42:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 15:42:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 15:42:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 15:42:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 15:42:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 15:42:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 15:42:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 15:42:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 15:42:09 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 15:42:09 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 15:42:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 15:42:14 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 15:42:14 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 15:42:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 15:42:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 15:42:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 15:42:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 15:42:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 15:42:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 15:42:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 15:42:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 15:42:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 15:42:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 15:42:14 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增13个结果
2025-06-26 15:42:14 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到13个结果
2025-06-26 16:02:54 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 16:02:54 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 16:02:54 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 16:02:54 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 16:02:54 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 16:02:54 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 16:02:54 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 16:02:54 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 16:02:54 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 16:02:54 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 16:03:00 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:03:00 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, folio_page, large_page, folio_struct]
2025-06-26 16:03:00 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, folio_page, large_page]
2025-06-26 16:03:00 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 16:03:00 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 16:03:06 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 16:03:06 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 16:03:06 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 16:03:06 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 16:03:06 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 16:03:06 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:03:06 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:03:06 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 16:03:06 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 16:03:07 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 16:03:07 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 16:03:07 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 16:03:07 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 16:03:07 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 16:03:07 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 16:03:07 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 16:03:07 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 16:03:07 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 16:03:07 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 16:03:07 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 16:03:07 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 16:03:07 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 16:03:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:03:08 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:03:08 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:03:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:03:08 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 16:03:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 16:03:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 16:03:08 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 16:03:08 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 16:03:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 16:03:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 16:03:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 16:03:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 16:03:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 16:03:08 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 16:03:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 16:03:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:03:08 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:03:08 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:03:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:03:08 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 16:03:08 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 16:04:43 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>机制解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L'}
2025-06-26 16:04:43 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>机制解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L', version='null'}
2025-06-26 16:04:43 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=# Linux内核中的<concept>Folio</concept>机制解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 16:04:43 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=# Linux内核中的<concept>Folio</concept>机制解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 16:04:43 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=# Linux内核中的<concept>Folio</concept>机制解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L, version=null
2025-06-26 16:04:43 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=# Linux内核中的<concept>Folio</concept>机制解析

## 什么是<concept>Folio</concept>？

<concept>Folio</concept>是L
2025-06-26 16:04:43 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 16:04:43 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:04:43 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:04:43 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 16:04:44 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 16:04:44 [http-nio-8080-exec-6] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 16:04:44 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 16:04:44 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 16:04:47 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:04:47 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [Page, page]
2025-06-26 16:04:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, page]
2025-06-26 16:04:47 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 16:04:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 16:04:49 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 16:04:49 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 16:04:49 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 16:04:49 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 16:04:49 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 16:04:49 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 16:04:49 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 16:04:49 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 16:04:49 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 16:04:56 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 16:04:56 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 16:04:56 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 16:04:56 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 16:04:57 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 16:04:57 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 16:04:57 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 16:04:57 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 16:04:57 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 16:04:57 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 16:04:57 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 16:04:57 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 16:04:57 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 16:04:57 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-26 16:04:57 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-26 16:10:01 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 16:10:01 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 16:10:01 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 16:10:01 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 16:10:01 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 16:10:01 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 16:10:01 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 16:10:01 [http-nio-8080-exec-1] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 16:10:01 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 16:10:01 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 16:10:05 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:10:05 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, page_container]
2025-06-26 16:10:05 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 16:10:05 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 16:10:05 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 16:10:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 16:10:08 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 16:10:08 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 16:10:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 16:10:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 16:10:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:10:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:10:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 16:10:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 16:10:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 16:10:08 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 16:10:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 16:10:09 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 16:10:09 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 16:10:09 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 16:10:09 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 16:10:09 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 16:10:09 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 16:10:09 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 16:10:09 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 16:10:09 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 16:10:09 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 16:10:09 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:10:09 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:10:09 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:10:09 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:10:09 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 16:10:09 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 16:10:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:10:10 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:10:10 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:10:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:10:10 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 16:10:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 16:10:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 16:10:10 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 16:10:10 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 16:10:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 16:10:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 16:10:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 16:10:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 16:10:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 16:10:10 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 16:10:10 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 16:11:52 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context=' '}
2025-06-26 16:11:52 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context= 
2025-06-26 16:11:52 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint= 
2025-06-26 16:11:52 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context=' ', version='null'}
2025-06-26 16:11:52 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context= , version=null
2025-06-26 16:11:52 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context= 
2025-06-26 16:11:52 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1175
2025-06-26 16:11:52 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:11:52 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:11:52 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 16:11:53 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 16:11:53 [http-nio-8080-exec-7] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 16:11:53 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 16:11:53 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 16:11:56 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:11:56 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [page, vm_page]
2025-06-26 16:11:56 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page, vm_page]
2025-06-26 16:11:56 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 16:11:56 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 16:12:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 16:12:07 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 16:12:07 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 16:12:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 16:12:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 16:12:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 16:12:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 16:12:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 16:12:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 16:12:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 16:12:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 16:12:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 16:12:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 16:12:07 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-26 16:12:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-26 16:12:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:12:07 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:12:07 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:12:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:12:07 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-26 16:12:07 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-26 16:15:42 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 16:15:42 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 16:15:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 16:15:42 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 16:15:42 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 16:15:42 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 16:15:42 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 16:15:42 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 16:15:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 16:15:42 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 16:15:47 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:15:47 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, page_container]
2025-06-26 16:15:47 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 16:15:47 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 16:15:47 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 16:15:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 16:15:50 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 16:15:50 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 16:15:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 16:15:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 16:15:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:15:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:15:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 16:15:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 16:15:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 16:15:50 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 16:15:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 16:15:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 16:15:50 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 16:15:50 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 16:15:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 16:15:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 16:15:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 16:15:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 16:15:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 16:15:51 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 16:15:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 16:15:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:15:51 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:15:51 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:15:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:15:51 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 16:15:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 16:15:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:15:51 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:15:51 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:15:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:15:51 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 16:15:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 16:15:52 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 16:15:52 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 16:15:52 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 16:15:52 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 16:15:52 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 16:15:52 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 16:15:52 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 16:15:52 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 16:15:52 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 16:15:52 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 16:17:07 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context=' '}
2025-06-26 16:17:07 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context= 
2025-06-26 16:17:07 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint= 
2025-06-26 16:17:07 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context=' ', version='null'}
2025-06-26 16:17:07 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context= , version=null
2025-06-26 16:17:07 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context= 
2025-06-26 16:17:07 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1175
2025-06-26 16:17:07 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:17:07 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:17:07 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 16:17:08 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 16:17:08 [http-nio-8080-exec-9] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 16:17:08 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 16:17:08 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 16:17:12 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:17:12 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [Page, vm_page]
2025-06-26 16:17:12 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, vm_page]
2025-06-26 16:17:12 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 16:17:12 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 16:17:14 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 16:17:14 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 16:17:14 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 16:17:14 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 16:17:14 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 16:17:14 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 16:17:14 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 16:17:14 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-26 16:17:14 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-26 16:17:14 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:17:14 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:17:14 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:17:14 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:17:14 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-26 16:17:14 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-26 16:17:54 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context=' '}
2025-06-26 16:17:54 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context=' ', version='null'}
2025-06-26 16:17:54 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context= 
2025-06-26 16:17:54 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint= 
2025-06-26 16:17:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context= , version=null
2025-06-26 16:17:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context= 
2025-06-26 16:17:54 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1175
2025-06-26 16:17:54 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:17:54 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:17:54 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 16:17:55 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 16:17:55 [http-nio-8080-exec-6] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 16:17:55 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 16:17:55 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 16:17:58 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:17:58 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了3个搜索实体: [Page, vm_page, PFN]
2025-06-26 16:17:58 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, vm_page, PFN]
2025-06-26 16:17:58 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 16:17:58 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 16:17:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 16:17:59 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 16:17:59 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 16:17:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 16:17:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 16:17:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 16:17:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 16:17:59 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-26 16:17:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-26 16:18:00 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:18:00 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:18:00 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:18:00 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:18:00 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=PFN, version=v6.14
2025-06-26 16:18:00 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14
2025-06-26 16:18:00 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 550
2025-06-26 16:18:00 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 550
2025-06-26 16:18:00 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=2, 引用=14
2025-06-26 16:18:00 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=236, version=v6.14
2025-06-26 16:18:00 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/kernel/phys2virt.S, line=32, version=v6.14
2025-06-26 16:18:00 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sparc/include/asm/leon.h, line=254, version=v6.14
2025-06-26 16:18:00 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第254行的代码元素
2025-06-26 16:18:00 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=PFN, url=https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14, 提取到2个代码片段
2025-06-26 16:18:00 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增5个结果
2025-06-26 16:18:00 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到5个结果
2025-06-26 16:18:01 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context=' ', version='null'}
2025-06-26 16:18:01 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context=' '}
2025-06-26 16:18:01 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context= , version=null
2025-06-26 16:18:01 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context= 
2025-06-26 16:18:01 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context= 
2025-06-26 16:18:01 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint= 
2025-06-26 16:18:01 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1175
2025-06-26 16:18:01 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:18:01 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:18:01 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 16:18:01 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 16:18:01 [http-nio-8080-exec-1] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 16:18:01 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 16:18:01 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 16:18:06 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:18:06 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了3个搜索实体: [Page, vm_page, PFN]
2025-06-26 16:18:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, vm_page, PFN]
2025-06-26 16:18:06 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 16:18:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 16:18:07 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 16:18:07 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 16:18:07 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:18:07 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:18:07 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:18:07 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=PFN, version=v6.14
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 550
2025-06-26 16:18:07 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 550
2025-06-26 16:18:07 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=2, 引用=14
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=236, version=v6.14
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/kernel/phys2virt.S, line=32, version=v6.14
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sparc/include/asm/leon.h, line=254, version=v6.14
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第254行的代码元素
2025-06-26 16:18:07 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=PFN, url=https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14, 提取到2个代码片段
2025-06-26 16:18:07 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增5个结果
2025-06-26 16:18:07 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到5个结果
2025-06-26 16:18:20 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 16:18:20 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 16:18:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 16:18:20 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 16:18:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 16:18:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 16:18:20 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 16:18:20 [http-nio-8080-exec-10] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 16:18:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 16:18:20 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 16:18:36 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:18:36 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [folio, page]
2025-06-26 16:18:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page]
2025-06-26 16:18:36 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 16:18:36 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 16:18:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 16:18:38 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 16:18:38 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 16:18:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 16:18:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 16:18:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:18:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:18:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 16:18:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 16:18:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 16:18:38 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 16:18:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 16:18:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 16:18:47 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 16:18:47 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 16:18:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 16:18:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 16:18:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 16:18:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 16:18:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 16:18:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 16:18:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 16:18:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 16:18:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 16:18:47 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 16:18:47 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增13个结果
2025-06-26 16:18:47 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到13个结果
2025-06-26 16:19:11 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context=' '}
2025-06-26 16:19:11 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context=' ', version='null'}
2025-06-26 16:19:11 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context= 
2025-06-26 16:19:11 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context= , version=null
2025-06-26 16:19:11 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint= 
2025-06-26 16:19:11 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context= 
2025-06-26 16:19:11 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1175
2025-06-26 16:19:11 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:19:11 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:19:11 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 16:19:12 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 16:19:12 [http-nio-8080-exec-3] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 16:19:12 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 16:19:12 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 16:19:16 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:19:16 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [Page, vm_page]
2025-06-26 16:19:16 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, vm_page]
2025-06-26 16:19:16 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 16:19:16 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 16:19:18 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 16:19:18 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 16:19:18 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 16:19:18 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 16:19:18 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 16:19:18 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 16:19:18 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 16:19:18 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-26 16:19:18 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-26 16:19:18 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:19:18 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:19:18 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:19:18 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:19:18 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-26 16:19:18 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-26 16:20:53 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，主要用于'}
2025-06-26 16:20:53 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，主要用于
2025-06-26 16:20:53 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，主要用于
2025-06-26 16:20:53 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，主要用于', version='null'}
2025-06-26 16:20:53 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，主要用于, version=null
2025-06-26 16:20:53 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=# Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，主要用于
2025-06-26 16:20:53 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 16:20:53 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:20:53 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:20:53 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 16:20:54 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 16:20:54 [http-nio-8080-exec-9] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 16:20:54 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 16:20:54 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 16:20:57 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:20:57 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了3个搜索实体: [Page, page, PF]
2025-06-26 16:20:57 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, page, PF]
2025-06-26 16:20:57 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 16:20:57 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 16:20:58 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 16:20:58 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 16:20:58 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 16:20:58 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 16:20:59 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 16:20:59 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 16:20:59 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 16:20:59 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 16:20:59 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 16:21:12 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 16:21:12 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 16:21:12 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 16:21:12 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 16:21:12 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 16:21:12 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 16:21:12 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 16:21:12 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 16:21:12 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 16:21:12 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 16:21:12 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 16:21:12 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 16:21:12 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 16:21:12 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=PF, version=v6.14
2025-06-26 16:21:12 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/PF?version=v6.14
2025-06-26 16:21:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 2023
2025-06-26 16:21:13 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 2023
2025-06-26 16:21:13 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=8, 引用=117
2025-06-26 16:21:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/68000/dragen2.c, line=59, version=v6.14
2025-06-26 16:21:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/68000/dragen2.c, line=60, version=v6.14
2025-06-26 16:21:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/68000/dragen2.c, line=61, version=v6.14
2025-06-26 16:21:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=PF, url=https://elixir.bootlin.com/api/ident/linux/PF?version=v6.14, 提取到3个代码片段
2025-06-26 16:21:13 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增13个结果
2025-06-26 16:21:13 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到13个结果
2025-06-26 16:24:39 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 16:24:39 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 16:24:39 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 16:24:39 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 16:24:39 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 16:24:39 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 16:24:39 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 16:24:39 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 16:24:39 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 16:24:39 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 16:24:44 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:24:44 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [folio, page]
2025-06-26 16:24:44 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page]
2025-06-26 16:24:44 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 16:24:44 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 16:24:47 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 16:24:47 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 16:24:47 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 16:24:47 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 16:24:47 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 16:24:47 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:24:47 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:24:47 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 16:24:47 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 16:24:47 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 16:24:47 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 16:24:47 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 16:24:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 16:24:56 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 16:24:56 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 16:24:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 16:24:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 16:24:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 16:24:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 16:24:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 16:24:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 16:24:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 16:24:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 16:24:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 16:24:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 16:24:56 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增13个结果
2025-06-26 16:24:56 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到13个结果
2025-06-26 16:26:08 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context=' '}
2025-06-26 16:26:08 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context= 
2025-06-26 16:26:08 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint= 
2025-06-26 16:26:08 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context=' ', version='null'}
2025-06-26 16:26:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context= , version=null
2025-06-26 16:26:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context= 
2025-06-26 16:26:08 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1175
2025-06-26 16:26:08 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:26:08 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:26:08 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 16:26:08 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 16:26:08 [http-nio-8080-exec-1] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 16:26:08 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 16:26:08 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 16:26:15 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:26:15 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了3个搜索实体: [Page, vm_page, PFN]
2025-06-26 16:26:15 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, vm_page, PFN]
2025-06-26 16:26:15 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 16:26:15 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 16:26:17 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 16:26:17 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 16:26:17 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:26:17 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:26:17 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:26:17 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=PFN, version=v6.14
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 550
2025-06-26 16:26:17 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 550
2025-06-26 16:26:17 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=2, 引用=14
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=236, version=v6.14
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/kernel/phys2virt.S, line=32, version=v6.14
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sparc/include/asm/leon.h, line=254, version=v6.14
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第254行的代码元素
2025-06-26 16:26:17 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=PFN, url=https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14, 提取到2个代码片段
2025-06-26 16:26:17 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增5个结果
2025-06-26 16:26:17 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到5个结果
2025-06-26 16:26:49 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context=' '}
2025-06-26 16:26:49 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context=' ', version='null'}
2025-06-26 16:26:49 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context= 
2025-06-26 16:26:49 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint= 
2025-06-26 16:26:49 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context= , version=null
2025-06-26 16:26:49 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context= 
2025-06-26 16:26:49 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1175
2025-06-26 16:26:49 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:26:49 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:26:49 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 16:26:50 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 16:26:50 [http-nio-8080-exec-5] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 16:26:50 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 16:26:50 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 16:26:52 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='# Linux内核中的<concept>Page</concept>概念解析

## 定义与目的

<concept>Page</concept>（页）是Linux内核内存管理的基本单位，它是固定长度', version='null'}
2025-06-26 16:26:52 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='# Linux内核中的<concept>Page</concept>概念解析

## 定义与目的

<concept>Page</concept>（页）是Linux内核内存管理的基本单位，它是固定长度'}
2025-06-26 16:26:52 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=# Linux内核中的<concept>Page</concept>概念解析

## 定义与目的

<concept>Page</concept>（页）是Linux内核内存管理的基本单位，它是固定长度, version=null
2025-06-26 16:26:52 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=# Linux内核中的<concept>Page</concept>概念解析

## 定义与目的

<concept>Page</concept>（页）是Linux内核内存管理的基本单位，它是固定长度
2025-06-26 16:26:52 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=# Linux内核中的<concept>Page</concept>概念解析

## 定义与目的

<concept>Page</concept>（页）是Linux内核内存管理的基本单位，它是固定长度
2025-06-26 16:26:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=# Linux内核中的<concept>Page</concept>概念解析

## 定义与目的

<concept>Page</concept>（页）是Linux内核内存管理的基本单位，它是固定长度
2025-06-26 16:26:52 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1274
2025-06-26 16:26:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:26:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:26:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 16:26:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 16:26:52 [http-nio-8080-exec-3] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 16:26:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-26 16:26:52 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-26 16:26:53 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:26:53 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [Page, vm_page]
2025-06-26 16:26:53 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, vm_page]
2025-06-26 16:26:53 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 16:26:53 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 16:26:54 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 16:26:54 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 16:26:54 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 16:26:54 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 16:26:54 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 16:26:54 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 16:26:54 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 16:26:54 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-26 16:26:54 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-26 16:26:55 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:26:55 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:26:55 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:26:55 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:26:55 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-26 16:26:55 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-26 16:26:57 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:26:57 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [Page]
2025-06-26 16:26:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page]
2025-06-26 16:26:57 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-26 16:26:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-26 16:26:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-26 16:26:57 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-26 16:26:57 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-26 16:26:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-26 16:26:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-26 16:26:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-26 16:26:58 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-26 16:26:58 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-26 16:26:58 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-26 16:29:16 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 16:29:16 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 16:29:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 16:29:16 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 16:29:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 16:29:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 16:29:16 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 16:29:16 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 16:29:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 16:29:16 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 16:29:22 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:29:22 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, folio_struct]
2025-06-26 16:29:22 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 16:29:22 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 16:29:22 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 16:29:24 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 16:29:24 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 16:29:24 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 16:29:24 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 16:29:24 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 16:29:24 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:29:24 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:29:24 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 16:29:24 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 16:29:24 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 16:29:24 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 16:29:24 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 16:29:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 16:29:25 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 16:29:25 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 16:29:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 16:29:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 16:29:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 16:29:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 16:29:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 16:29:25 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 16:29:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 16:29:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:29:26 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:29:26 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:29:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:29:26 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 16:29:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 16:29:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:29:26 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:29:26 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:29:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:29:26 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 16:29:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 16:29:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 16:29:27 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 16:29:27 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 16:29:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 16:29:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 16:29:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 16:29:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 16:29:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 16:29:27 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 16:29:27 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 16:31:17 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context=' '}
2025-06-26 16:31:17 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context= 
2025-06-26 16:31:17 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint= 
2025-06-26 16:31:17 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context=' ', version='null'}
2025-06-26 16:31:17 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context= , version=null
2025-06-26 16:31:17 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context= 
2025-06-26 16:31:17 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1176
2025-06-26 16:31:17 [http-nio-8080-exec-3] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-26 16:31:17 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-26 16:31:17 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-26 16:31:22 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:31:22 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [Folio, page_folio, compound_page, large_page, memory_folio]
2025-06-26 16:31:22 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio, page_folio, compound_page, large_page, memory_folio]
2025-06-26 16:31:22 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-26 16:31:22 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-26 16:31:23 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:31:23 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:31:23 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:31:23 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-26 16:31:23 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 16:31:23 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 16:31:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 16:31:24 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 16:31:24 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 16:31:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 16:31:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 16:31:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 16:31:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 16:31:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 16:31:24 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 16:31:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 16:31:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:31:24 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:31:24 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:31:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:31:24 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 16:31:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 16:31:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:31:24 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:31:24 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:31:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:31:24 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-26 16:31:24 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-26 16:31:25 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:31:25 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:31:25 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:31:25 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-26 16:31:25 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增4个结果
2025-06-26 16:31:25 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到4个结果
2025-06-26 16:33:22 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 16:33:22 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 16:33:22 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 16:33:22 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 16:33:22 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 16:33:22 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 16:33:22 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 16:33:22 [http-nio-8080-exec-1] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 16:33:22 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 16:33:22 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 16:33:26 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:33:26 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 16:33:26 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 16:33:26 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 16:33:26 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 16:33:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 16:33:28 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 16:33:28 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 16:33:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 16:33:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 16:33:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:33:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:33:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 16:33:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 16:33:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 16:33:28 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 16:33:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 16:33:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 16:33:29 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 16:33:29 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 16:33:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 16:33:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 16:33:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 16:33:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 16:33:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 16:33:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 16:33:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 16:33:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:33:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:33:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:33:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:33:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 16:33:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 16:33:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:33:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:33:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:33:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:33:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 16:33:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 16:33:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 16:33:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 16:33:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 16:33:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 16:33:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 16:33:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 16:33:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 16:33:31 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 16:33:31 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 16:33:31 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 16:34:55 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示'}
2025-06-26 16:34:55 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-26 16:34:55 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-26 16:34:55 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示', version='null'}
2025-06-26 16:34:55 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示, version=null
2025-06-26 16:34:55 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-26 16:34:55 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1283
2025-06-26 16:34:55 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:34:55 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 16:34:55 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 16:34:56 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 16:34:56 [http-nio-8080-exec-5] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 16:34:56 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 16:34:56 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 16:34:59 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:34:59 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [page]
2025-06-26 16:34:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page]
2025-06-26 16:34:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 16:34:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 16:35:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 16:35:06 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 16:35:06 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 16:35:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 16:35:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 16:35:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 16:35:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 16:35:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 16:35:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 16:35:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 16:35:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 16:35:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 16:35:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 16:35:06 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-26 16:35:06 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-26 16:58:16 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-26 16:58:16 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-26 16:58:16 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-26 16:58:16 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-26 16:58:16 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-26 16:58:16 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-26 16:58:16 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-26 16:58:16 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 16:58:16 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 16:58:16 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 16:58:22 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 16:58:22 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, folio_struct]
2025-06-26 16:58:22 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 16:58:22 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 16:58:22 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 16:58:24 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 16:58:24 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 16:58:24 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 16:58:24 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 16:58:24 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 16:58:24 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:58:24 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 16:58:24 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 16:58:24 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 16:58:24 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 16:58:24 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 16:58:24 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 16:58:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 16:58:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 16:58:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 16:58:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 16:58:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 16:58:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 16:58:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 16:58:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 16:58:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 16:58:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 16:58:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:58:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:58:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:58:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:58:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 16:58:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 16:58:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 16:58:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 16:58:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 16:58:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 16:58:25 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 16:58:25 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 16:58:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 16:58:26 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 16:58:26 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 16:58:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 16:58:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 16:58:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 16:58:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 16:58:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 16:58:26 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 16:58:26 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 17:00:18 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context='什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核引入的一种新的内存管理数据结构，用于表示一组'}
2025-06-26 17:00:18 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核引入的一种新的内存管理数据结构，用于表示一组
2025-06-26 17:00:18 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context='什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核引入的一种新的内存管理数据结构，用于表示一组', version='null'}
2025-06-26 17:00:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核引入的一种新的内存管理数据结构，用于表示一组
2025-06-26 17:00:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核引入的一种新的内存管理数据结构，用于表示一组, version=null
2025-06-26 17:00:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核引入的一种新的内存管理数据结构，用于表示一组
2025-06-26 17:00:18 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1284
2025-06-26 17:00:18 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-26 17:00:18 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-26 17:00:18 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-26 17:00:22 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:00:22 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [Folio]
2025-06-26 17:00:22 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio]
2025-06-26 17:00:22 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-26 17:00:22 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-26 17:00:23 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:00:23 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:00:23 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:00:23 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-26 17:00:23 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 17:00:23 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=Folio, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核引入的一种新的内存管理数据结构，用于表示一组, version=null
2025-06-26 17:36:45 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:36:45 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:36:45 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:36:45 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:36:45 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:36:45 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:36:45 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1266
2025-06-26 17:36:45 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:36:45 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:36:45 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:36:45 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:36:45 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:36:45 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:36:45 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 17:36:45 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:36:45 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:36:45 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:36:45 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:36:45 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:36:45 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:36:45 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 17:36:45 [http-nio-8080-exec-7] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-26 17:36:45 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-26 17:36:45 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-26 17:36:45 [http-nio-8080-exec-4] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-26 17:36:45 [http-nio-8080-exec-1] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-26 17:36:45 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-26 17:36:45 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-26 17:36:45 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-26 17:36:45 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-26 17:36:53 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:36:53 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, vma_pages_alloc, alloc_pages_for_vma, vma_pages_allocator, vma_page_alloc]
2025-06-26 17:36:53 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, vma_pages_alloc, alloc_pages_for_vma, vma_pages_allocator]
2025-06-26 17:36:53 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-26 17:36:53 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-26 17:36:54 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:36:54 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:36:54 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:36:54 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:36:54 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-26 17:36:54 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-26 17:36:54 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:36:54 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:36:54 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:36:54 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-26 17:36:54 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_pages_alloc, version=v6.14
2025-06-26 17:36:54 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_pages_alloc?version=v6.14
2025-06-26 17:36:55 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:36:55 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:36:55 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:36:55 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_pages_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_pages_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 17:36:55 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_for_vma, version=v6.14
2025-06-26 17:36:55 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_for_vma?version=v6.14
2025-06-26 17:36:55 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:36:55 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:36:55 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:36:55 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_for_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_for_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:36:55 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_pages_allocator, version=v6.14
2025-06-26 17:36:55 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_pages_allocator?version=v6.14
2025-06-26 17:36:55 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:36:55 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, vma_alloc_page_folio, vma_folio_allocation, vma_folio_allocate]
2025-06-26 17:36:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, vma_alloc_page_folio, vma_folio_allocation]
2025-06-26 17:36:55 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 17:36:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 17:36:55 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:36:55 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:36:55 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:36:55 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_pages_allocator, url=https://elixir.bootlin.com/api/ident/linux/vma_pages_allocator?version=v6.14, 提取到0个代码片段
2025-06-26 17:36:55 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 17:36:55 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:36:56 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 17:36:56 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 17:36:56 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 17:36:56 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 17:36:56 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 17:36:56 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 17:36:56 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 17:36:56 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 17:36:56 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 17:36:56 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-26 17:36:56 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-26 17:36:56 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:36:56 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:36:56 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:36:56 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:36:56 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-26 17:36:56 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-26 17:36:57 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:36:57 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:36:57 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:36:57 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 17:36:57 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_page_folio, version=v6.14
2025-06-26 17:36:57 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_page_folio?version=v6.14
2025-06-26 17:36:57 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:36:57 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:36:57 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:36:57 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_page_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_page_folio?version=v6.14, 提取到0个代码片段
2025-06-26 17:36:57 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_allocation, version=v6.14
2025-06-26 17:36:57 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_allocation?version=v6.14
2025-06-26 17:36:57 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:36:57 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:36:57 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:36:57 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_allocation, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_allocation?version=v6.14, 提取到0个代码片段
2025-06-26 17:36:57 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 17:36:57 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-26 17:37:00 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:37:00 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-26 17:37:00 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-26 17:37:00 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-26 17:37:00 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-26 17:37:00 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:37:00 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:37:00 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:37:00 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-26 17:37:00 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 17:37:00 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:37:12 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:37:12 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:37:12 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:37:12 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:37:12 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:37:12 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:37:12 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1266
2025-06-26 17:37:12 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:37:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:37:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:37:12 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:37:12 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:37:12 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 17:37:12 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:37:12 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:37:12 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:37:12 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:37:12 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:37:12 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:37:12 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:37:12 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 17:37:12 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-26 17:37:12 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-26 17:37:12 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-26 17:37:12 [http-nio-8080-exec-3] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-26 17:37:12 [http-nio-8080-exec-4] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-26 17:37:12 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-26 17:37:12 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-26 17:37:12 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-26 17:37:12 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-26 17:37:17 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:37:17 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-26 17:37:17 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-26 17:37:17 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-26 17:37:17 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-26 17:37:18 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:37:18 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, alloc_pages_in_vma, vma_pages_alloc, vma_page_allocation, vma_mem_alloc]
2025-06-26 17:37:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, alloc_pages_in_vma, vma_pages_alloc, vma_page_allocation]
2025-06-26 17:37:18 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-26 17:37:18 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-26 17:37:18 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:37:18 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, folio_alloc_vma, vma_alloc_page_folio, alloc_vma_folio]
2025-06-26 17:37:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, folio_alloc_vma, vma_alloc_page_folio]
2025-06-26 17:37:18 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 17:37:18 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 17:37:18 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:37:18 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:37:18 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:37:18 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-26 17:37:18 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 17:37:18 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:37:19 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:37:19 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:37:19 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:37:19 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:37:19 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-26 17:37:19 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-26 17:37:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 17:37:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 17:37:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 17:37:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 17:37:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 17:37:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 17:37:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 17:37:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 17:37:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 17:37:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-26 17:37:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-26 17:37:19 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:37:19 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:37:19 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:37:19 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-26 17:37:19 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-26 17:37:19 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-26 17:37:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:37:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:37:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:37:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:37:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-26 17:37:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-26 17:37:20 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:37:20 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:37:20 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:37:20 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:37:20 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_pages_alloc, version=v6.14
2025-06-26 17:37:20 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_pages_alloc?version=v6.14
2025-06-26 17:37:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:37:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:37:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:37:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 17:37:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_alloc_vma, version=v6.14
2025-06-26 17:37:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_alloc_vma?version=v6.14
2025-06-26 17:37:20 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:37:20 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:37:20 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:37:20 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_pages_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_pages_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 17:37:20 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_page_allocation, version=v6.14
2025-06-26 17:37:20 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_page_allocation?version=v6.14
2025-06-26 17:37:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:37:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:37:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:37:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_alloc_vma, url=https://elixir.bootlin.com/api/ident/linux/folio_alloc_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:37:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_page_folio, version=v6.14
2025-06-26 17:37:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_page_folio?version=v6.14
2025-06-26 17:37:20 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:37:20 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:37:20 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:37:20 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_page_allocation, url=https://elixir.bootlin.com/api/ident/linux/vma_page_allocation?version=v6.14, 提取到0个代码片段
2025-06-26 17:37:20 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 17:37:20 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:37:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:37:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:37:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:37:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_page_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_page_folio?version=v6.14, 提取到0个代码片段
2025-06-26 17:37:20 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 17:37:20 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-26 17:40:40 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:40:40 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:40:40 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:40:40 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:40:40 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:40:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:40:40 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1266
2025-06-26 17:40:40 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:40:40 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:40:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:40:40 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:40:40 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:40:40 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:40:40 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:40:40 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:40:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:40:40 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 17:40:40 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:40:40 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:40:40 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:40:40 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 17:40:40 [http-nio-8080-exec-5] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-26 17:40:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-26 17:40:40 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-26 17:40:40 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-26 17:40:40 [http-nio-8080-exec-7] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-26 17:40:40 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-26 17:40:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-26 17:40:40 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-26 17:40:40 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-26 17:40:44 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:40:44 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-26 17:40:44 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-26 17:40:44 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-26 17:40:44 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-26 17:40:45 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:40:45 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [vma_alloc_folio, vma_alloc_page, alloc_folio_vma, vma_folio_alloc, alloc_vma_folio, vma_alloc]
2025-06-26 17:40:45 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, vma_alloc_page, alloc_folio_vma, vma_folio_alloc, alloc_vma_folio]
2025-06-26 17:40:45 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 17:40:45 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 17:40:45 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:40:45 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc, vma_pages_alloc]
2025-06-26 17:40:45 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc]
2025-06-26 17:40:45 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-26 17:40:45 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-26 17:40:46 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:40:46 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:40:46 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:40:46 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-26 17:40:46 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 17:40:46 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:40:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 17:40:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 17:40:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 17:40:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 17:40:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 17:40:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 17:40:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 17:40:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 17:40:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 17:40:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_page, version=v6.14
2025-06-26 17:40:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14
2025-06-26 17:40:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:40:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:40:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:40:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_page, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14, 提取到0个代码片段
2025-06-26 17:40:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-26 17:40:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-26 17:40:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:40:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:40:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:40:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:40:46 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-26 17:40:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-26 17:40:46 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:40:46 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:40:46 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:40:46 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:40:46 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-26 17:40:46 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-26 17:40:47 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:40:47 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:40:47 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:40:47 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 17:40:47 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_vma_folio, version=v6.14
2025-06-26 17:40:47 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_vma_folio?version=v6.14
2025-06-26 17:40:47 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:40:47 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:40:47 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:40:47 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-26 17:40:47 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_page, version=v6.14
2025-06-26 17:40:47 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14
2025-06-26 17:40:47 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:40:47 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:40:47 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:40:47 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_vma_folio, url=https://elixir.bootlin.com/api/ident/linux/alloc_vma_folio?version=v6.14, 提取到0个代码片段
2025-06-26 17:40:47 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 17:40:47 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-26 17:40:47 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:40:47 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:40:47 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:40:47 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_page, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14, 提取到0个代码片段
2025-06-26 17:40:47 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-26 17:40:47 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-26 17:40:47 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:40:47 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:40:47 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:40:47 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:40:47 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_page_alloc, version=v6.14
2025-06-26 17:40:47 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14
2025-06-26 17:40:48 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:40:48 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:40:48 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:40:48 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_page_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 17:40:48 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 17:40:48 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:41:54 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的变更

## 背景介绍

<concept>Foli', version='null'}
2025-06-26 17:41:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的变更

## 背景介绍

<concept>Foli, version=null
2025-06-26 17:41:54 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的变更

## 背景介绍

<concept>Foli'}
2025-06-26 17:41:54 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的变更

## 背景介绍

<concept>Foli
2025-06-26 17:41:54 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的变更

## 背景介绍

<concept>Foli
2025-06-26 17:41:54 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的变更

## 背景介绍

<concept>Foli
2025-06-26 17:41:54 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1356
2025-06-26 17:41:54 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 17:41:54 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 17:41:54 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 17:41:59 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:41:59 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [folio, folio_struct, page_folio, linux_folio, memory_folio]
2025-06-26 17:41:59 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, folio_struct, page_folio, linux_folio, memory_folio]
2025-06-26 17:41:59 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 17:41:59 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 17:42:01 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 17:42:01 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 17:42:01 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 17:42:01 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 17:42:01 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 17:42:01 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 17:42:01 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 17:42:01 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 17:42:01 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 17:42:01 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 17:42:01 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_struct, version=v6.14
2025-06-26 17:42:01 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_struct?version=v6.14
2025-06-26 17:42:02 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:42:02 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:42:02 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:42:02 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_struct, url=https://elixir.bootlin.com/api/ident/linux/folio_struct?version=v6.14, 提取到0个代码片段
2025-06-26 17:42:02 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 17:42:02 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 17:42:02 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 17:42:02 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 17:42:02 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 17:42:02 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 17:42:02 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 17:42:02 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 17:42:02 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 17:42:02 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 17:42:02 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=linux_folio, version=v6.14
2025-06-26 17:42:02 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/linux_folio?version=v6.14
2025-06-26 17:42:03 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:42:03 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:42:03 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:42:03 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=linux_folio, url=https://elixir.bootlin.com/api/ident/linux/linux_folio?version=v6.14, 提取到0个代码片段
2025-06-26 17:42:03 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-26 17:42:03 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-26 17:42:03 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:42:03 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:42:03 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:42:03 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-26 17:42:03 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-26 17:42:03 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-26 17:44:44 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:44:44 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:44:44 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:44:44 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:44:44 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:44:44 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:44:44 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1266
2025-06-26 17:44:44 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:44:44 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:44:44 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:44:44 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:44:44 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:44:44 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:44:44 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:44:44 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:44:44 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:44:44 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 17:44:44 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-26 17:44:44 [http-nio-8080-exec-1] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-26 17:44:44 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-26 17:44:44 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-26 17:44:44 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-26 17:44:44 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-26 17:44:44 [http-nio-8080-exec-5] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-26 17:44:44 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-26 17:44:44 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-26 17:44:44 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:44:44 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:44:44 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:44:44 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 17:44:52 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:44:52 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc, __alloc_pages_vma]
2025-06-26 17:44:52 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc]
2025-06-26 17:44:52 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-26 17:44:52 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-26 17:44:52 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:44:52 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-26 17:44:52 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-26 17:44:52 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-26 17:44:52 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-26 17:44:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:44:53 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:44:53 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:44:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:44:53 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-26 17:44:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-26 17:44:53 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:44:53 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:44:53 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:44:53 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-26 17:44:53 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 17:44:53 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:44:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:44:53 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:44:53 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:44:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-26 17:44:53 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_page, version=v6.14
2025-06-26 17:44:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14
2025-06-26 17:44:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:44:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:44:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:44:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_page, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14, 提取到0个代码片段
2025-06-26 17:44:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-26 17:44:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-26 17:44:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:44:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:44:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:44:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:44:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_page_alloc, version=v6.14
2025-06-26 17:44:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14
2025-06-26 17:44:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:44:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:44:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:44:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_page_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 17:44:54 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 17:44:54 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:45:00 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:45:00 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [vma_alloc_folio, vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, alloc_vma_folio]
2025-06-26 17:45:00 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, alloc_vma_folio]
2025-06-26 17:45:00 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 17:45:00 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 17:45:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 17:45:01 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 17:45:01 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 17:45:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 17:45:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 17:45:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 17:45:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 17:45:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 17:45:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 17:45:01 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-26 17:45:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-26 17:45:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:45:01 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:45:01 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:45:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:45:01 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-26 17:45:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-26 17:45:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:45:01 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:45:01 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:45:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 17:45:01 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_vma_folio, version=v6.14
2025-06-26 17:45:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_vma_folio?version=v6.14
2025-06-26 17:45:02 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:45:02 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:45:02 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:45:02 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_vma_folio, url=https://elixir.bootlin.com/api/ident/linux/alloc_vma_folio?version=v6.14, 提取到0个代码片段
2025-06-26 17:45:02 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 17:45:02 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-26 17:46:06 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的版本演进

## 背景介绍

在Linux内核的内存'}
2025-06-26 17:46:06 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的版本演进

## 背景介绍

在Linux内核的内存', version='null'}
2025-06-26 17:46:06 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的版本演进

## 背景介绍

在Linux内核的内存
2025-06-26 17:46:06 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的版本演进

## 背景介绍

在Linux内核的内存, version=null
2025-06-26 17:46:06 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的版本演进

## 背景介绍

在Linux内核的内存
2025-06-26 17:46:06 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的版本演进

## 背景介绍

在Linux内核的内存
2025-06-26 17:46:06 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1356
2025-06-26 17:46:06 [http-nio-8080-exec-5] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 17:46:06 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 17:46:06 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 17:46:11 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:46:11 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [folio, page_folio, folio_page, memory_folio, vm_folio]
2025-06-26 17:46:11 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, folio_page, memory_folio, vm_folio]
2025-06-26 17:46:11 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 17:46:11 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 17:46:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 17:46:13 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 17:46:13 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 17:46:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 17:46:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 17:46:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 17:46:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 17:46:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 17:46:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 17:46:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 17:46:13 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 17:46:13 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 17:46:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 17:46:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 17:46:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 17:46:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 17:46:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 17:46:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:46:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:46:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-26 17:46:14 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_folio, version=v6.14
2025-06-26 17:46:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_folio?version=v6.14
2025-06-26 17:46:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:46:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:46:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:46:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_folio, url=https://elixir.bootlin.com/api/ident/linux/vm_folio?version=v6.14, 提取到0个代码片段
2025-06-26 17:46:15 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 17:46:15 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 17:53:23 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:53:23 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:53:23 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:53:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:53:23 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:53:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:53:23 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1266
2025-06-26 17:53:23 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:53:23 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 17:53:23 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:53:23 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:53:23 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:53:23 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:53:23 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:53:23 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:53:23 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:53:23 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 17:53:23 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 17:53:23 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:53:23 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 17:53:23 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 17:53:23 [http-nio-8080-exec-8] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-26 17:53:23 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-26 17:53:23 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-26 17:53:23 [http-nio-8080-exec-10] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-26 17:53:23 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-26 17:53:23 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-26 17:53:23 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-26 17:53:23 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-26 17:53:23 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-26 17:53:27 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:53:27 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [vma_alloc_folio, vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, alloc_vma_folio]
2025-06-26 17:53:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, alloc_vma_folio]
2025-06-26 17:53:27 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 17:53:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 17:53:28 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:53:28 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-26 17:53:28 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-26 17:53:28 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-26 17:53:28 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-26 17:53:28 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:53:28 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc, vma_pages_alloc]
2025-06-26 17:53:28 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc]
2025-06-26 17:53:28 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-26 17:53:28 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 17:53:29 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 17:53:29 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 17:53:29 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 17:53:29 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 17:53:29 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 17:53:29 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:53:29 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:53:29 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:53:29 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-26 17:53:29 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 17:53:29 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:53:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:53:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:53:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:53:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:53:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:53:29 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:53:29 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:53:29 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:53:29 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:53:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:53:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:53:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-26 17:53:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_page, version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:53:29 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:53:29 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:53:29 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 17:53:29 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_vma_folio, version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_vma_folio?version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:53:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:53:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:53:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_page, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14, 提取到0个代码片段
2025-06-26 17:53:29 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-26 17:53:29 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-26 17:53:30 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:53:30 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:53:30 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:53:30 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_vma_folio, url=https://elixir.bootlin.com/api/ident/linux/alloc_vma_folio?version=v6.14, 提取到0个代码片段
2025-06-26 17:53:30 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 17:53:30 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-26 17:53:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:53:30 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:53:30 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:53:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-26 17:53:30 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_page_alloc, version=v6.14
2025-06-26 17:53:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14
2025-06-26 17:53:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:53:30 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:53:30 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:53:30 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_page_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 17:53:30 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 17:53:30 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 17:57:19 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中folio是什么意思？'}
2025-06-26 17:57:19 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中folio是什么意思？
2025-06-26 17:57:19 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中folio是什么意思？
2025-06-26 17:57:19 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中folio是什么意思？', version='null'}
2025-06-26 17:57:19 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中folio是什么意思？, version=null
2025-06-26 17:57:19 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中folio是什么意思？
2025-06-26 17:57:19 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1192
2025-06-26 17:57:19 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 17:57:19 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 17:57:19 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 17:57:23 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:57:23 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, memory_folio]
2025-06-26 17:57:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 17:57:23 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 17:57:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 17:57:25 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 17:57:25 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 17:57:25 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 17:57:25 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 17:57:25 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 17:57:25 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 17:57:25 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 17:57:25 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 17:57:25 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 17:57:25 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 17:57:25 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 17:57:25 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 17:57:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 17:57:26 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 17:57:26 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 17:57:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 17:57:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 17:57:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 17:57:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 17:57:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 17:57:26 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 17:57:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 17:57:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:57:26 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:57:26 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:57:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 17:57:26 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 17:57:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 17:57:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:57:26 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:57:26 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:57:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 17:57:26 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 17:57:26 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 17:57:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 17:57:27 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 17:57:27 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 17:57:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 17:57:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 17:57:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 17:57:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 17:57:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 17:57:27 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 17:57:27 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 17:58:24 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中folio是什么意思？'}
2025-06-26 17:58:24 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中folio是什么意思？
2025-06-26 17:58:24 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中folio是什么意思？
2025-06-26 17:58:24 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中folio是什么意思？', version='null'}
2025-06-26 17:58:24 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中folio是什么意思？, version=null
2025-06-26 17:58:24 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中folio是什么意思？
2025-06-26 17:58:24 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1192
2025-06-26 17:58:24 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 17:58:24 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 17:58:24 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 17:58:29 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:58:29 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, memory_folio]
2025-06-26 17:58:29 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 17:58:29 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 17:58:29 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 17:58:31 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 17:58:31 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 17:58:31 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 17:58:31 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 17:58:31 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 17:58:31 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 17:58:31 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 17:58:31 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 17:58:31 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 17:58:31 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 17:58:31 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 17:58:31 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 17:58:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 17:58:32 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 17:58:32 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 17:58:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 17:58:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 17:58:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 17:58:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 17:58:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 17:58:32 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 17:58:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 17:58:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:58:32 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:58:32 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:58:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 17:58:32 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 17:58:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 17:58:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:58:32 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:58:32 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:58:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 17:58:32 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 17:58:32 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 17:58:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 17:58:33 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 17:58:33 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 17:58:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 17:58:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 17:58:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 17:58:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 17:58:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 17:58:33 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 17:58:33 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 17:58:56 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='Linux中page和folio的区别是？'}
2025-06-26 17:58:56 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=Linux中page和folio的区别是？
2025-06-26 17:58:56 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=Linux中page和folio的区别是？
2025-06-26 17:58:56 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='Linux中page和folio的区别是？', version='null'}
2025-06-26 17:58:56 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中page和folio的区别是？'}
2025-06-26 17:58:56 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=Linux中page和folio的区别是？, version=null
2025-06-26 17:58:56 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中page和folio的区别是？
2025-06-26 17:58:56 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=Linux中page和folio的区别是？
2025-06-26 17:58:56 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中page和folio的区别是？
2025-06-26 17:58:56 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1195
2025-06-26 17:58:56 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中page和folio的区别是？', version='null'}
2025-06-26 17:58:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中page和folio的区别是？, version=null
2025-06-26 17:58:56 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中page和folio的区别是？
2025-06-26 17:58:56 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1196
2025-06-26 17:58:56 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 17:58:56 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 17:58:56 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 17:58:56 [http-nio-8080-exec-8] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 17:58:56 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 17:58:56 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 17:58:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 17:58:57 [http-nio-8080-exec-4] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 17:58:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 17:58:57 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 17:59:00 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:59:00 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [page]
2025-06-26 17:59:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page]
2025-06-26 17:59:00 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 17:59:00 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 17:59:01 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 17:59:01 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, folio_page, file_page, large_page]
2025-06-26 17:59:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, folio_page, file_page]
2025-06-26 17:59:01 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 17:59:01 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 17:59:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 17:59:03 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 17:59:03 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 17:59:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 17:59:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 17:59:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 17:59:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 17:59:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 17:59:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 17:59:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 17:59:03 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 17:59:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 17:59:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 17:59:03 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 17:59:03 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 17:59:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 17:59:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 17:59:03 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 17:59:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 17:59:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 17:59:04 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 17:59:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 17:59:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:59:04 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:59:04 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:59:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 17:59:04 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 17:59:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 17:59:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 17:59:04 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 17:59:04 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 17:59:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 17:59:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 17:59:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 17:59:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 17:59:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 17:59:04 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=file_page, version=v6.14
2025-06-26 17:59:04 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/file_page?version=v6.14
2025-06-26 17:59:05 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 17:59:05 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 17:59:05 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 17:59:05 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=file_page, url=https://elixir.bootlin.com/api/ident/linux/file_page?version=v6.14, 提取到0个代码片段
2025-06-26 17:59:05 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 17:59:05 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 17:59:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 17:59:06 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 17:59:06 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 17:59:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 17:59:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 17:59:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 17:59:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 17:59:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 17:59:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 17:59:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 17:59:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 17:59:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 17:59:06 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 17:59:06 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-26 17:59:06 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-26 18:02:46 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='Linux中page和folio有什么区别？'}
2025-06-26 18:02:46 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=Linux中page和folio有什么区别？
2025-06-26 18:02:46 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=Linux中page和folio有什么区别？
2025-06-26 18:02:46 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中page和folio有什么区别？'}
2025-06-26 18:02:46 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='Linux中page和folio有什么区别？', version='null'}
2025-06-26 18:02:46 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中page和folio有什么区别？
2025-06-26 18:02:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=Linux中page和folio有什么区别？, version=null
2025-06-26 18:02:46 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中page和folio有什么区别？
2025-06-26 18:02:46 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=Linux中page和folio有什么区别？
2025-06-26 18:02:46 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1196
2025-06-26 18:02:46 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中page和folio有什么区别？', version='null'}
2025-06-26 18:02:46 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中page和folio有什么区别？, version=null
2025-06-26 18:02:46 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中page和folio有什么区别？
2025-06-26 18:02:46 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1197
2025-06-26 18:02:46 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:02:46 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:02:46 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 18:02:46 [http-nio-8080-exec-10] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 18:02:46 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 18:02:46 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 18:02:47 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 18:02:47 [http-nio-8080-exec-7] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 18:02:47 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 18:02:47 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 18:02:50 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:02:50 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [page]
2025-06-26 18:02:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page]
2025-06-26 18:02:50 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 18:02:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 18:02:51 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:02:51 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, folio_page, large_page, multi_page]
2025-06-26 18:02:51 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, folio_page, large_page]
2025-06-26 18:02:51 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 18:02:51 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 18:02:53 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 18:02:53 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 18:02:53 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 18:02:53 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 18:02:53 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 18:02:53 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 18:02:53 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 18:02:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:02:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:02:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:02:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 18:02:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 18:02:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 18:02:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 18:02:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 18:02:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 18:02:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 18:02:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 18:02:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 18:02:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 18:02:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 18:02:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 18:02:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 18:02:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:02:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:02:54 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:02:54 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 18:02:54 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 18:02:54 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 18:02:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 18:02:59 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 18:02:59 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 18:02:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 18:02:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 18:02:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 18:02:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 18:02:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 18:02:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:02:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:02:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 18:02:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 18:02:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 18:02:59 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-26 18:02:59 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-26 18:07:29 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux当中folio和page两个概念的区别是什么？'}
2025-06-26 18:07:29 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux当中folio和page两个概念的区别是什么？
2025-06-26 18:07:29 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux当中folio和page两个概念的区别是什么？
2025-06-26 18:07:29 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux当中folio和page两个概念的区别是什么？', version='null'}
2025-06-26 18:07:29 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='Linux当中folio和page两个概念的区别是什么？'}
2025-06-26 18:07:29 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux当中folio和page两个概念的区别是什么？, version=null
2025-06-26 18:07:29 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=Linux当中folio和page两个概念的区别是什么？
2025-06-26 18:07:29 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux当中folio和page两个概念的区别是什么？
2025-06-26 18:07:29 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=Linux当中folio和page两个概念的区别是什么？
2025-06-26 18:07:29 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1203
2025-06-26 18:07:29 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='Linux当中folio和page两个概念的区别是什么？', version='null'}
2025-06-26 18:07:29 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=Linux当中folio和page两个概念的区别是什么？, version=null
2025-06-26 18:07:29 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=Linux当中folio和page两个概念的区别是什么？
2025-06-26 18:07:29 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1202
2025-06-26 18:07:29 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:07:29 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 18:07:29 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:07:29 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 18:07:29 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 18:07:29 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 18:07:29 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 18:07:29 [http-nio-8080-exec-5] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 18:07:29 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 18:07:29 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 18:07:33 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:07:33 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [page]
2025-06-26 18:07:33 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page]
2025-06-26 18:07:33 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 18:07:33 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 18:07:33 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:07:33 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio]
2025-06-26 18:07:33 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio]
2025-06-26 18:07:33 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 18:07:33 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 18:07:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 18:07:37 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 18:07:37 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 18:07:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 18:07:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 18:07:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:07:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:07:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 18:07:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 18:07:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 18:07:37 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增6个结果
2025-06-26 18:07:37 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到6个结果
2025-06-26 18:07:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 18:07:40 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 18:07:40 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 18:07:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 18:07:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 18:07:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 18:07:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 18:07:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 18:07:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:07:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:07:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 18:07:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 18:07:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 18:07:40 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-26 18:07:40 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-26 18:10:14 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='page和folio有什么区别？'}
2025-06-26 18:10:14 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=page和folio有什么区别？
2025-06-26 18:10:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=page和folio有什么区别？
2025-06-26 18:10:14 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='page和folio有什么区别？'}
2025-06-26 18:10:14 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='page和folio有什么区别？', version='null'}
2025-06-26 18:10:14 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=page和folio有什么区别？
2025-06-26 18:10:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=page和folio有什么区别？, version=null
2025-06-26 18:10:14 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=page和folio有什么区别？
2025-06-26 18:10:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=page和folio有什么区别？
2025-06-26 18:10:14 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1190
2025-06-26 18:10:14 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='page和folio有什么区别？', version='null'}
2025-06-26 18:10:14 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=page和folio有什么区别？, version=null
2025-06-26 18:10:14 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=page和folio有什么区别？
2025-06-26 18:10:14 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1191
2025-06-26 18:10:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:10:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:10:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 18:10:14 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 18:10:14 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 18:10:14 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 18:10:15 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 18:10:15 [http-nio-8080-exec-1] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 18:10:15 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 18:10:15 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 18:10:18 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:10:18 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [page, vm_page]
2025-06-26 18:10:18 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page, vm_page]
2025-06-26 18:10:18 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 18:10:18 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 18:10:18 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:10:18 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, folio_page, linux_folio, kernel_folio]
2025-06-26 18:10:18 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, folio_page, linux_folio]
2025-06-26 18:10:18 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 18:10:18 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 18:10:20 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 18:10:20 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 18:10:20 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 18:10:20 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 18:10:20 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 18:10:20 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 18:10:20 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 18:10:21 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:10:21 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:10:21 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:10:21 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 18:10:21 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 18:10:21 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 18:10:21 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 18:10:21 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 18:10:21 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 18:10:21 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 18:10:21 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 18:10:21 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 18:10:21 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 18:10:21 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 18:10:21 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=linux_folio, version=v6.14
2025-06-26 18:10:21 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/linux_folio?version=v6.14
2025-06-26 18:10:21 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:10:21 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:10:21 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:10:21 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=linux_folio, url=https://elixir.bootlin.com/api/ident/linux/linux_folio?version=v6.14, 提取到0个代码片段
2025-06-26 18:10:21 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 18:10:21 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 18:10:25 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 18:10:25 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 18:10:25 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 18:10:25 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 18:10:25 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 18:10:25 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 18:10:25 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 18:10:25 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 18:10:25 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:10:25 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:10:25 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 18:10:25 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 18:10:25 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 18:10:25 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-26 18:10:25 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-26 18:10:25 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:10:25 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:10:25 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:10:25 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-26 18:10:25 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-26 18:10:25 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-26 18:12:23 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='linux当中folio是什么意思？'}
2025-06-26 18:12:23 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=linux当中folio是什么意思？
2025-06-26 18:12:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=linux当中folio是什么意思？
2025-06-26 18:12:23 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='linux当中folio是什么意思？', version='null'}
2025-06-26 18:12:23 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=linux当中folio是什么意思？, version=null
2025-06-26 18:12:23 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=linux当中folio是什么意思？
2025-06-26 18:12:23 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1193
2025-06-26 18:12:23 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 18:12:23 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 18:12:23 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 18:12:28 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:12:28 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, memory_folio]
2025-06-26 18:12:28 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-26 18:12:28 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 18:12:28 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 18:12:34 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 18:12:34 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 18:12:34 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 18:12:34 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 18:12:34 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 18:12:34 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:12:34 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:12:34 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 18:12:34 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 18:12:35 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 18:12:35 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 18:12:35 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 18:12:35 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 18:12:35 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 18:12:35 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 18:12:35 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 18:12:35 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 18:12:35 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 18:12:35 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 18:12:35 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 18:12:35 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 18:12:35 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 18:12:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:12:36 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:12:36 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:12:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 18:12:36 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 18:12:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 18:12:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:12:36 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:12:36 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:12:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 18:12:36 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 18:12:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 18:12:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 18:12:36 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 18:12:36 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 18:12:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 18:12:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 18:12:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 18:12:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 18:12:36 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 18:12:36 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-26 18:12:36 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-26 18:17:23 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中folio和page的区别在哪里？'}
2025-06-26 18:17:23 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中folio和page的区别在哪里？
2025-06-26 18:17:23 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中folio和page的区别在哪里？
2025-06-26 18:17:23 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中folio和page的区别在哪里？', version='null'}
2025-06-26 18:17:23 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='Linux中folio和page的区别在哪里？'}
2025-06-26 18:17:23 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中folio和page的区别在哪里？, version=null
2025-06-26 18:17:23 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=Linux中folio和page的区别在哪里？
2025-06-26 18:17:23 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中folio和page的区别在哪里？
2025-06-26 18:17:23 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=Linux中folio和page的区别在哪里？
2025-06-26 18:17:23 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1198
2025-06-26 18:17:23 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='Linux中folio和page的区别在哪里？', version='null'}
2025-06-26 18:17:23 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=Linux中folio和page的区别在哪里？, version=null
2025-06-26 18:17:23 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=Linux中folio和page的区别在哪里？
2025-06-26 18:17:23 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1197
2025-06-26 18:17:23 [http-nio-8080-exec-5] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 18:17:23 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 18:17:23 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 18:17:23 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:17:23 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:17:23 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 18:17:24 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 18:17:24 [http-nio-8080-exec-3] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 18:17:24 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 18:17:24 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 18:17:27 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:17:27 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio]
2025-06-26 18:17:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio]
2025-06-26 18:17:27 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 18:17:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 18:17:28 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:17:28 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [page, PFN]
2025-06-26 18:17:28 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page, PFN]
2025-06-26 18:17:28 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 18:17:28 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 18:17:29 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 18:17:29 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 18:17:29 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 18:17:29 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 18:17:29 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 18:17:29 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:17:29 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:17:29 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 18:17:29 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 18:17:29 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 18:17:29 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增6个结果
2025-06-26 18:17:29 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到6个结果
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 18:17:34 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 18:17:34 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 18:17:34 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=PFN, version=v6.14
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 550
2025-06-26 18:17:34 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 550
2025-06-26 18:17:34 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=2, 引用=14
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=236, version=v6.14
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/kernel/phys2virt.S, line=32, version=v6.14
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sparc/include/asm/leon.h, line=254, version=v6.14
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第254行的代码元素
2025-06-26 18:17:34 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=PFN, url=https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14, 提取到2个代码片段
2025-06-26 18:17:34 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增9个结果
2025-06-26 18:17:34 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到9个结果
2025-06-26 18:22:04 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中folio和page有什么区别'}
2025-06-26 18:22:04 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中folio和page有什么区别
2025-06-26 18:22:04 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中folio和page有什么区别
2025-06-26 18:22:04 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='Linux中folio和page有什么区别'}
2025-06-26 18:22:04 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中folio和page有什么区别', version='null'}
2025-06-26 18:22:04 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=Linux中folio和page有什么区别
2025-06-26 18:22:04 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中folio和page有什么区别, version=null
2025-06-26 18:22:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=Linux中folio和page有什么区别
2025-06-26 18:22:04 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中folio和page有什么区别
2025-06-26 18:22:04 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1196
2025-06-26 18:22:04 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='Linux中folio和page有什么区别', version='null'}
2025-06-26 18:22:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=Linux中folio和page有什么区别, version=null
2025-06-26 18:22:04 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=Linux中folio和page有什么区别
2025-06-26 18:22:04 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1195
2025-06-26 18:22:04 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 18:22:04 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 18:22:04 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 18:22:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:22:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:22:04 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 18:22:05 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 18:22:05 [http-nio-8080-exec-1] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 18:22:05 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 18:22:05 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 18:22:08 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:22:08 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [page, PFN]
2025-06-26 18:22:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page, PFN]
2025-06-26 18:22:08 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 18:22:08 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 18:22:08 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:22:08 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio]
2025-06-26 18:22:08 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio]
2025-06-26 18:22:08 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 18:22:08 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 18:22:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 18:22:10 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 18:22:10 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 18:22:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 18:22:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 18:22:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:22:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:22:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 18:22:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 18:22:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 18:22:10 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增6个结果
2025-06-26 18:22:10 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到6个结果
2025-06-26 18:22:13 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 18:22:13 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 18:22:13 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 18:22:13 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 18:22:13 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 18:22:13 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 18:22:13 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 18:22:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 18:22:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:22:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:22:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 18:22:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 18:22:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 18:22:14 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=PFN, version=v6.14
2025-06-26 18:22:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14
2025-06-26 18:22:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 550
2025-06-26 18:22:14 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 550
2025-06-26 18:22:14 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=2, 引用=14
2025-06-26 18:22:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=236, version=v6.14
2025-06-26 18:22:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/kernel/phys2virt.S, line=32, version=v6.14
2025-06-26 18:22:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sparc/include/asm/leon.h, line=254, version=v6.14
2025-06-26 18:22:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第254行的代码元素
2025-06-26 18:22:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=PFN, url=https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14, 提取到2个代码片段
2025-06-26 18:22:14 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增9个结果
2025-06-26 18:22:14 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到9个结果
2025-06-26 18:22:40 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中folio和page有什么区别'}
2025-06-26 18:22:40 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中folio和page有什么区别
2025-06-26 18:22:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中folio和page有什么区别
2025-06-26 18:22:40 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='Linux中folio和page有什么区别'}
2025-06-26 18:22:40 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中folio和page有什么区别', version='null'}
2025-06-26 18:22:40 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=Linux中folio和page有什么区别
2025-06-26 18:22:40 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中folio和page有什么区别, version=null
2025-06-26 18:22:40 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=Linux中folio和page有什么区别
2025-06-26 18:22:40 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中folio和page有什么区别
2025-06-26 18:22:40 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1196
2025-06-26 18:22:40 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='Linux中folio和page有什么区别', version='null'}
2025-06-26 18:22:40 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=Linux中folio和page有什么区别, version=null
2025-06-26 18:22:40 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=Linux中folio和page有什么区别
2025-06-26 18:22:40 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1195
2025-06-26 18:22:40 [http-nio-8080-exec-7] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 18:22:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 18:22:40 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 18:22:40 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:22:40 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:22:40 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 18:22:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 18:22:41 [http-nio-8080-exec-4] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 18:22:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 18:22:41 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 18:22:43 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:22:43 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [page]
2025-06-26 18:22:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page]
2025-06-26 18:22:43 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 18:22:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 18:22:43 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:22:43 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio]
2025-06-26 18:22:43 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio]
2025-06-26 18:22:43 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 18:22:43 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 18:22:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 18:22:46 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 18:22:46 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 18:22:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 18:22:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 18:22:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:22:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:22:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 18:22:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 18:22:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 18:22:46 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增6个结果
2025-06-26 18:22:46 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到6个结果
2025-06-26 18:22:51 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 18:22:51 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 18:22:51 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 18:22:51 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 18:22:51 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 18:22:51 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 18:22:51 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 18:22:51 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 18:22:51 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:22:51 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:22:51 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 18:22:51 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 18:22:51 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 18:22:51 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-26 18:22:51 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-26 18:39:42 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 18:39:42 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 18:39:42 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 18:39:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 18:39:42 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 18:39:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 18:39:42 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 18:39:42 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 18:39:42 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 18:39:42 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 18:39:42 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 18:39:42 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 18:39:42 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 18:39:42 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 18:39:42 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 18:39:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 18:39:42 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1264
2025-06-26 18:39:42 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 18:39:42 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 18:39:42 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 18:39:42 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1264
2025-06-26 18:39:42 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-26 18:39:42 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-26 18:39:42 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-26 18:39:42 [http-nio-8080-exec-4] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-26 18:39:42 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-26 18:39:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-26 18:39:42 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-26 18:39:42 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-26 18:39:42 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-26 18:39:46 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:39:46 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [vma_alloc_folio, vma_alloc_folio, alloc_folio_vma, folio_alloc_vma, vma_folio_alloc]
2025-06-26 18:39:46 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, alloc_folio_vma, folio_alloc_vma, vma_folio_alloc]
2025-06-26 18:39:46 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 18:39:46 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 18:39:47 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:39:47 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-26 18:39:47 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-26 18:39:47 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-26 18:39:47 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-26 18:39:47 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:39:47 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc, __alloc_pages_vma]
2025-06-26 18:39:47 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc]
2025-06-26 18:39:47 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-26 18:39:47 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-26 18:39:48 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:39:48 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:39:48 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:39:48 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-26 18:39:48 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 18:39:48 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 18:39:48 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:39:48 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:39:48 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:39:48 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 18:39:48 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-26 18:39:48 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-26 18:39:48 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 18:39:48 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 18:39:48 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 18:39:48 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 18:39:48 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 18:39:48 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 18:39:48 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 18:39:48 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 18:39:48 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 18:39:48 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-26 18:39:48 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-26 18:39:48 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:39:48 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:39:48 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:39:48 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-26 18:39:48 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_page, version=v6.14
2025-06-26 18:39:48 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14
2025-06-26 18:39:48 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:39:48 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:39:48 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:39:48 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-26 18:39:48 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_alloc_vma, version=v6.14
2025-06-26 18:39:48 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_alloc_vma?version=v6.14
2025-06-26 18:39:49 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:39:49 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:39:49 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:39:49 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_page, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14, 提取到0个代码片段
2025-06-26 18:39:49 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-26 18:39:49 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-26 18:39:49 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:39:49 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:39:49 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:39:49 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_alloc_vma, url=https://elixir.bootlin.com/api/ident/linux/folio_alloc_vma?version=v6.14, 提取到0个代码片段
2025-06-26 18:39:49 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-26 18:39:49 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-26 18:39:49 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:39:49 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:39:49 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:39:49 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-26 18:39:49 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_page_alloc, version=v6.14
2025-06-26 18:39:49 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14
2025-06-26 18:39:49 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:39:49 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:39:49 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:39:49 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 18:39:49 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 18:39:49 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-26 18:39:49 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:39:49 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:39:49 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:39:49 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_page_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 18:39:49 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 18:39:49 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 18:42:51 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中folio这个概念是什么意思？'}
2025-06-26 18:42:51 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中folio这个概念是什么意思？', version='null'}
2025-06-26 18:42:51 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中folio这个概念是什么意思？
2025-06-26 18:42:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中folio这个概念是什么意思？
2025-06-26 18:42:51 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中folio这个概念是什么意思？, version=null
2025-06-26 18:42:51 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中folio这个概念是什么意思？
2025-06-26 18:42:51 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1196
2025-06-26 18:42:51 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 18:42:51 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 18:42:51 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 18:42:54 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:42:54 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, page_container, folio_page]
2025-06-26 18:42:54 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, page_container]
2025-06-26 18:42:54 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 18:42:54 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 18:42:57 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 18:42:57 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 18:42:57 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 18:42:57 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 18:42:57 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 18:42:57 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:42:57 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:42:57 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 18:42:57 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-26 18:42:57 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-26 18:42:58 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:42:58 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:42:58 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:42:58 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-26 18:42:58 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_container, version=v6.14
2025-06-26 18:42:58 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_container?version=v6.14
2025-06-26 18:42:58 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:42:58 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:42:58 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:42:58 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_container, url=https://elixir.bootlin.com/api/ident/linux/page_container?version=v6.14, 提取到0个代码片段
2025-06-26 18:42:58 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-26 18:42:58 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-26 18:44:38 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context='Linux中folio这个概念是什么意思？ # Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，首次出现'}
2025-06-26 18:44:38 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context=Linux中folio这个概念是什么意思？ # Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，首次出现
2025-06-26 18:44:38 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint=Linux中folio这个概念是什么意思？ # Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，首次出现
2025-06-26 18:44:38 [http-nio-8080-exec-3] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-26 18:44:38 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-26 18:44:38 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-26 18:44:42 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context='Linux中folio这个概念是什么意思？ # Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，首次出现', version='null'}
2025-06-26 18:44:42 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context=Linux中folio这个概念是什么意思？ # Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，首次出现, version=null
2025-06-26 18:44:42 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context=Linux中folio这个概念是什么意思？ # Linux内核中的<concept>Folio</concept>概念解析

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一个新概念，首次出现
2025-06-26 18:44:42 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1297
2025-06-26 18:44:47 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:44:47 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [Folio, page_folio, compound_page, memory_folio, folio_page, large_page]
2025-06-26 18:44:47 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio, page_folio, compound_page, memory_folio, folio_page]
2025-06-26 18:44:47 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-26 18:44:47 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-26 18:44:48 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:44:48 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:44:48 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:44:48 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-26 18:44:48 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 18:44:48 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 18:44:48 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 18:44:48 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 18:44:48 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 18:44:48 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 18:44:48 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 18:44:48 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 18:44:48 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 18:44:48 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 18:44:48 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-26 18:44:48 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-26 18:44:49 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:44:49 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:44:49 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:44:49 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-26 18:44:49 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-26 18:44:49 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-26 18:44:49 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:44:49 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:44:49 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:44:49 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-26 18:44:49 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-26 18:44:49 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-26 18:44:49 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-26 18:44:49 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-26 18:44:49 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-26 18:44:49 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-26 18:44:49 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-26 18:44:49 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-26 18:44:49 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-26 18:44:50 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-26 18:44:50 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增8个结果
2025-06-26 18:44:50 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到8个结果
2025-06-26 18:46:44 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示', version='null'}
2025-06-26 18:46:44 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示'}
2025-06-26 18:46:44 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示, version=null
2025-06-26 18:46:44 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-26 18:46:44 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-26 18:46:44 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-26 18:46:44 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1283
2025-06-26 18:46:44 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:46:44 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:46:44 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 18:46:45 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 18:46:45 [http-nio-8080-exec-4] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 18:46:45 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 18:46:45 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 18:46:48 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:46:48 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [page, vm_page]
2025-06-26 18:46:48 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page, vm_page]
2025-06-26 18:46:48 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 18:46:48 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 18:46:55 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 18:46:55 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 18:46:55 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 18:46:55 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 18:46:55 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 18:46:55 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 18:46:55 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 18:46:55 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 18:46:55 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:46:55 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:46:55 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 18:46:55 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 18:46:55 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 18:46:55 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-26 18:46:55 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-26 18:46:55 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:46:55 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:46:55 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:46:55 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-26 18:46:55 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-26 18:46:55 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-26 18:48:14 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示', version='null'}
2025-06-26 18:48:14 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示'}
2025-06-26 18:48:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示, version=null
2025-06-26 18:48:14 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-26 18:48:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-26 18:48:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-26 18:48:14 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1283
2025-06-26 18:48:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:48:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-26 18:48:14 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-26 18:48:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-26 18:48:15 [http-nio-8080-exec-7] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-26 18:48:15 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-26 18:48:15 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-26 18:48:18 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:48:18 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [page, vm_page]
2025-06-26 18:48:18 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page, vm_page]
2025-06-26 18:48:18 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-26 18:48:18 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-26 18:48:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-26 18:48:25 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-26 18:48:25 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-26 18:48:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-26 18:48:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-26 18:48:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-26 18:48:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-26 18:48:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-26 18:48:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:48:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-26 18:48:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-26 18:48:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-26 18:48:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-26 18:48:25 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-26 18:48:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-26 18:48:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:48:25 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:48:25 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:48:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-26 18:48:25 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-26 18:48:25 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-26 18:53:37 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？', version='null'}
2025-06-26 18:53:37 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？'}
2025-06-26 18:53:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？, version=null
2025-06-26 18:53:37 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？
2025-06-26 18:53:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？
2025-06-26 18:53:37 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？
2025-06-26 18:53:37 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1266
2025-06-26 18:53:37 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？', version='null'}
2025-06-26 18:53:37 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？'}
2025-06-26 18:53:37 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？'}
2025-06-26 18:53:37 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？, version=null
2025-06-26 18:53:37 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？
2025-06-26 18:53:37 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？
2025-06-26 18:53:37 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？
2025-06-26 18:53:37 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？
2025-06-26 18:53:37 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？
2025-06-26 18:53:37 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 18:53:37 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？', version='null'}
2025-06-26 18:53:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？, version=null
2025-06-26 18:53:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？
2025-06-26 18:53:37 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 18:53:38 [http-nio-8080-exec-8] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-26 18:53:38 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-26 18:53:38 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-26 18:53:38 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-26 18:53:38 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-26 18:53:38 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-26 18:53:38 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-26 18:53:38 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-26 18:53:38 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-26 18:53:41 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:53:41 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-26 18:53:41 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-26 18:53:41 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-26 18:53:41 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-26 18:53:41 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:53:41 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc, vma_folio_alloc]
2025-06-26 18:53:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc]
2025-06-26 18:53:41 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-26 18:53:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-26 18:53:41 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:53:41 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [vma_alloc_folio, vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, alloc_vma_folio, __vma_alloc_folio]
2025-06-26 18:53:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, alloc_vma_folio, __vma_alloc_folio]
2025-06-26 18:53:41 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 18:53:41 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 18:53:42 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:53:42 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:53:42 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:53:42 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-26 18:53:42 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 18:53:42 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？, version=null
2025-06-26 18:53:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:53:42 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:53:42 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:53:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 18:53:42 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-26 18:53:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-26 18:53:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 18:53:42 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 18:53:42 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 18:53:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 18:53:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 18:53:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 18:53:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 18:53:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 18:53:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 18:53:42 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-26 18:53:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-26 18:53:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:53:42 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:53:42 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:53:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-26 18:53:42 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_page, version=v6.14
2025-06-26 18:53:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14
2025-06-26 18:53:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:53:42 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:53:42 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:53:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-26 18:53:42 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-26 18:53:42 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-26 18:53:43 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:53:43 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:53:43 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:53:43 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_page, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14, 提取到0个代码片段
2025-06-26 18:53:43 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-26 18:53:43 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-26 18:53:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:53:43 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:53:43 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:53:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 18:53:43 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_vma_folio, version=v6.14
2025-06-26 18:53:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_vma_folio?version=v6.14
2025-06-26 18:53:43 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:53:43 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:53:43 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:53:43 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-26 18:53:43 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_page_alloc, version=v6.14
2025-06-26 18:53:43 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14
2025-06-26 18:53:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:53:43 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:53:43 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:53:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_vma_folio, url=https://elixir.bootlin.com/api/ident/linux/alloc_vma_folio?version=v6.14, 提取到0个代码片段
2025-06-26 18:53:43 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=__vma_alloc_folio, version=v6.14
2025-06-26 18:53:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/__vma_alloc_folio?version=v6.14
2025-06-26 18:53:43 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:53:43 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:53:43 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:53:43 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_page_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 18:53:43 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 18:53:43 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？, version=null
2025-06-26 18:53:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:53:43 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:53:43 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:53:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=__vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/__vma_alloc_folio?version=v6.14, 提取到0个代码片段
2025-06-26 18:53:43 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 18:53:43 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-26 18:54:26 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的演进

## 背景介绍

<concept>Foli'}
2025-06-26 18:54:26 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的演进

## 背景介绍

<concept>Foli
2025-06-26 18:54:26 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的演进

## 背景介绍

<concept>Foli
2025-06-26 18:54:26 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的演进

## 背景介绍

<concept>Foli', version='null'}
2025-06-26 18:54:26 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的演进

## 背景介绍

<concept>Foli, version=null
2025-06-26 18:54:26 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪些版本引入的？ # Linux内核中<concept>folio</concept>转换：从alloc_pages_vma()到vma_alloc_folio()的演进

## 背景介绍

<concept>Foli
2025-06-26 18:54:26 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1356
2025-06-26 18:54:26 [http-nio-8080-exec-1] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-26 18:54:26 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-26 18:54:26 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-26 18:54:30 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 18:54:30 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [Folio, folio, page_folio, linux_folio, memory_folio]
2025-06-26 18:54:30 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio, folio, page_folio, linux_folio, memory_folio]
2025-06-26 18:54:30 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-26 18:54:30 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-26 18:54:31 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:54:31 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:54:31 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:54:31 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-26 18:54:31 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 18:54:31 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 18:54:33 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 18:54:33 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 18:54:33 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 18:54:33 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 18:54:33 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 18:54:33 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=linux_folio, version=v6.14
2025-06-26 18:54:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/linux_folio?version=v6.14
2025-06-26 18:54:34 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:54:34 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:54:34 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:54:34 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=linux_folio, url=https://elixir.bootlin.com/api/ident/linux/linux_folio?version=v6.14, 提取到0个代码片段
2025-06-26 18:54:34 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-26 18:54:34 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-26 18:54:34 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 18:54:34 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 18:54:34 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 18:54:34 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-26 18:54:34 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-26 18:54:34 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-26 19:08:40 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 19:08:40 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 19:08:40 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:08:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 19:08:40 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:08:40 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:08:40 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1266
2025-06-26 19:08:40 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 19:08:40 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 19:08:40 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 19:08:40 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 19:08:40 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:08:40 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:08:40 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:08:40 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:08:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:08:40 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 19:08:40 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 19:08:40 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 19:08:40 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:08:40 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 19:08:40 [http-nio-8080-exec-3] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-26 19:08:40 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-26 19:08:40 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-26 19:08:40 [http-nio-8080-exec-1] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-26 19:08:40 [http-nio-8080-exec-5] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-26 19:08:40 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-26 19:08:40 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-26 19:08:40 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-26 19:08:40 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-26 19:08:44 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 19:08:44 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-26 19:08:44 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-26 19:08:44 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-26 19:08:44 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-26 19:08:45 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 19:08:45 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [vma_alloc_folio, vma_folio_alloc, alloc_folio_vma, vma_alloc_folio_gfp, __vma_alloc_folio, vma_alloc_folio_nodemask]
2025-06-26 19:08:45 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, vma_folio_alloc, alloc_folio_vma, vma_alloc_folio_gfp, __vma_alloc_folio]
2025-06-26 19:08:45 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 19:08:45 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 19:08:45 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 19:08:45 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc, vma_pages_alloc]
2025-06-26 19:08:45 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, vma_alloc_page, alloc_pages_in_vma, vma_page_alloc]
2025-06-26 19:08:45 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-26 19:08:45 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-26 19:08:45 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:08:45 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:08:45 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:08:45 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-26 19:08:45 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 19:08:45 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 19:08:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 19:08:46 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 19:08:46 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 19:08:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 19:08:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 19:08:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 19:08:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 19:08:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 19:08:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 19:08:46 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-26 19:08:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-26 19:08:46 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:08:46 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:08:46 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:08:46 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 19:08:46 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-26 19:08:46 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-26 19:08:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:08:46 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:08:46 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:08:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 19:08:46 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-26 19:08:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-26 19:08:46 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:08:46 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:08:46 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:08:46 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-26 19:08:46 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_page, version=v6.14
2025-06-26 19:08:46 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14
2025-06-26 19:08:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:08:46 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:08:46 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:08:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-26 19:08:46 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio_gfp, version=v6.14
2025-06-26 19:08:46 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio_gfp?version=v6.14
2025-06-26 19:08:46 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:08:46 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:08:46 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:08:46 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_page, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_page?version=v6.14, 提取到0个代码片段
2025-06-26 19:08:46 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-26 19:08:46 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-26 19:08:47 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:08:47 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:08:47 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:08:47 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio_gfp, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio_gfp?version=v6.14, 提取到0个代码片段
2025-06-26 19:08:47 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=__vma_alloc_folio, version=v6.14
2025-06-26 19:08:47 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/__vma_alloc_folio?version=v6.14
2025-06-26 19:08:47 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:08:47 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:08:47 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:08:47 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-26 19:08:47 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_page_alloc, version=v6.14
2025-06-26 19:08:47 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14
2025-06-26 19:08:47 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:08:47 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:08:47 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:08:47 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=__vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/__vma_alloc_folio?version=v6.14, 提取到0个代码片段
2025-06-26 19:08:47 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 19:08:47 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-26 19:08:47 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:08:47 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:08:47 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:08:47 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_page_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_page_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 19:08:47 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 19:08:47 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 19:09:20 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 19:09:20 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 19:09:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 19:09:20 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:09:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:09:20 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:09:20 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1255
2025-06-26 19:09:20 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 19:09:20 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 19:09:20 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 19:09:24 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 19:09:24 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [folio, folio_struct, page_folio, linux_folio, memory_folio]
2025-06-26 19:09:24 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, folio_struct, page_folio, linux_folio, memory_folio]
2025-06-26 19:09:24 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 19:09:24 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 19:09:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 19:09:26 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 19:09:26 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 19:09:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 19:09:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 19:09:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 19:09:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 19:09:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 19:09:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 19:09:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 19:09:26 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_struct, version=v6.14
2025-06-26 19:09:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_struct?version=v6.14
2025-06-26 19:09:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:09:27 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:09:27 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:09:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_struct, url=https://elixir.bootlin.com/api/ident/linux/folio_struct?version=v6.14, 提取到0个代码片段
2025-06-26 19:09:27 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 19:09:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 19:09:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 19:09:27 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 19:09:27 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 19:09:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 19:09:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 19:09:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 19:09:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 19:09:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 19:09:27 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=linux_folio, version=v6.14
2025-06-26 19:09:27 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/linux_folio?version=v6.14
2025-06-26 19:09:28 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:09:28 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:09:28 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:09:28 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=linux_folio, url=https://elixir.bootlin.com/api/ident/linux/linux_folio?version=v6.14, 提取到0个代码片段
2025-06-26 19:09:28 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-26 19:09:28 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-26 19:09:28 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:09:28 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:09:28 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:09:28 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-26 19:09:28 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-26 19:09:28 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-26 19:10:07 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 19:10:07 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:10:07 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:10:07 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 19:10:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 19:10:07 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:10:07 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1255
2025-06-26 19:10:07 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-26 19:10:07 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-26 19:10:07 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-26 19:10:13 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 19:10:13 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了3个搜索实体: [folio, folio, page_folio]
2025-06-26 19:10:13 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio]
2025-06-26 19:10:13 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-26 19:10:13 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-26 19:10:15 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-26 19:10:15 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-26 19:10:15 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-26 19:10:15 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-26 19:10:15 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-26 19:10:15 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 19:10:15 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-26 19:10:15 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-26 19:10:15 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-26 19:10:15 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-26 19:10:15 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-26 19:10:15 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-26 19:10:16 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-26 19:10:16 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-26 19:10:16 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-26 19:10:16 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-26 19:10:16 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-26 19:10:16 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-26 19:10:16 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-26 19:10:16 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-26 19:10:16 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-26 19:10:16 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-26 19:11:52 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 19:11:52 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 19:11:52 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:11:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 19:11:52 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:11:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:11:52 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1266
2025-06-26 19:11:52 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 19:11:52 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 19:11:52 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-26 19:11:52 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 19:11:52 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:11:52 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:11:52 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:11:52 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:11:52 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 19:11:52 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:11:52 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-26 19:11:52 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 19:11:52 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-26 19:11:52 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-26 19:11:52 [http-nio-8080-exec-7] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-26 19:11:52 [http-nio-8080-exec-1] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-26 19:11:52 [http-nio-8080-exec-5] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-26 19:11:52 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-26 19:11:52 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-26 19:11:52 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-26 19:11:52 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-26 19:11:52 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-26 19:11:52 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-26 19:11:56 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 19:11:56 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-26 19:11:56 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-26 19:11:56 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-26 19:11:56 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-26 19:11:56 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 19:11:56 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, allocate_pages_vma, vma_pages_alloc, alloc_pages_in_vma, vma_page_allocation]
2025-06-26 19:11:56 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, allocate_pages_vma, vma_pages_alloc, alloc_pages_in_vma]
2025-06-26 19:11:56 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-26 19:11:56 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-26 19:11:57 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-26 19:11:57 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, vma_alloc_page_folio, vma_folio_allocation, vma_alloc_folio_page]
2025-06-26 19:11:57 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, vma_alloc_page_folio, vma_folio_allocation]
2025-06-26 19:11:57 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-26 19:11:57 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-26 19:11:57 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:11:57 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:11:57 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:11:57 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-26 19:11:57 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 19:11:57 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 19:11:57 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:11:57 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:11:57 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:11:57 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 19:11:57 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-26 19:11:57 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-26 19:11:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:11:58 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:11:58 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:11:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-26 19:11:58 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=allocate_pages_vma, version=v6.14
2025-06-26 19:11:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/allocate_pages_vma?version=v6.14
2025-06-26 19:11:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:11:58 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:11:58 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:11:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=allocate_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/allocate_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-26 19:11:58 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_pages_alloc, version=v6.14
2025-06-26 19:11:58 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_pages_alloc?version=v6.14
2025-06-26 19:11:58 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-26 19:11:58 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-26 19:11:58 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-26 19:11:58 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-26 19:11:58 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 19:11:58 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-26 19:11:58 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-26 19:11:58 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-26 19:11:58 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-26 19:11:58 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-26 19:11:58 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-26 19:11:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:11:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:11:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:11:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_pages_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_pages_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 19:11:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-26 19:11:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-26 19:11:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:11:59 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:11:59 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:11:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-26 19:11:59 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-26 19:11:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-26 19:11:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:11:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:11:59 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:11:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-26 19:11:59 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-26 19:11:59 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-26 19:11:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:11:59 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:11:59 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:11:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-26 19:11:59 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_page_folio, version=v6.14
2025-06-26 19:11:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_page_folio?version=v6.14
2025-06-26 19:11:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:11:59 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:11:59 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:11:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_page_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_page_folio?version=v6.14, 提取到0个代码片段
2025-06-26 19:11:59 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_allocation, version=v6.14
2025-06-26 19:11:59 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_allocation?version=v6.14
2025-06-26 19:12:00 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-26 19:12:00 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-26 19:12:00 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-26 19:12:00 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_allocation, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_allocation?version=v6.14, 提取到0个代码片段
2025-06-26 19:12:00 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-26 19:12:00 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-27 09:25:42 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='什么是folio'}
2025-06-27 09:25:42 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=什么是folio
2025-06-27 09:25:42 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=什么是folio
2025-06-27 09:25:42 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='什么是folio', version='null'}
2025-06-27 09:25:42 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=什么是folio, version=null
2025-06-27 09:25:42 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=什么是folio
2025-06-27 09:25:42 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1183
2025-06-27 09:25:42 [http-nio-8080-exec-7] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-27 09:25:42 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-27 09:25:42 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-27 09:25:46 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:25:46 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, folio_struct]
2025-06-27 09:25:46 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-27 09:25:46 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 09:25:46 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 09:25:50 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 09:25:50 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 09:25:50 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 09:25:50 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 09:25:50 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 09:25:50 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 09:25:50 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 09:25:50 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 09:25:50 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 09:25:50 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 09:25:50 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-27 09:25:50 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-27 09:25:51 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-27 09:25:51 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-27 09:25:51 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-27 09:25:51 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-27 09:25:51 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-27 09:25:51 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-27 09:25:51 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-27 09:25:51 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-27 09:25:51 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-27 09:25:51 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-27 09:25:51 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 09:25:51 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 09:25:51 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 09:25:51 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-27 09:25:51 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-27 09:25:51 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-27 09:25:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 09:25:52 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 09:25:52 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 09:25:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-27 09:25:52 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-27 09:25:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-27 09:25:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-27 09:25:52 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-27 09:25:52 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-27 09:25:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-27 09:25:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-27 09:25:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-27 09:25:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-27 09:25:52 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-27 09:25:52 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-27 09:25:52 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-27 09:27:38 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li'}
2025-06-27 09:27:38 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-27 09:27:38 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-27 09:27:38 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li', version='null'}
2025-06-27 09:27:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li, version=null
2025-06-27 09:27:38 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-27 09:27:38 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1283
2025-06-27 09:27:38 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 09:27:38 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 09:27:38 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-27 09:27:38 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-27 09:27:38 [http-nio-8080-exec-2] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-27 09:27:38 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-27 09:27:38 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-27 09:27:41 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:27:41 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [Page, page]
2025-06-27 09:27:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, page]
2025-06-27 09:27:41 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-27 09:27:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-27 09:27:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-27 09:27:42 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-27 09:27:42 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-27 09:27:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-27 09:27:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-27 09:27:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-27 09:27:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-27 09:27:42 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-27 09:27:42 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-27 09:27:47 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-27 09:27:47 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-27 09:27:47 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-27 09:27:47 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-27 09:27:47 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-27 09:27:47 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-27 09:27:47 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-27 09:27:47 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-27 09:27:47 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 09:27:47 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 09:27:47 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-27 09:27:47 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-27 09:27:47 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-27 09:27:47 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-27 09:27:47 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-27 09:30:38 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page Table', context='# Linux内核中的<concept>Page</concept>概念解析

## 定义与目的

<concept>Page</concept>（页）是Linux内核内存管理的基本单位，表示一块固定'}
2025-06-27 09:30:38 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page Table, context=# Linux内核中的<concept>Page</concept>概念解析

## 定义与目的

<concept>Page</concept>（页）是Linux内核内存管理的基本单位，表示一块固定
2025-06-27 09:30:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page Table, contextHint=# Linux内核中的<concept>Page</concept>概念解析

## 定义与目的

<concept>Page</concept>（页）是Linux内核内存管理的基本单位，表示一块固定
2025-06-27 09:30:38 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page Table', context='# Linux内核中的<concept>Page</concept>概念解析

## 定义与目的

<concept>Page</concept>（页）是Linux内核内存管理的基本单位，表示一块固定', version='null'}
2025-06-27 09:30:38 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page Table, context=# Linux内核中的<concept>Page</concept>概念解析

## 定义与目的

<concept>Page</concept>（页）是Linux内核内存管理的基本单位，表示一块固定, version=null
2025-06-27 09:30:38 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page Table, context=# Linux内核中的<concept>Page</concept>概念解析

## 定义与目的

<concept>Page</concept>（页）是Linux内核内存管理的基本单位，表示一块固定
2025-06-27 09:30:38 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1280
2025-06-27 09:30:38 [http-nio-8080-exec-5] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Page Table
2025-06-27 09:30:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page Table, explanationLength=55
2025-06-27 09:30:38 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page Table
2025-06-27 09:30:43 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:30:43 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [Page Table]
2025-06-27 09:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page Table]
2025-06-27 09:30:43 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page Table, version=v6.14
2025-06-27 09:30:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page_Table?version=v6.14
2025-06-27 09:30:44 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 09:30:44 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 09:30:44 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 09:30:44 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page Table, url=https://elixir.bootlin.com/api/ident/linux/Page_Table?version=v6.14, 提取到0个代码片段
2025-06-27 09:30:44 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-27 09:30:44 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=Page Table, context=# Linux内核中的<concept>Page</concept>概念解析

## 定义与目的

<concept>Page</concept>（页）是Linux内核内存管理的基本单位，表示一块固定, version=null
2025-06-27 09:30:50 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context='什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li'}
2025-06-27 09:30:50 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context=什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-27 09:30:50 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint=什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-27 09:30:50 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context='什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li', version='null'}
2025-06-27 09:30:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context=什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li, version=null
2025-06-27 09:30:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context=什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-27 09:30:50 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1284
2025-06-27 09:30:50 [http-nio-8080-exec-3] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-27 09:30:50 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-27 09:30:50 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-27 09:30:53 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:30:53 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [Folio, page_folio, compound_page, folio_page, memory_folio, folio_struct]
2025-06-27 09:30:53 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio, page_folio, compound_page, folio_page, memory_folio]
2025-06-27 09:30:53 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-27 09:30:53 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-27 09:30:54 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 09:30:54 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 09:30:54 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 09:30:54 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-27 09:30:54 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-27 09:30:54 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-27 09:30:54 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-27 09:30:54 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-27 09:30:54 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-27 09:30:54 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-27 09:30:54 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-27 09:30:54 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-27 09:30:54 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-27 09:30:54 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-27 09:30:54 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-27 09:30:54 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-27 09:30:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 09:30:55 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 09:30:55 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 09:30:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-27 09:30:55 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-27 09:30:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-27 09:30:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-27 09:30:55 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-27 09:30:55 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-27 09:30:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-27 09:30:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-27 09:30:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-27 09:30:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-27 09:30:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-27 09:30:55 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-27 09:30:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-27 09:30:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 09:30:55 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 09:30:55 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 09:30:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-27 09:30:55 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增8个结果
2025-06-27 09:30:55 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到8个结果
2025-06-27 09:43:15 [http-nio-8080-exec-10] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='21c690a349baab895dc68ab70d291e1598d7109d'}
2025-06-27 09:43:15 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-27 09:43:15 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-27 09:43:15 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-27 09:43:15 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 586
2025-06-27 09:43:15 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-27 09:43:15 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-27 09:43:15 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-27 09:43:15 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.6-rc4
2025-06-27 09:43:15 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.6-rc4
2025-06-27 09:43:15 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.6-rc4
2025-06-27 09:43:15 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-27 09:43:15 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=293, endLine=361, snippetLength=1454
2025-06-27 09:43:15 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-27 09:43:15 [http-nio-8080-exec-10] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-27 09:44:21 [http-nio-8080-exec-1] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:44:21 [http-nio-8080-exec-7] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:44:21 [http-nio-8080-exec-6] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:44:22 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='A folio in an operating system'}
2025-06-27 09:44:22 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='A folio in an operating system', version='null'}
2025-06-27 09:44:22 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=A folio in an operating system
2025-06-27 09:44:22 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=A folio in an operating system, version=null
2025-06-27 09:44:22 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=A folio in an operating system
2025-06-27 09:44:22 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=A folio in an operating system
2025-06-27 09:44:22 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1205
2025-06-27 09:44:22 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收三元组搜索请求: TripleSearchRequestDTO{concept='folio', context='folio是Linux内核的重要组件，需要分析其相关概念和关系。'}
2025-06-27 09:44:22 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 开始搜索三元组: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
2025-06-27 09:44:22 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索相关实体: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
Creating a new SqlSession
SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@614345d3] was not registered for synchronization because synchronization is not active
JDBC Connection [HikariProxyConnection@657473879 wrapping com.mysql.cj.jdbc.ConnectionImpl@14eed76f] will not be managed by Spring
==>  Preparing: SELECT * FROM entities_extraction WHERE name_en = ?
==> Parameters: folio(String)
2025-06-27 09:44:22 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-27 09:44:22 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-27 09:44:22 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
<==    Columns: eid, name_en, name_cn, source, definition_en, definition_cn, aliases, rel_desc, wikidata_id, create_time, update_time, feature_id
<==        Row: 57588, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:47, 2025-06-18 10:17:47, 33927
<==        Row: 57462, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:42, 2025-06-18 10:17:42, 33943
<==        Row: 53621, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34652
<==        Row: 53616, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34653
<==        Row: 45060, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:39, 2025-06-18 10:04:39, 36284
<==        Row: 44967, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36294
<==        Row: 44962, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36295
<==        Row: 41754, Folio, null, JSONL_EXTRACTION_6.1, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:02:50, 2025-06-18 10:02:50, 36894
<==        Row: 34240, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38350
<==        Row: 34231, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38351
<==        Row: 34221, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38353
<==        Row: 34207, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38355
<==        Row: 30507, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:42, 2025-06-18 09:56:42, 39099
<==        Row: 30368, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:37, 2025-06-18 09:56:37, 39123
<==        Row: 27246, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:55, 2025-06-18 09:54:55, 39729
<==        Row: 27197, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:53, 2025-06-18 09:54:53, 39738
<==        Row: 27097, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:50, 2025-06-18 09:54:50, 39758
<==        Row: 23515, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40454
<==        Row: 23511, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40455
<==        Row: 23506, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40456
<==        Row: 23500, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40457
<==        Row: 23457, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40468
<==        Row: 23433, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40471
<==        Row: 20228, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41114
<==        Row: 20218, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41116
<==        Row: 20210, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41117
<==        Row: 20202, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41119
<==        Row: 20193, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41120
<==        Row: 20191, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41121
<==        Row: 20186, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:52, 2025-06-18 09:50:52, 41122
<==        Row: 17391, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41675
<==        Row: 17379, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41677
<==        Row: 17354, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:20, 2025-06-18 09:49:20, 41682
<==        Row: 13712, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42404
<==        Row: 13700, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42407
<==        Row: 13619, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:17, 2025-06-18 09:47:17, 42422
<==        Row: 13600, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42426
<==        Row: 13598, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42427
<==        Row: 13578, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42431
<==        Row: 10759, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:44, 2025-06-18 09:45:44, 43004
<==        Row: 10512, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:35, 2025-06-18 09:45:35, 43056
<==        Row: 10459, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:34, 2025-06-18 09:45:34, 43065
<==        Row: 7527, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:46, 2025-06-17 22:27:46, 43667
<==        Row: 7385, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:42, 2025-06-17 22:27:42, 43689
<==        Row: 7324, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:40, 2025-06-17 22:27:40, 43702
<==        Row: 1283, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 17:20:59, 2025-01-19 17:20:59, 44490
<==        Row: 1238, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 15:15:44, 2025-01-19 15:15:44, 44498
<==        Row: 972, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 03:33:02, 2025-01-19 03:33:02, 44546
<==        Row: 913, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:47:37, 2025-01-19 00:47:37, 44559
<==        Row: 903, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:37:47, 2025-01-19 00:37:47, 44560
<==        Row: 900, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:31:26, 2025-01-19 00:31:26, 44561
<==        Row: 880, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 23:44:45, 2025-01-18 23:44:45, 44565
<==        Row: 860, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 22:55:04, 2025-01-18 22:55:04, 44569
<==        Row: 3186, folio, null, JSONL_EXTRACTION_6.12, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:25:19, 2025-06-17 22:25:19, 44577
<==      Total: 54
Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@614345d3]
2025-06-27 09:44:22 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索到20个唯一相关实体
2025-06-27 09:44:22 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 找到20个相关实体
2025-06-27 09:44:22 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 提取到20个feature描述
2025-06-27 09:44:22 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第1批，包含5个feature描述
2025-06-27 09:44:22 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2932
2025-06-27 09:44:26 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:44:26 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, memory_folio, folio_page]
2025-06-27 09:44:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, memory_folio]
2025-06-27 09:44:26 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 09:44:26 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 09:44:29 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 09:44:29 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 09:44:29 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-27 09:44:29 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-27 09:44:29 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-27 09:44:29 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 09:44:29 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 09:44:29 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-27 09:44:29 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-27 09:44:29 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-27 09:44:30 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 09:44:30 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 09:44:30 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 09:44:30 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-27 09:44:30 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-27 09:44:30 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-27 09:44:30 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第2批，包含5个feature描述
2025-06-27 09:44:30 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2786
2025-06-27 09:44:30 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 09:44:30 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 09:44:30 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 09:44:30 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-27 09:44:30 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-27 09:44:30 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-27 09:44:36 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:44:37 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第3批，包含5个feature描述
2025-06-27 09:44:37 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2590
2025-06-27 09:44:42 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:44:43 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第4批，包含5个feature描述
2025-06-27 09:44:43 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2608
2025-06-27 09:44:47 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:44:47 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 三元组搜索完成，共提取28个结果
2025-06-27 09:44:47 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 三元组搜索成功，找到28个结果
2025-06-27 09:44:56 [http-nio-8080-exec-1] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit=''}
2025-06-27 09:44:56 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=
2025-06-27 09:44:56 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=
2025-06-27 09:44:56 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=
2025-06-27 09:44:56 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 568
2025-06-27 09:44:56 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-27 09:44:56 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-27 09:44:56 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-27 09:44:56 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-27 09:44:56 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-27 09:44:56 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.9-rc4
2025-06-27 09:44:56 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-27 09:44:56 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=309, endLine=383, snippetLength=1575
2025-06-27 09:44:56 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-27 09:44:56 [http-nio-8080-exec-1] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-27 09:50:00 [http-nio-8080-exec-8] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:50:00 [http-nio-8080-exec-2] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:50:00 [http-nio-8080-exec-9] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:50:20 [http-nio-8080-exec-4] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:50:21 [http-nio-8080-exec-10] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:50:21 [http-nio-8080-exec-5] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:50:21 [http-nio-8080-exec-1] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:50:52 [http-nio-8080-exec-7] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:50:52 [http-nio-8080-exec-6] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:50:52 [http-nio-8080-exec-3] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:51:06 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='A folio in an operating system'}
2025-06-27 09:51:06 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=A folio in an operating system
2025-06-27 09:51:06 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=A folio in an operating system
2025-06-27 09:51:06 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='A folio in an operating system', version='null'}
2025-06-27 09:51:06 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=A folio in an operating system, version=null
2025-06-27 09:51:06 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=A folio in an operating system
2025-06-27 09:51:06 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1205
2025-06-27 09:51:06 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收三元组搜索请求: TripleSearchRequestDTO{concept='folio', context='folio是Linux内核的重要组件，需要分析其相关概念和关系。'}
2025-06-27 09:51:06 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 开始搜索三元组: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
2025-06-27 09:51:06 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索相关实体: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
Creating a new SqlSession
SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@401555d1] was not registered for synchronization because synchronization is not active
JDBC Connection [HikariProxyConnection@912695531 wrapping com.mysql.cj.jdbc.ConnectionImpl@517326e3] will not be managed by Spring
==>  Preparing: SELECT * FROM entities_extraction WHERE name_en = ?
==> Parameters: folio(String)
<==    Columns: eid, name_en, name_cn, source, definition_en, definition_cn, aliases, rel_desc, wikidata_id, create_time, update_time, feature_id
<==        Row: 57588, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:47, 2025-06-18 10:17:47, 33927
<==        Row: 57462, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:42, 2025-06-18 10:17:42, 33943
<==        Row: 53621, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34652
<==        Row: 53616, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34653
<==        Row: 45060, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:39, 2025-06-18 10:04:39, 36284
<==        Row: 44967, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36294
<==        Row: 44962, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36295
<==        Row: 41754, Folio, null, JSONL_EXTRACTION_6.1, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:02:50, 2025-06-18 10:02:50, 36894
<==        Row: 34240, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38350
<==        Row: 34231, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38351
<==        Row: 34221, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38353
<==        Row: 34207, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38355
<==        Row: 30507, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:42, 2025-06-18 09:56:42, 39099
<==        Row: 30368, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:37, 2025-06-18 09:56:37, 39123
<==        Row: 27246, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:55, 2025-06-18 09:54:55, 39729
<==        Row: 27197, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:53, 2025-06-18 09:54:53, 39738
<==        Row: 27097, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:50, 2025-06-18 09:54:50, 39758
<==        Row: 23515, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40454
<==        Row: 23511, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40455
<==        Row: 23506, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40456
<==        Row: 23500, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40457
<==        Row: 23457, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40468
<==        Row: 23433, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40471
<==        Row: 20228, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41114
<==        Row: 20218, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41116
<==        Row: 20210, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41117
<==        Row: 20202, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41119
<==        Row: 20193, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41120
<==        Row: 20191, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41121
<==        Row: 20186, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:52, 2025-06-18 09:50:52, 41122
<==        Row: 17391, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41675
<==        Row: 17379, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41677
<==        Row: 17354, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:20, 2025-06-18 09:49:20, 41682
<==        Row: 13712, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42404
<==        Row: 13700, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42407
<==        Row: 13619, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:17, 2025-06-18 09:47:17, 42422
<==        Row: 13600, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42426
<==        Row: 13598, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42427
<==        Row: 13578, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42431
<==        Row: 10759, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:44, 2025-06-18 09:45:44, 43004
<==        Row: 10512, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:35, 2025-06-18 09:45:35, 43056
<==        Row: 10459, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:34, 2025-06-18 09:45:34, 43065
<==        Row: 7527, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:46, 2025-06-17 22:27:46, 43667
<==        Row: 7385, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:42, 2025-06-17 22:27:42, 43689
<==        Row: 7324, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:40, 2025-06-17 22:27:40, 43702
<==        Row: 1283, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 17:20:59, 2025-01-19 17:20:59, 44490
<==        Row: 1238, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 15:15:44, 2025-01-19 15:15:44, 44498
<==        Row: 972, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 03:33:02, 2025-01-19 03:33:02, 44546
<==        Row: 913, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:47:37, 2025-01-19 00:47:37, 44559
<==        Row: 903, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:37:47, 2025-01-19 00:37:47, 44560
<==        Row: 900, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:31:26, 2025-01-19 00:31:26, 44561
<==        Row: 880, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 23:44:45, 2025-01-18 23:44:45, 44565
<==        Row: 860, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 22:55:04, 2025-01-18 22:55:04, 44569
<==        Row: 3186, folio, null, JSONL_EXTRACTION_6.12, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:25:19, 2025-06-17 22:25:19, 44577
<==      Total: 54
Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@401555d1]
2025-06-27 09:51:06 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索到20个唯一相关实体
2025-06-27 09:51:06 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 找到20个相关实体
2025-06-27 09:51:06 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 提取到20个feature描述
2025-06-27 09:51:06 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第1批，包含5个feature描述
2025-06-27 09:51:06 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2932
2025-06-27 09:51:06 [http-nio-8080-exec-4] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-27 09:51:06 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-27 09:51:06 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-27 09:51:12 [http-nio-8080-exec-1] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:51:12 [http-nio-8080-exec-7] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:51:12 [http-nio-8080-exec-6] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 09:51:14 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='A folio in an operating system'}
2025-06-27 09:51:14 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='A folio in an operating system', version='null'}
2025-06-27 09:51:14 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收三元组搜索请求: TripleSearchRequestDTO{concept='folio', context='folio是Linux内核的重要组件，需要分析其相关概念和关系。'}
2025-06-27 09:51:14 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=A folio in an operating system
2025-06-27 09:51:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=A folio in an operating system, version=null
2025-06-27 09:51:14 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 开始搜索三元组: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
2025-06-27 09:51:14 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=A folio in an operating system
2025-06-27 09:51:14 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=A folio in an operating system
2025-06-27 09:51:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索相关实体: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
2025-06-27 09:51:14 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1205
Creating a new SqlSession
SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@2a56e8ff] was not registered for synchronization because synchronization is not active
JDBC Connection [HikariProxyConnection@238996590 wrapping com.mysql.cj.jdbc.ConnectionImpl@517326e3] will not be managed by Spring
==>  Preparing: SELECT * FROM entities_extraction WHERE name_en = ?
==> Parameters: folio(String)
<==    Columns: eid, name_en, name_cn, source, definition_en, definition_cn, aliases, rel_desc, wikidata_id, create_time, update_time, feature_id
<==        Row: 57588, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:47, 2025-06-18 10:17:47, 33927
<==        Row: 57462, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:42, 2025-06-18 10:17:42, 33943
<==        Row: 53621, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34652
<==        Row: 53616, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34653
<==        Row: 45060, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:39, 2025-06-18 10:04:39, 36284
<==        Row: 44967, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36294
<==        Row: 44962, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36295
<==        Row: 41754, Folio, null, JSONL_EXTRACTION_6.1, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:02:50, 2025-06-18 10:02:50, 36894
<==        Row: 34240, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38350
<==        Row: 34231, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38351
<==        Row: 34221, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38353
<==        Row: 34207, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38355
<==        Row: 30507, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:42, 2025-06-18 09:56:42, 39099
<==        Row: 30368, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:37, 2025-06-18 09:56:37, 39123
<==        Row: 27246, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:55, 2025-06-18 09:54:55, 39729
<==        Row: 27197, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:53, 2025-06-18 09:54:53, 39738
<==        Row: 27097, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:50, 2025-06-18 09:54:50, 39758
<==        Row: 23515, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40454
<==        Row: 23511, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40455
<==        Row: 23506, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40456
<==        Row: 23500, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40457
<==        Row: 23457, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40468
<==        Row: 23433, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40471
<==        Row: 20228, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41114
<==        Row: 20218, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41116
<==        Row: 20210, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41117
<==        Row: 20202, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41119
<==        Row: 20193, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41120
<==        Row: 20191, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41121
<==        Row: 20186, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:52, 2025-06-18 09:50:52, 41122
<==        Row: 17391, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41675
<==        Row: 17379, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41677
<==        Row: 17354, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:20, 2025-06-18 09:49:20, 41682
<==        Row: 13712, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42404
<==        Row: 13700, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42407
<==        Row: 13619, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:17, 2025-06-18 09:47:17, 42422
<==        Row: 13600, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42426
<==        Row: 13598, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42427
<==        Row: 13578, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42431
<==        Row: 10759, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:44, 2025-06-18 09:45:44, 43004
<==        Row: 10512, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:35, 2025-06-18 09:45:35, 43056
<==        Row: 10459, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:34, 2025-06-18 09:45:34, 43065
<==        Row: 7527, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:46, 2025-06-17 22:27:46, 43667
<==        Row: 7385, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:42, 2025-06-17 22:27:42, 43689
<==        Row: 7324, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:40, 2025-06-17 22:27:40, 43702
<==        Row: 1283, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 17:20:59, 2025-01-19 17:20:59, 44490
<==        Row: 1238, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 15:15:44, 2025-01-19 15:15:44, 44498
<==        Row: 972, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 03:33:02, 2025-01-19 03:33:02, 44546
<==        Row: 913, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:47:37, 2025-01-19 00:47:37, 44559
<==        Row: 903, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:37:47, 2025-01-19 00:37:47, 44560
<==        Row: 900, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:31:26, 2025-01-19 00:31:26, 44561
<==        Row: 880, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 23:44:45, 2025-01-18 23:44:45, 44565
<==        Row: 860, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 22:55:04, 2025-01-18 22:55:04, 44569
<==        Row: 3186, folio, null, JSONL_EXTRACTION_6.12, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:25:19, 2025-06-17 22:25:19, 44577
<==      Total: 54
Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@2a56e8ff]
2025-06-27 09:51:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索到20个唯一相关实体
2025-06-27 09:51:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 找到20个相关实体
2025-06-27 09:51:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 提取到20个feature描述
2025-06-27 09:51:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第1批，包含5个feature描述
2025-06-27 09:51:14 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2932
2025-06-27 09:51:14 [http-nio-8080-exec-4] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-27 09:51:14 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-27 09:51:14 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-27 09:51:17 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:51:17 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, memory_folio, folio_page]
2025-06-27 09:51:17 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, memory_folio]
2025-06-27 09:51:17 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 09:51:17 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 09:51:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 09:51:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 09:51:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 09:51:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 09:51:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 09:51:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 09:51:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 09:51:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 09:51:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 09:51:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 09:51:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-27 09:51:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-27 09:51:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-27 09:51:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-27 09:51:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-27 09:51:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-27 09:51:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-27 09:51:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-27 09:51:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-27 09:51:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-27 09:51:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-27 09:51:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-27 09:51:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 09:51:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 09:51:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 09:51:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-27 09:51:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-27 09:51:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-27 09:51:21 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 09:51:21 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 09:51:21 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 09:51:21 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-27 09:51:21 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-27 09:51:21 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-27 09:51:21 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 09:51:21 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 09:51:21 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 09:51:21 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-27 09:51:21 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-27 09:51:21 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-27 09:51:25 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:51:25 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, folio_struct]
2025-06-27 09:51:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-27 09:51:25 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 09:51:25 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 09:51:27 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 09:51:27 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 09:51:27 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-27 09:51:27 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-27 09:51:27 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-27 09:51:27 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 09:51:27 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 09:51:27 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-27 09:51:27 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-27 09:51:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-27 09:51:28 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 09:51:28 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 09:51:28 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 09:51:28 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-27 09:51:28 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-27 09:51:28 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-27 09:51:28 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:51:28 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-27 09:51:28 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-27 09:51:28 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-27 09:51:28 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-27 09:51:28 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-27 09:51:28 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-27 09:51:28 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-27 09:51:28 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-27 09:51:28 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-27 09:51:28 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-27 09:51:29 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第2批，包含5个feature描述
2025-06-27 09:51:29 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2786
2025-06-27 09:51:34 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:51:35 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第2批，包含5个feature描述
2025-06-27 09:51:35 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2786
2025-06-27 09:51:40 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:51:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第3批，包含5个feature描述
2025-06-27 09:51:41 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2590
2025-06-27 09:51:50 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:51:51 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第4批，包含5个feature描述
2025-06-27 09:51:51 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2608
2025-06-27 09:51:54 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:51:55 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第3批，包含5个feature描述
2025-06-27 09:51:55 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2590
2025-06-27 09:52:00 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:52:00 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 三元组搜索完成，共提取23个结果
2025-06-27 09:52:00 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 三元组搜索成功，找到23个结果
2025-06-27 09:52:05 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:52:06 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第4批，包含5个feature描述
2025-06-27 09:52:06 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2608
2025-06-27 09:52:16 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 09:52:16 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 三元组搜索完成，共提取27个结果
2025-06-27 09:52:16 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 三元组搜索成功，找到27个结果
2025-06-27 09:53:12 [http-nio-8080-exec-10] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit=''}
2025-06-27 09:53:12 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=
2025-06-27 09:53:12 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=
2025-06-27 09:53:12 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=
2025-06-27 09:53:12 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 568
2025-06-27 09:53:12 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-27 09:53:12 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-27 09:53:12 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-27 09:53:12 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-27 09:53:12 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-27 09:53:12 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.9-rc4
2025-06-27 09:53:12 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-27 09:53:12 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=309, endLine=383, snippetLength=1575
2025-06-27 09:53:12 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-27 09:53:12 [http-nio-8080-exec-10] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-27 09:53:24 [http-nio-8080-exec-1] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='05c5323b2a344c19c51cd1b91a4ab9ae90853794'}
2025-06-27 09:53:24 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-27 09:53:24 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-27 09:53:24 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-27 09:53:24 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 698
2025-06-27 09:53:24 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-27 09:53:24 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-27 09:53:24 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-27 09:53:24 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-27 09:53:24 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-27 09:53:24 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.9-rc4
2025-06-27 09:53:24 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-27 09:53:24 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=309, endLine=383, snippetLength=1575
2025-06-27 09:53:24 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-27 09:53:24 [http-nio-8080-exec-1] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-27 09:53:38 [http-nio-8080-exec-5] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='21c690a349baab895dc68ab70d291e1598d7109d'}
2025-06-27 09:53:38 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-27 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-27 09:53:38 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-27 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 586
2025-06-27 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-27 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-27 09:53:38 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-27 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.6-rc4
2025-06-27 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.6-rc4
2025-06-27 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.6-rc4
2025-06-27 09:53:38 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-27 09:53:38 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=293, endLine=361, snippetLength=1454
2025-06-27 09:53:38 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-27 09:53:38 [http-nio-8080-exec-5] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-27 10:05:00 [http-nio-8080-exec-6] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 10:17:21 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Convert write_begin / write_end to take a folio', version='null'}
2025-06-27 10:17:21 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Convert write_begin / write_end to take a folio, version=null
2025-06-27 10:17:21 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Convert write_begin / write_end to take a folio
2025-06-27 10:17:21 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1222
2025-06-27 10:17:26 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 10:17:26 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, folio_page, file_folio, folio_struct, fs_folio]
2025-06-27 10:17:26 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, folio_page, file_folio, folio_struct]
2025-06-27 10:17:26 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 10:17:26 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 10:17:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 10:17:28 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 10:17:28 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 10:17:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 10:17:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 10:17:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 10:17:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 10:17:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 10:17:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 10:17:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 10:17:28 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-27 10:17:28 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-27 10:17:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-27 10:17:29 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-27 10:17:29 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-27 10:17:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-27 10:17:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-27 10:17:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-27 10:17:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-27 10:17:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-27 10:17:29 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-27 10:17:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-27 10:17:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-27 10:17:29 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-27 10:17:29 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-27 10:17:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-27 10:17:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-27 10:17:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-27 10:17:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-27 10:17:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-27 10:17:29 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=file_folio, version=v6.14
2025-06-27 10:17:29 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/file_folio?version=v6.14
2025-06-27 10:17:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 10:17:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 10:17:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 10:17:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=file_folio, url=https://elixir.bootlin.com/api/ident/linux/file_folio?version=v6.14, 提取到0个代码片段
2025-06-27 10:17:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_struct, version=v6.14
2025-06-27 10:17:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_struct?version=v6.14
2025-06-27 10:17:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 10:17:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 10:17:30 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 10:17:30 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_struct, url=https://elixir.bootlin.com/api/ident/linux/folio_struct?version=v6.14, 提取到0个代码片段
2025-06-27 10:17:30 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-27 10:17:30 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-27 10:26:39 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示'}
2025-06-27 10:26:39 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-27 10:26:39 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-27 10:26:39 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示', version='null'}
2025-06-27 10:26:39 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示, version=null
2025-06-27 10:26:39 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-27 10:26:39 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1283
2025-06-27 10:26:39 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 10:26:39 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 10:26:39 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-27 10:26:40 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-27 10:26:40 [http-nio-8080-exec-3] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-27 10:26:40 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-27 10:26:40 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-27 10:26:43 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 10:26:43 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [page, vm_page]
2025-06-27 10:26:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page, vm_page]
2025-06-27 10:26:43 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-27 10:26:43 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-27 10:26:49 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-27 10:26:49 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-27 10:26:49 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-27 10:26:49 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-27 10:26:49 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-27 10:26:49 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-27 10:26:49 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-27 10:26:49 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-27 10:26:49 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 10:26:49 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 10:26:49 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-27 10:26:49 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-27 10:26:49 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-27 10:26:49 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-27 10:26:49 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-27 10:26:49 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 10:26:49 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 10:26:49 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 10:26:49 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-27 10:26:49 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-27 10:26:49 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-27 10:49:02 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中的folio概念'}
2025-06-27 10:49:02 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中的folio概念
2025-06-27 10:49:02 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中的folio概念
2025-06-27 10:49:02 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中的folio概念', version='null'}
2025-06-27 10:49:02 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中的folio概念, version=null
2025-06-27 10:49:02 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中的folio概念
2025-06-27 10:49:02 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1189
2025-06-27 10:49:02 [http-nio-8080-exec-1] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-27 10:49:02 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-27 10:49:02 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-27 10:49:07 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 10:49:07 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, folio_page, memory_folio, linux_folio]
2025-06-27 10:49:07 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, folio_page, memory_folio]
2025-06-27 10:49:07 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 10:49:07 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 10:49:09 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 10:49:09 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 10:49:09 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 10:49:09 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 10:49:09 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 10:49:09 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 10:49:09 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 10:49:09 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 10:49:09 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 10:49:09 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 10:49:09 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-27 10:49:09 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-27 10:49:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-27 10:49:10 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-27 10:49:10 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-27 10:49:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-27 10:49:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-27 10:49:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-27 10:49:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-27 10:49:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-27 10:49:10 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-27 10:49:10 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-27 10:49:11 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 10:49:11 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 10:49:11 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 10:49:11 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-27 10:49:11 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-27 10:49:11 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-27 10:49:11 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-27 10:49:11 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-27 10:49:11 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-27 10:49:11 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-27 10:49:11 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-27 10:49:11 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-27 10:49:11 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-27 10:49:11 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-27 10:49:11 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-27 10:49:11 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-27 10:49:11 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 10:49:11 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 10:49:11 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 10:49:11 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-27 10:49:11 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-27 10:49:11 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-27 10:51:51 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='linux中folio是什么意思？'}
2025-06-27 10:51:51 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=linux中folio是什么意思？
2025-06-27 10:51:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=linux中folio是什么意思？
2025-06-27 10:51:51 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='linux中folio是什么意思？', version='null'}
2025-06-27 10:51:51 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=linux中folio是什么意思？, version=null
2025-06-27 10:51:51 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=linux中folio是什么意思？
2025-06-27 10:51:51 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1192
2025-06-27 10:51:51 [http-nio-8080-exec-8] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-27 10:51:51 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-27 10:51:51 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-27 10:51:56 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 10:51:56 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, folio_page, memory_folio]
2025-06-27 10:51:56 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, folio_page]
2025-06-27 10:51:56 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 10:51:56 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 10:52:00 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 10:52:00 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 10:52:00 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 10:52:00 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 10:52:00 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 10:52:00 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 10:52:00 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 10:52:00 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 10:52:00 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 10:52:00 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 10:52:00 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-27 10:52:00 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-27 10:52:00 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-27 10:52:00 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-27 10:52:00 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-27 10:52:00 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-27 10:52:00 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-27 10:52:00 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-27 10:52:00 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-27 10:52:01 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-27 10:52:01 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-27 10:52:01 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-27 10:52:01 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 10:52:01 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 10:52:01 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 10:52:01 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-27 10:52:01 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-27 10:52:01 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-27 10:52:01 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 10:52:01 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 10:52:01 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 10:52:01 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-27 10:52:01 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-27 10:52:01 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-27 10:52:02 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-27 10:52:02 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-27 10:52:02 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-27 10:52:02 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-27 10:52:02 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-27 10:52:02 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-27 10:52:02 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-27 10:52:02 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-27 10:52:02 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-27 10:52:02 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-27 10:52:10 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中folio是什么意思？'}
2025-06-27 10:52:10 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中folio是什么意思？
2025-06-27 10:52:10 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中folio是什么意思？
2025-06-27 10:52:10 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中folio是什么意思？', version='null'}
2025-06-27 10:52:10 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中folio是什么意思？, version=null
2025-06-27 10:52:10 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中folio是什么意思？
2025-06-27 10:52:10 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1192
2025-06-27 10:52:10 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-27 10:52:10 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-27 10:52:10 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-27 10:52:13 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 10:52:13 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, memory_folio, folio_page]
2025-06-27 10:52:13 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, memory_folio]
2025-06-27 10:52:13 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 10:52:13 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 10:52:16 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 10:52:16 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 10:52:16 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-27 10:52:16 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-27 10:52:16 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-27 10:52:16 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 10:52:16 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 10:52:16 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-27 10:52:16 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-27 10:52:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-27 10:52:17 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 10:52:17 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 10:52:17 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 10:52:17 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-27 10:52:17 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-27 10:52:17 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-27 10:52:17 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 10:52:17 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 10:52:17 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 10:52:17 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-27 10:52:17 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-27 10:52:17 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-27 10:55:33 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中folio是什么意思？ # Linux内核中的<concept>folio</concept>概念解析

## 概述

<concept>folio</concept>是Linux内核内存管理子系统中的一个重要数据结构，它代'}
2025-06-27 10:55:33 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中folio是什么意思？ # Linux内核中的<concept>folio</concept>概念解析

## 概述

<concept>folio</concept>是Linux内核内存管理子系统中的一个重要数据结构，它代
2025-06-27 10:55:33 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中folio是什么意思？ # Linux内核中的<concept>folio</concept>概念解析

## 概述

<concept>folio</concept>是Linux内核内存管理子系统中的一个重要数据结构，它代
2025-06-27 10:55:33 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中folio是什么意思？ # Linux内核中的<concept>folio</concept>概念解析

## 概述

<concept>folio</concept>是Linux内核内存管理子系统中的一个重要数据结构，它代', version='null'}
2025-06-27 10:55:33 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中folio是什么意思？ # Linux内核中的<concept>folio</concept>概念解析

## 概述

<concept>folio</concept>是Linux内核内存管理子系统中的一个重要数据结构，它代, version=null
2025-06-27 10:55:33 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中folio是什么意思？ # Linux内核中的<concept>folio</concept>概念解析

## 概述

<concept>folio</concept>是Linux内核内存管理子系统中的一个重要数据结构，它代
2025-06-27 10:55:33 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1293
2025-06-27 10:55:33 [http-nio-8080-exec-7] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-27 10:55:33 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-27 10:55:33 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-27 10:55:37 [http-nio-8080-exec-6] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 10:55:37 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, memory_folio, folio_page, struct_folio]
2025-06-27 10:55:37 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, memory_folio, folio_page]
2025-06-27 10:55:37 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 10:55:37 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 10:55:40 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 10:55:40 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 10:55:40 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 10:55:40 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 10:55:40 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 10:55:40 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 10:55:40 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 10:55:40 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 10:55:40 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 10:55:40 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 10:55:40 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-27 10:55:40 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-27 10:55:41 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-27 10:55:41 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-27 10:55:41 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-27 10:55:41 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-27 10:55:41 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-27 10:55:41 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-27 10:55:41 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-27 10:55:41 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-27 10:55:41 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-27 10:55:41 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-27 10:55:41 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 10:55:41 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 10:55:41 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 10:55:41 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-27 10:55:41 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-27 10:55:41 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-27 10:55:42 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 10:55:42 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 10:55:42 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 10:55:42 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-27 10:55:42 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-27 10:55:42 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-27 10:55:42 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-27 10:55:42 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-27 10:55:42 [http-nio-8080-exec-6] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-27 10:55:42 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-27 10:55:42 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-27 10:55:42 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-27 10:55:42 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-27 10:55:42 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-27 10:55:42 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增14个结果
2025-06-27 10:55:42 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到14个结果
2025-06-27 12:46:55 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中folio和page有什么区别？'}
2025-06-27 12:46:55 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中folio和page有什么区别？
2025-06-27 12:46:55 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中folio和page有什么区别？
2025-06-27 12:46:55 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='Linux中folio和page有什么区别？'}
2025-06-27 12:46:55 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中folio和page有什么区别？', version='null'}
2025-06-27 12:46:55 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=Linux中folio和page有什么区别？
2025-06-27 12:46:55 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中folio和page有什么区别？, version=null
2025-06-27 12:46:55 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=Linux中folio和page有什么区别？
2025-06-27 12:46:55 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中folio和page有什么区别？
2025-06-27 12:46:55 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1197
2025-06-27 12:46:55 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='Linux中folio和page有什么区别？', version='null'}
2025-06-27 12:46:55 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=Linux中folio和page有什么区别？, version=null
2025-06-27 12:46:55 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=Linux中folio和page有什么区别？
2025-06-27 12:46:55 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1196
2025-06-27 12:46:55 [http-nio-8080-exec-3] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-27 12:46:55 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 12:46:55 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-27 12:46:55 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 12:46:55 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-27 12:46:55 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-27 12:46:56 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-27 12:46:56 [http-nio-8080-exec-4] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-27 12:46:56 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-27 12:46:56 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-27 12:46:58 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 12:46:58 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [page, vm_page]
2025-06-27 12:46:58 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page, vm_page]
2025-06-27 12:46:58 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-27 12:46:58 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-27 12:46:58 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 12:46:58 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio]
2025-06-27 12:46:58 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio]
2025-06-27 12:46:58 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 12:46:58 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 12:47:02 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 12:47:02 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 12:47:02 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 12:47:02 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 12:47:02 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 12:47:02 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 12:47:02 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 12:47:02 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 12:47:02 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 12:47:02 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 12:47:02 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增6个结果
2025-06-27 12:47:02 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到6个结果
2025-06-27 12:47:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-27 12:47:08 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-27 12:47:08 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-27 12:47:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-27 12:47:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-27 12:47:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-27 12:47:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-27 12:47:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-27 12:47:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 12:47:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 12:47:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-27 12:47:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-27 12:47:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-27 12:47:08 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-27 12:47:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-27 12:47:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 12:47:08 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 12:47:08 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 12:47:08 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-27 12:47:08 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-27 12:47:08 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-27 12:53:50 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中folio和page有什么区别？ # Linux内核中<concept>folio</concept>与<concept>page</concept>的区别

## 基本概念

### <concept>Page</concept>
'}
2025-06-27 12:53:50 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中folio和page有什么区别？ # Linux内核中<concept>folio</concept>与<concept>page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 12:53:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中folio和page有什么区别？ # Linux内核中<concept>folio</concept>与<concept>page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 12:53:50 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中folio和page有什么区别？ # Linux内核中<concept>folio</concept>与<concept>page</concept>的区别

## 基本概念

### <concept>Page</concept>
', version='null'}
2025-06-27 12:53:50 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中folio和page有什么区别？ # Linux内核中<concept>folio</concept>与<concept>page</concept>的区别

## 基本概念

### <concept>Page</concept>
, version=null
2025-06-27 12:53:50 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中folio和page有什么区别？ # Linux内核中<concept>folio</concept>与<concept>page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 12:53:50 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1298
2025-06-27 12:53:50 [http-nio-8080-exec-8] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-27 12:53:50 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-27 12:53:50 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-27 12:53:53 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 12:53:53 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [folio, multi-page]
2025-06-27 12:53:53 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, multi-page]
2025-06-27 12:53:53 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 12:53:53 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 12:53:56 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 12:53:56 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 12:53:56 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 12:53:56 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 12:53:56 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 12:53:56 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 12:53:56 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 12:53:56 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 12:53:56 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 12:53:56 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 12:53:56 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=multi-page, version=v6.14
2025-06-27 12:53:56 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/multi-page?version=v6.14
2025-06-27 12:53:56 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 12:53:56 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 12:53:56 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 12:53:56 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=multi-page, url=https://elixir.bootlin.com/api/ident/linux/multi-page?version=v6.14, 提取到0个代码片段
2025-06-27 12:53:56 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增6个结果
2025-06-27 12:53:56 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到6个结果
2025-06-27 13:05:12 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中folio和page有什么区别？ # Linux内核中<concept>folio</concept>与<concept>page</concept>的区别

## 基本概念

### <concept>Page</concept>
'}
2025-06-27 13:05:12 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中folio和page有什么区别？ # Linux内核中<concept>folio</concept>与<concept>page</concept>的区别

## 基本概念

### <concept>Page</concept>
', version='null'}
2025-06-27 13:05:12 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中folio和page有什么区别？ # Linux内核中<concept>folio</concept>与<concept>page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 13:05:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中folio和page有什么区别？ # Linux内核中<concept>folio</concept>与<concept>page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 13:05:12 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中folio和page有什么区别？ # Linux内核中<concept>folio</concept>与<concept>page</concept>的区别

## 基本概念

### <concept>Page</concept>
, version=null
2025-06-27 13:05:12 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中folio和page有什么区别？ # Linux内核中<concept>folio</concept>与<concept>page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 13:05:12 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1298
2025-06-27 13:05:12 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-27 13:05:12 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-27 13:05:12 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-27 13:05:16 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 13:05:16 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [folio, multi-page]
2025-06-27 13:05:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, multi-page]
2025-06-27 13:05:16 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 13:05:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 13:05:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 13:05:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 13:05:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 13:05:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 13:05:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 13:05:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 13:05:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 13:05:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 13:05:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 13:05:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 13:05:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=multi-page, version=v6.14
2025-06-27 13:05:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/multi-page?version=v6.14
2025-06-27 13:05:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 13:05:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 13:05:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 13:05:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=multi-page, url=https://elixir.bootlin.com/api/ident/linux/multi-page?version=v6.14, 提取到0个代码片段
2025-06-27 13:05:20 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增6个结果
2025-06-27 13:05:20 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到6个结果
2025-06-27 13:07:02 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='flush_dcache_page', context='Convert write_begin / write_end to take a folio', version='null'}
2025-06-27 13:07:02 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=flush_dcache_page, context=Convert write_begin / write_end to take a folio, version=null
2025-06-27 13:07:02 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=flush_dcache_page, context=Convert write_begin / write_end to take a folio
2025-06-27 13:07:02 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1234
2025-06-27 13:07:06 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 13:07:06 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [flush_dcache_page, flush_dcache_folio, flush_dcache_folio_page, dcache_flush_folio, folio_flush_dcache, flush_dcache_for_folio]
2025-06-27 13:07:06 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [flush_dcache_page, flush_dcache_folio, flush_dcache_folio_page, dcache_flush_folio, folio_flush_dcache]
2025-06-27 13:07:06 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=flush_dcache_page, version=v6.14
2025-06-27 13:07:06 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/flush_dcache_page?version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 6727
2025-06-27 13:07:08 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 6727
2025-06-27 13:07:08 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=26, 引用=121
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=712, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=367, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/nommu.c, line=186, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/flush.c, line=77, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/csky/abiv1/cacheflush.c, line=38, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/csky/abiv2/inc/abi/cacheflush.h, line=29, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/mips/include/asm/cacheflush.h, line=65, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/nios2/mm/cacheflush.c, line=203, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/openrisc/include/asm/cacheflush.h, line=66, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/parisc/include/asm/cacheflush.h, line=49, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/powerpc/include/asm/cacheflush.h, line=48, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/riscv/include/asm/cacheflush.h, line=32, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sh/include/asm/cacheflush.h, line=47, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sparc/include/asm/cacheflush_32.h, line=43, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sparc/include/asm/cacheflush_64.h, line=51, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/xtensa/include/asm/cacheflush.h, line=131, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第131行的代码元素
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/asm-generic/cacheflush.h, line=51, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=716, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/include/asm/vdso/vsyscall.h, line=23, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=371, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=flush_dcache_page, url=https://elixir.bootlin.com/api/ident/linux/flush_dcache_page?version=v6.14, 提取到19个代码片段
2025-06-27 13:07:08 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=flush_dcache_folio, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/flush_dcache_folio?version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 7087
2025-06-27 13:07:08 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 7087
2025-06-27 13:07:08 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=46, 引用=85
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=334, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/nommu.c, line=180, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/flush.c, line=70, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/csky/abiv1/cacheflush.c, line=18, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/csky/abiv2/inc/abi/cacheflush.h, line=21, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/microblaze/include/asm/cacheflush.h, line=77, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/mips/include/asm/cacheflush.h, line=56, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/nios2/mm/cacheflush.c, line=175, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/openrisc/include/asm/cacheflush.h, line=59, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/parisc/kernel/cache.c, line=473, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/powerpc/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/riscv/include/asm/cacheflush.h, line=24, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sh/mm/cache.c, line=225, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sparc/mm/init_64.c, line=463, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/xtensa/mm/cache.c, line=126, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第126行的代码元素
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/cacheflush.h, line=14, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=mm/util.c, line=1236, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=710, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=365, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=flush_dcache_folio, url=https://elixir.bootlin.com/api/ident/linux/flush_dcache_folio?version=v6.14, 提取到20个代码片段
2025-06-27 13:07:08 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=flush_dcache_folio_page, version=v6.14
2025-06-27 13:07:08 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/flush_dcache_folio_page?version=v6.14
2025-06-27 13:07:09 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 13:07:09 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 13:07:09 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 13:07:09 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=flush_dcache_folio_page, url=https://elixir.bootlin.com/api/ident/linux/flush_dcache_folio_page?version=v6.14, 提取到0个代码片段
2025-06-27 13:07:09 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=dcache_flush_folio, version=v6.14
2025-06-27 13:07:09 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/dcache_flush_folio?version=v6.14
2025-06-27 13:07:09 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 13:07:09 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 13:07:09 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 13:07:09 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=dcache_flush_folio, url=https://elixir.bootlin.com/api/ident/linux/dcache_flush_folio?version=v6.14, 提取到0个代码片段
2025-06-27 13:07:09 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_flush_dcache, version=v6.14
2025-06-27 13:07:09 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_flush_dcache?version=v6.14
2025-06-27 13:07:09 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 13:07:09 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 13:07:09 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 13:07:09 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_flush_dcache, url=https://elixir.bootlin.com/api/ident/linux/folio_flush_dcache?version=v6.14, 提取到0个代码片段
2025-06-27 13:07:09 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增39个结果
2025-06-27 13:07:09 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到39个结果
2025-06-27 13:57:08 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context='什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li'}
2025-06-27 13:57:08 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context=什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-27 13:57:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint=什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-27 13:57:08 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context='什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li', version='null'}
2025-06-27 13:57:08 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context=什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li, version=null
2025-06-27 13:57:08 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context=什么是folio # Linux内核中的<concept>Folio</concept>概念解析

## 什么是<concept>Folio</concept>

<concept>Folio</concept>是Li
2025-06-27 13:57:08 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1284
2025-06-27 13:57:08 [http-nio-8080-exec-8] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-27 13:57:08 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-27 13:57:08 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-27 13:57:14 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 13:57:14 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [Folio, page_folio, compound_page, folio_page, memory_folio, large_page]
2025-06-27 13:57:14 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio, page_folio, compound_page, folio_page, memory_folio]
2025-06-27 13:57:14 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-27 13:57:14 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-27 13:57:15 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 13:57:15 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 13:57:15 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 13:57:15 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-27 13:57:15 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-27 13:57:15 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-27 13:57:15 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-27 13:57:15 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-27 13:57:15 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-27 13:57:15 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-27 13:57:15 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-27 13:57:15 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-27 13:57:15 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-27 13:57:15 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-27 13:57:15 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-27 13:57:15 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-27 13:57:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 13:57:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 13:57:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 13:57:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-27 13:57:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio_page, version=v6.14
2025-06-27 13:57:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14
2025-06-27 13:57:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 3229
2025-06-27 13:57:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 3229
2025-06-27 13:57:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=102
2025-06-27 13:57:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=220, version=v6.14
2025-06-27 13:57:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/mm/flush.c, line=223, version=v6.14
2025-06-27 13:57:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/copypage.c, line=35, version=v6.14
2025-06-27 13:57:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=269, version=v6.14
2025-06-27 13:57:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio_page, url=https://elixir.bootlin.com/api/ident/linux/folio_page?version=v6.14, 提取到4个代码片段
2025-06-27 13:57:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-27 13:57:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-27 13:57:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 13:57:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 13:57:16 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 13:57:16 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-27 13:57:16 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增8个结果
2025-06-27 13:57:16 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到8个结果
2025-06-27 13:58:43 [http-nio-8080-exec-2] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 13:58:44 [http-nio-8080-exec-10] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 14:00:05 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-27 14:00:05 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio conversion', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-27 14:00:05 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-27 14:00:05 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-27 14:00:05 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-27 14:00:05 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio conversion, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-27 14:00:05 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1266
2025-06-27 14:00:05 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-27 14:00:05 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？'}
2025-06-27 14:00:05 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='alloc_pages_vma', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-27 14:00:05 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-27 14:00:05 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-27 14:00:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=vma_alloc_folio, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-27 14:00:05 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-27 14:00:05 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=alloc_pages_vma, contextHint=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-27 14:00:05 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-27 14:00:05 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-27 14:00:05 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='vma_alloc_folio', context='在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？', version='null'}
2025-06-27 14:00:05 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-27 14:00:05 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=vma_alloc_folio, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？
2025-06-27 14:00:05 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1265
2025-06-27 14:00:05 [http-nio-8080-exec-5] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio conversion
2025-06-27 14:00:05 [http-nio-8080-exec-8] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: alloc_pages_vma
2025-06-27 14:00:05 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: vma_alloc_folio
2025-06-27 14:00:05 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=alloc_pages_vma, explanationLength=60
2025-06-27 14:00:05 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio conversion, explanationLength=61
2025-06-27 14:00:05 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=alloc_pages_vma
2025-06-27 14:00:05 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=vma_alloc_folio, explanationLength=60
2025-06-27 14:00:05 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio conversion
2025-06-27 14:00:05 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=vma_alloc_folio
2025-06-27 14:00:21 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:00:21 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio conversion]
2025-06-27 14:00:21 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio conversion]
2025-06-27 14:00:21 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio conversion, version=v6.14
2025-06-27 14:00:21 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14
2025-06-27 14:00:23 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:00:23 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:00:23 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:00:23 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio conversion, url=https://elixir.bootlin.com/api/ident/linux/folio_conversion?version=v6.14, 提取到0个代码片段
2025-06-27 14:00:23 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-27 14:00:23 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=folio conversion, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-27 14:00:25 [http-nio-8080-exec-7] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:00:25 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [alloc_pages_vma, vma_alloc_pages, alloc_pages_in_vma, vma_pages_alloc, vma_page_allocation, vma_mem_alloc]
2025-06-27 14:00:25 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [alloc_pages_vma, vma_alloc_pages, alloc_pages_in_vma, vma_pages_alloc, vma_page_allocation]
2025-06-27 14:00:25 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_vma, version=v6.14
2025-06-27 14:00:25 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14
2025-06-27 14:00:25 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:00:25 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:00:25 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:00:25 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_vma?version=v6.14, 提取到0个代码片段
2025-06-27 14:00:25 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_pages, version=v6.14
2025-06-27 14:00:25 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14
2025-06-27 14:00:25 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:00:25 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:00:25 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:00:25 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_pages, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_pages?version=v6.14, 提取到0个代码片段
2025-06-27 14:00:25 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_pages_in_vma, version=v6.14
2025-06-27 14:00:25 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14
2025-06-27 14:00:26 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:00:26 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:00:26 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:00:26 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_pages_in_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_pages_in_vma?version=v6.14, 提取到0个代码片段
2025-06-27 14:00:26 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_pages_alloc, version=v6.14
2025-06-27 14:00:26 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_pages_alloc?version=v6.14
2025-06-27 14:00:26 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:00:26 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:00:26 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:00:26 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_pages_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_pages_alloc?version=v6.14, 提取到0个代码片段
2025-06-27 14:00:26 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_page_allocation, version=v6.14
2025-06-27 14:00:26 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_page_allocation?version=v6.14
2025-06-27 14:00:26 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:00:26 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [vma_alloc_folio, vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, alloc_vma_folio]
2025-06-27 14:00:26 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [vma_alloc_folio, alloc_folio_vma, vma_folio_alloc, alloc_vma_folio]
2025-06-27 14:00:26 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_alloc_folio, version=v6.14
2025-06-27 14:00:26 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14
2025-06-27 14:00:26 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:00:26 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:00:26 [http-nio-8080-exec-7] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:00:26 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_page_allocation, url=https://elixir.bootlin.com/api/ident/linux/vma_page_allocation?version=v6.14, 提取到0个代码片段
2025-06-27 14:00:26 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-27 14:00:26 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=alloc_pages_vma, context=在Linux的folio conversion过程中，从 alloc_pages_vma() 到 vma_alloc_folio() 的变更是在哪个版本引入的？, version=null
2025-06-27 14:00:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 773
2025-06-27 14:00:27 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 773
2025-06-27 14:00:27 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=13
2025-06-27 14:00:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/page.h, line=17, version=v6.14
2025-06-27 14:00:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-27 14:00:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm64/mm/fault.c, line=1026, version=v6.14
2025-06-27 14:00:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/m68k/include/asm/page_no.h, line=17, version=v6.14
2025-06-27 14:00:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第17行的代码元素
2025-06-27 14:00:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_alloc_folio, url=https://elixir.bootlin.com/api/ident/linux/vma_alloc_folio?version=v6.14, 提取到1个代码片段
2025-06-27 14:00:27 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_folio_vma, version=v6.14
2025-06-27 14:00:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14
2025-06-27 14:00:28 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:00:28 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:00:28 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:00:28 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_folio_vma, url=https://elixir.bootlin.com/api/ident/linux/alloc_folio_vma?version=v6.14, 提取到0个代码片段
2025-06-27 14:00:28 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vma_folio_alloc, version=v6.14
2025-06-27 14:00:28 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14
2025-06-27 14:00:28 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:00:28 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:00:28 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:00:28 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vma_folio_alloc, url=https://elixir.bootlin.com/api/ident/linux/vma_folio_alloc?version=v6.14, 提取到0个代码片段
2025-06-27 14:00:28 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=alloc_vma_folio, version=v6.14
2025-06-27 14:00:28 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/alloc_vma_folio?version=v6.14
2025-06-27 14:00:28 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:00:28 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:00:28 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:00:28 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=alloc_vma_folio, url=https://elixir.bootlin.com/api/ident/linux/alloc_vma_folio?version=v6.14, 提取到0个代码片段
2025-06-27 14:00:28 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增1个结果
2025-06-27 14:00:28 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到1个结果
2025-06-27 14:02:24 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='memory management', context='linux内核中内存管理相关的特性有哪些？'}
2025-06-27 14:02:24 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=memory management, context=linux内核中内存管理相关的特性有哪些？
2025-06-27 14:02:24 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=memory management, contextHint=linux内核中内存管理相关的特性有哪些？
2025-06-27 14:02:24 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='memory management', context='linux内核中内存管理相关的特性有哪些？', version='null'}
2025-06-27 14:02:24 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=memory management, context=linux内核中内存管理相关的特性有哪些？, version=null
2025-06-27 14:02:24 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=memory management, context=linux内核中内存管理相关的特性有哪些？
2025-06-27 14:02:24 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1208
2025-06-27 14:02:24 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=memory management, explanationLength=1503
2025-06-27 14:02:24 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=memory management
2025-06-27 14:02:36 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:02:36 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了5个搜索实体: [memory management, memory_management, mm, memory_subsystem, mem_mgmt]
2025-06-27 14:02:36 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [memory management, memory_management, mm, memory_subsystem, mem_mgmt]
2025-06-27 14:02:36 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory management, version=v6.14
2025-06-27 14:02:36 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_management?version=v6.14
2025-06-27 14:02:37 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:02:37 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:02:37 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:02:37 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory management, url=https://elixir.bootlin.com/api/ident/linux/memory_management?version=v6.14, 提取到0个代码片段
2025-06-27 14:02:37 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_management, version=v6.14
2025-06-27 14:02:37 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_management?version=v6.14
2025-06-27 14:02:38 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:02:38 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:02:38 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:02:38 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_management, url=https://elixir.bootlin.com/api/ident/linux/memory_management?version=v6.14, 提取到0个代码片段
2025-06-27 14:02:38 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=mm, version=v6.14
2025-06-27 14:02:38 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/mm?version=v6.14
2025-06-27 14:02:41 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 138929
2025-06-27 14:02:41 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 138929
2025-06-27 14:02:41 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=106, 引用=13338
2025-06-27 14:02:41 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=42, version=v6.14
2025-06-27 14:02:41 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=43, version=v6.14
2025-06-27 14:02:41 [http-nio-8080-exec-1] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=44, version=v6.14
2025-06-27 14:02:41 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=mm, url=https://elixir.bootlin.com/api/ident/linux/mm?version=v6.14, 提取到3个代码片段
2025-06-27 14:02:41 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_subsystem, version=v6.14
2025-06-27 14:02:41 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_subsystem?version=v6.14
2025-06-27 14:02:41 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:02:41 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:02:41 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:02:41 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_subsystem, url=https://elixir.bootlin.com/api/ident/linux/memory_subsystem?version=v6.14, 提取到0个代码片段
2025-06-27 14:02:41 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=mem_mgmt, version=v6.14
2025-06-27 14:02:41 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/mem_mgmt?version=v6.14
2025-06-27 14:02:41 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:02:42 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:02:42 [http-nio-8080-exec-1] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:02:42 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=mem_mgmt, url=https://elixir.bootlin.com/api/ident/linux/mem_mgmt?version=v6.14, 提取到0个代码片段
2025-06-27 14:02:42 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-27 14:02:42 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-27 14:13:10 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='Linux中folio和page的区别是什么？'}
2025-06-27 14:13:10 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=Linux中folio和page的区别是什么？
2025-06-27 14:13:10 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=Linux中folio和page的区别是什么？
2025-06-27 14:13:10 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='Linux中folio和page的区别是什么？', version='null'}
2025-06-27 14:13:10 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='Linux中folio和page的区别是什么？'}
2025-06-27 14:13:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=Linux中folio和page的区别是什么？, version=null
2025-06-27 14:13:10 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=Linux中folio和page的区别是什么？
2025-06-27 14:13:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=Linux中folio和page的区别是什么？
2025-06-27 14:13:10 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=Linux中folio和page的区别是什么？
2025-06-27 14:13:10 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1198
2025-06-27 14:13:10 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='Linux中folio和page的区别是什么？', version='null'}
2025-06-27 14:13:10 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=Linux中folio和page的区别是什么？, version=null
2025-06-27 14:13:10 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=Linux中folio和page的区别是什么？
2025-06-27 14:13:10 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1197
2025-06-27 14:13:10 [http-nio-8080-exec-2] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-27 14:13:10 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-27 14:13:10 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-27 14:13:10 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 14:13:10 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 14:13:10 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-27 14:13:11 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-27 14:13:11 [http-nio-8080-exec-4] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-27 14:13:11 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-27 14:13:11 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-27 14:13:14 [http-nio-8080-exec-3] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:13:14 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio]
2025-06-27 14:13:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio]
2025-06-27 14:13:14 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 14:13:14 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 14:13:14 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:13:14 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [page, PFN]
2025-06-27 14:13:14 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page, PFN]
2025-06-27 14:13:14 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-27 14:13:14 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-27 14:13:16 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 14:13:16 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 14:13:16 [http-nio-8080-exec-3] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 14:13:16 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 14:13:16 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 14:13:16 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 14:13:16 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 14:13:16 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 14:13:16 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 14:13:16 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 14:13:16 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增6个结果
2025-06-27 14:13:16 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到6个结果
2025-06-27 14:13:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-27 14:13:25 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-27 14:13:25 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-27 14:13:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-27 14:13:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-27 14:13:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-27 14:13:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-27 14:13:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-27 14:13:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 14:13:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 14:13:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-27 14:13:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-27 14:13:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-27 14:13:25 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=PFN, version=v6.14
2025-06-27 14:13:25 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14
2025-06-27 14:13:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 550
2025-06-27 14:13:26 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 550
2025-06-27 14:13:26 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=2, 引用=14
2025-06-27 14:13:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=236, version=v6.14
2025-06-27 14:13:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/kernel/phys2virt.S, line=32, version=v6.14
2025-06-27 14:13:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sparc/include/asm/leon.h, line=254, version=v6.14
2025-06-27 14:13:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第254行的代码元素
2025-06-27 14:13:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=PFN, url=https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14, 提取到2个代码片段
2025-06-27 14:13:26 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增9个结果
2025-06-27 14:13:26 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到9个结果
2025-06-27 14:14:31 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='linux里folio和page区别'}
2025-06-27 14:14:31 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=linux里folio和page区别
2025-06-27 14:14:31 [http-nio-8080-exec-7] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=linux里folio和page区别
2025-06-27 14:14:31 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='linux里folio和page区别'}
2025-06-27 14:14:31 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='linux里folio和page区别', version='null'}
2025-06-27 14:14:31 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=linux里folio和page区别
2025-06-27 14:14:31 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=linux里folio和page区别, version=null
2025-06-27 14:14:31 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=linux里folio和page区别
2025-06-27 14:14:31 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=linux里folio和page区别
2025-06-27 14:14:31 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1193
2025-06-27 14:14:31 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='linux里folio和page区别', version='null'}
2025-06-27 14:14:31 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=linux里folio和page区别, version=null
2025-06-27 14:14:31 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=linux里folio和page区别
2025-06-27 14:14:31 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1192
2025-06-27 14:14:31 [http-nio-8080-exec-7] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-27 14:14:31 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-27 14:14:31 [http-nio-8080-exec-7] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-27 14:14:31 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 14:14:31 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 14:14:31 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-27 14:14:32 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-27 14:14:32 [http-nio-8080-exec-9] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-27 14:14:32 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-27 14:14:32 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-27 14:14:34 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:14:34 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [folio]
2025-06-27 14:14:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio]
2025-06-27 14:14:34 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 14:14:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 14:14:34 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:14:34 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [page]
2025-06-27 14:14:34 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page]
2025-06-27 14:14:34 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-27 14:14:34 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-27 14:14:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 14:14:37 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 14:14:37 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 14:14:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 14:14:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 14:14:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 14:14:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 14:14:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 14:14:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 14:14:37 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 14:14:37 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增6个结果
2025-06-27 14:14:37 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到6个结果
2025-06-27 14:14:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-27 14:14:41 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-27 14:14:41 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-27 14:14:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-27 14:14:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-27 14:14:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-27 14:14:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-27 14:14:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-27 14:14:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 14:14:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 14:14:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-27 14:14:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-27 14:14:41 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-27 14:14:41 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-27 14:14:41 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-27 14:15:10 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='Linux中folio和page的区别是什么？ # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>
'}
2025-06-27 14:15:10 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=Linux中folio和page的区别是什么？ # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 14:15:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=Linux中folio和page的区别是什么？ # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 14:15:10 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='Linux中folio和page的区别是什么？ # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>
', version='null'}
2025-06-27 14:15:10 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=Linux中folio和page的区别是什么？ # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>
, version=null
2025-06-27 14:15:10 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=Linux中folio和page的区别是什么？ # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 14:15:10 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1298
2025-06-27 14:15:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 14:15:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 14:15:10 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-27 14:15:11 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-27 14:15:11 [http-nio-8080-exec-3] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-27 14:15:11 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-27 14:15:11 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-27 14:15:14 [http-nio-8080-exec-8] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:15:14 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [Page, PFN]
2025-06-27 14:15:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page, PFN]
2025-06-27 14:15:14 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-27 14:15:14 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-27 14:15:15 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-27 14:15:15 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-27 14:15:15 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-27 14:15:15 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-27 14:15:15 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-27 14:15:15 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-27 14:15:15 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-27 14:15:15 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=PFN, version=v6.14
2025-06-27 14:15:15 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14
2025-06-27 14:15:16 [http-nio-8080-exec-8] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 550
2025-06-27 14:15:16 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 550
2025-06-27 14:15:16 [http-nio-8080-exec-8] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=2, 引用=14
2025-06-27 14:15:16 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=236, version=v6.14
2025-06-27 14:15:16 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/kernel/phys2virt.S, line=32, version=v6.14
2025-06-27 14:15:16 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/sparc/include/asm/leon.h, line=254, version=v6.14
2025-06-27 14:15:16 [http-nio-8080-exec-8] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第254行的代码元素
2025-06-27 14:15:16 [http-nio-8080-exec-8] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=PFN, url=https://elixir.bootlin.com/api/ident/linux/PFN?version=v6.14, 提取到2个代码片段
2025-06-27 14:15:16 [http-nio-8080-exec-8] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增5个结果
2025-06-27 14:15:16 [http-nio-8080-exec-8] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到5个结果
2025-06-27 14:17:45 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示'}
2025-06-27 14:17:45 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-27 14:17:45 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-27 14:17:45 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示', version='null'}
2025-06-27 14:17:45 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示, version=null
2025-06-27 14:17:45 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-27 14:17:45 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1283
2025-06-27 14:17:45 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 14:17:45 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 14:17:45 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-27 14:17:46 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-27 14:17:46 [http-nio-8080-exec-2] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-27 14:17:46 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-27 14:17:46 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-27 14:17:49 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:17:49 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [page, vm_page]
2025-06-27 14:17:49 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page, vm_page]
2025-06-27 14:17:49 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-27 14:17:49 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-27 14:17:56 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-27 14:17:56 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-27 14:17:56 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-27 14:17:56 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-27 14:17:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-27 14:17:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-27 14:17:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-27 14:17:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-27 14:17:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 14:17:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 14:17:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-27 14:17:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-27 14:17:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-27 14:17:57 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-27 14:17:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-27 14:17:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:17:57 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:17:57 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:17:57 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-27 14:17:57 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-27 14:17:57 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
2025-06-27 14:18:16 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Page', context='linux里folio和page区别 # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>
', version='null'}
2025-06-27 14:18:16 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Page', context='linux里folio和page区别 # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>
'}
2025-06-27 14:18:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Page, context=linux里folio和page区别 # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>
, version=null
2025-06-27 14:18:16 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Page, context=linux里folio和page区别 # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 14:18:16 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Page, context=linux里folio和page区别 # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 14:18:16 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Page, contextHint=linux里folio和page区别 # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 14:18:16 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1293
2025-06-27 14:18:16 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 14:18:16 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 14:18:16 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-27 14:18:16 [http-nio-8080-exec-3] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-27 14:18:16 [http-nio-8080-exec-3] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-27 14:18:16 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Page, explanationLength=387
2025-06-27 14:18:16 [http-nio-8080-exec-3] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Page
2025-06-27 14:18:19 [http-nio-8080-exec-10] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:18:19 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [Page]
2025-06-27 14:18:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Page]
2025-06-27 14:18:19 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Page, version=v6.14
2025-06-27 14:18:19 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14
2025-06-27 14:18:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 518
2025-06-27 14:18:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 518
2025-06-27 14:18:20 [http-nio-8080-exec-10] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=11
2025-06-27 14:18:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=174, version=v6.14
2025-06-27 14:18:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/tlbex.S, line=358, version=v6.14
2025-06-27 14:18:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arm/boot/compressed/head.S, line=793, version=v6.14
2025-06-27 14:18:20 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Page, url=https://elixir.bootlin.com/api/ident/linux/Page?version=v6.14, 提取到3个代码片段
2025-06-27 14:18:20 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增3个结果
2025-06-27 14:18:20 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到3个结果
2025-06-27 14:18:45 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='Folio', context='linux里folio和page区别 # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>
'}
2025-06-27 14:18:45 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=Folio, context=linux里folio和page区别 # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 14:18:45 [http-nio-8080-exec-1] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=Folio, contextHint=linux里folio和page区别 # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 14:18:45 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='Folio', context='linux里folio和page区别 # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>
', version='null'}
2025-06-27 14:18:45 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=Folio, context=linux里folio和page区别 # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>
, version=null
2025-06-27 14:18:45 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=Folio, context=linux里folio和page区别 # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>

2025-06-27 14:18:45 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1294
2025-06-27 14:18:46 [http-nio-8080-exec-1] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: Folio
2025-06-27 14:18:46 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=Folio, explanationLength=50
2025-06-27 14:18:46 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=Folio
2025-06-27 14:18:49 [http-nio-8080-exec-9] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:18:49 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了1个搜索实体: [Folio]
2025-06-27 14:18:49 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [Folio]
2025-06-27 14:18:49 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=Folio, version=v6.14
2025-06-27 14:18:49 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14
2025-06-27 14:18:51 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:18:51 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:18:51 [http-nio-8080-exec-9] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:18:51 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=Folio, url=https://elixir.bootlin.com/api/ident/linux/Folio?version=v6.14, 提取到0个代码片段
2025-06-27 14:18:51 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-27 14:18:51 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=Folio, context=linux里folio和page区别 # Linux内核中<concept>Folio</concept>与<concept>Page</concept>的区别

## 基本概念

### <concept>Page</concept>
, version=null
2025-06-27 14:22:25 [http-nio-8080-exec-6] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 14:22:25 [http-nio-8080-exec-8] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 14:22:25 [http-nio-8080-exec-3] ERROR c.c.a.common.GlobalExceptionHandler - 系统异常: GET /api/concepts/popular
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/concepts/popular.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:107)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 14:22:27 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='folio', context='A folio in an operating system'}
2025-06-27 14:22:27 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='folio', context='A folio in an operating system', version='null'}
2025-06-27 14:22:27 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 接收三元组搜索请求: TripleSearchRequestDTO{concept='folio', context='folio是Linux内核的重要组件，需要分析其相关概念和关系。'}
2025-06-27 14:22:27 [http-nio-8080-exec-9] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=folio, context=A folio in an operating system
2025-06-27 14:22:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=folio, context=A folio in an operating system, version=null
2025-06-27 14:22:27 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=folio, context=A folio in an operating system
2025-06-27 14:22:27 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 开始搜索三元组: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
2025-06-27 14:22:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=folio, contextHint=A folio in an operating system
2025-06-27 14:22:27 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1205
2025-06-27 14:22:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索相关实体: concept=folio, context=folio是Linux内核的重要组件，需要分析其相关概念和关系。
Creating a new SqlSession
SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@b686a55] was not registered for synchronization because synchronization is not active
JDBC Connection [HikariProxyConnection@905416042 wrapping com.mysql.cj.jdbc.ConnectionImpl@6a2a92b0] will not be managed by Spring
==>  Preparing: SELECT * FROM entities_extraction WHERE name_en = ?
==> Parameters: folio(String)
<==    Columns: eid, name_en, name_cn, source, definition_en, definition_cn, aliases, rel_desc, wikidata_id, create_time, update_time, feature_id
<==        Row: 57588, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:47, 2025-06-18 10:17:47, 33927
<==        Row: 57462, folio, null, JSONL_EXTRACTION_5.17, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:17:42, 2025-06-18 10:17:42, 33943
<==        Row: 53621, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34652
<==        Row: 53616, folio, null, JSONL_EXTRACTION_5.18, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:15:36, 2025-06-18 10:15:36, 34653
<==        Row: 45060, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:39, 2025-06-18 10:04:39, 36284
<==        Row: 44967, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36294
<==        Row: 44962, folio, null, JSONL_EXTRACTION_6.0, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:04:35, 2025-06-18 10:04:35, 36295
<==        Row: 41754, Folio, null, JSONL_EXTRACTION_6.1, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 10:02:50, 2025-06-18 10:02:50, 36894
<==        Row: 34240, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38350
<==        Row: 34231, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:44, 2025-06-18 09:58:44, 38351
<==        Row: 34221, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38353
<==        Row: 34207, folio, null, JSONL_EXTRACTION_6.3, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:58:43, 2025-06-18 09:58:43, 38355
<==        Row: 30507, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:42, 2025-06-18 09:56:42, 39099
<==        Row: 30368, folio, null, JSONL_EXTRACTION_6.4, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:56:37, 2025-06-18 09:56:37, 39123
<==        Row: 27246, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:55, 2025-06-18 09:54:55, 39729
<==        Row: 27197, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:53, 2025-06-18 09:54:53, 39738
<==        Row: 27097, folio, null, JSONL_EXTRACTION_6.5, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:54:50, 2025-06-18 09:54:50, 39758
<==        Row: 23515, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40454
<==        Row: 23511, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40455
<==        Row: 23506, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40456
<==        Row: 23500, Folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:52, 2025-06-18 09:52:52, 40457
<==        Row: 23457, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40468
<==        Row: 23433, folio, null, JSONL_EXTRACTION_6.6, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:52:50, 2025-06-18 09:52:50, 40471
<==        Row: 20228, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41114
<==        Row: 20218, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:54, 2025-06-18 09:50:54, 41116
<==        Row: 20210, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41117
<==        Row: 20202, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41119
<==        Row: 20193, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41120
<==        Row: 20191, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:53, 2025-06-18 09:50:53, 41121
<==        Row: 20186, folio, null, JSONL_EXTRACTION_6.7, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:50:52, 2025-06-18 09:50:52, 41122
<==        Row: 17391, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41675
<==        Row: 17379, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:21, 2025-06-18 09:49:21, 41677
<==        Row: 17354, folio, null, JSONL_EXTRACTION_6.8, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:49:20, 2025-06-18 09:49:20, 41682
<==        Row: 13712, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42404
<==        Row: 13700, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:20, 2025-06-18 09:47:20, 42407
<==        Row: 13619, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:17, 2025-06-18 09:47:17, 42422
<==        Row: 13600, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42426
<==        Row: 13598, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42427
<==        Row: 13578, folio, null, JSONL_EXTRACTION_6.9, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:47:16, 2025-06-18 09:47:16, 42431
<==        Row: 10759, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:44, 2025-06-18 09:45:44, 43004
<==        Row: 10512, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:35, 2025-06-18 09:45:35, 43056
<==        Row: 10459, folio, null, JSONL_EXTRACTION_6.10, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-18 09:45:34, 2025-06-18 09:45:34, 43065
<==        Row: 7527, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:46, 2025-06-17 22:27:46, 43667
<==        Row: 7385, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:42, 2025-06-17 22:27:42, 43689
<==        Row: 7324, folio, null, JSONL_EXTRACTION_6.11, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:27:40, 2025-06-17 22:27:40, 43702
<==        Row: 1283, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 17:20:59, 2025-01-19 17:20:59, 44490
<==        Row: 1238, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 15:15:44, 2025-01-19 15:15:44, 44498
<==        Row: 972, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 03:33:02, 2025-01-19 03:33:02, 44546
<==        Row: 913, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:47:37, 2025-01-19 00:47:37, 44559
<==        Row: 903, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:37:47, 2025-01-19 00:37:47, 44560
<==        Row: 900, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-19 00:31:26, 2025-01-19 00:31:26, 44561
<==        Row: 880, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 23:44:45, 2025-01-18 23:44:45, 44565
<==        Row: 860, folio, , reference too long, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, , 2025-01-18 22:55:04, 2025-01-18 22:55:04, 44569
<==        Row: 3186, folio, null, JSONL_EXTRACTION_6.12, <<BLOB>>, <<BLOB>>, <<BLOB>>, <<BLOB>>, null, 2025-06-17 22:25:19, 2025-06-17 22:25:19, 44577
<==      Total: 54
Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@b686a55]
2025-06-27 14:22:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 搜索到20个唯一相关实体
2025-06-27 14:22:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 找到20个相关实体
2025-06-27 14:22:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 提取到20个feature描述
2025-06-27 14:22:27 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第1批，包含5个feature描述
2025-06-27 14:22:27 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2932
2025-06-27 14:22:27 [http-nio-8080-exec-9] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: folio
2025-06-27 14:22:27 [http-nio-8080-exec-9] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=folio, explanationLength=50
2025-06-27 14:22:27 [http-nio-8080-exec-9] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=folio
2025-06-27 14:22:31 [http-nio-8080-exec-2] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:22:31 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了6个搜索实体: [folio, page_folio, compound_page, large_page, memory_folio, folio_page]
2025-06-27 14:22:31 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [folio, page_folio, compound_page, large_page, memory_folio]
2025-06-27 14:22:31 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=folio, version=v6.14
2025-06-27 14:22:31 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14
2025-06-27 14:22:33 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 99425
2025-06-27 14:22:33 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 99425
2025-06-27 14:22:33 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=13, 引用=16425
2025-06-27 14:22:33 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=324, version=v6.14
2025-06-27 14:22:33 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/mm_types.h, line=1, version=v6.14
2025-06-27 14:22:33 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 14:22:33 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/include/asm/cacheflush.h, line=31, version=v6.14
2025-06-27 14:22:33 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=705, version=v6.14
2025-06-27 14:22:33 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:22:33 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/mm_types.h, line=286, version=v6.14
2025-06-27 14:22:33 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=folio, url=https://elixir.bootlin.com/api/ident/linux/folio?version=v6.14, 提取到6个代码片段
2025-06-27 14:22:33 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page_folio, version=v6.14
2025-06-27 14:22:33 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14
2025-06-27 14:22:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 10934
2025-06-27 14:22:34 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 10934
2025-06-27 14:22:34 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=1, 引用=401
2025-06-27 14:22:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=714, version=v6.14
2025-06-27 14:22:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=885, version=v6.14
2025-06-27 14:22:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/arc/mm/cache.c, line=886, version=v6.14
2025-06-27 14:22:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找注释块: file=include/linux/page-flags.h, line=252, version=v6.14
2025-06-27 14:22:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page_folio, url=https://elixir.bootlin.com/api/ident/linux/page_folio?version=v6.14, 提取到4个代码片段
2025-06-27 14:22:34 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=compound_page, version=v6.14
2025-06-27 14:22:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14
2025-06-27 14:22:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:22:34 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:22:34 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:22:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=compound_page, url=https://elixir.bootlin.com/api/ident/linux/compound_page?version=v6.14, 提取到0个代码片段
2025-06-27 14:22:34 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=large_page, version=v6.14
2025-06-27 14:22:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14
2025-06-27 14:22:34 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第2批，包含5个feature描述
2025-06-27 14:22:34 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2786
2025-06-27 14:22:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:22:34 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:22:34 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:22:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=large_page, url=https://elixir.bootlin.com/api/ident/linux/large_page?version=v6.14, 提取到0个代码片段
2025-06-27 14:22:34 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=memory_folio, version=v6.14
2025-06-27 14:22:34 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14
2025-06-27 14:22:35 [http-nio-8080-exec-2] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:22:35 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:22:35 [http-nio-8080-exec-2] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:22:35 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=memory_folio, url=https://elixir.bootlin.com/api/ident/linux/memory_folio?version=v6.14, 提取到0个代码片段
2025-06-27 14:22:35 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增10个结果
2025-06-27 14:22:35 [http-nio-8080-exec-2] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到10个结果
2025-06-27 14:22:42 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:22:43 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第3批，包含5个feature描述
2025-06-27 14:22:43 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2590
2025-06-27 14:22:49 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:22:50 [http-nio-8080-exec-1] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 处理第4批，包含5个feature描述
2025-06-27 14:22:50 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 2608
2025-06-27 14:22:56 [http-nio-8080-exec-1] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:22:56 [http-nio-8080-exec-1] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 三元组搜索完成，共提取24个结果
2025-06-27 14:22:56 [http-nio-8080-exec-1] INFO  c.c.a.c.EntityLinkController - 三元组搜索成功，找到24个结果
2025-06-27 14:23:21 [http-nio-8080-exec-6] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit=''}
2025-06-27 14:23:21 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=
2025-06-27 14:23:21 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=
2025-06-27 14:23:21 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=
2025-06-27 14:23:21 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 568
2025-06-27 14:23:21 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-27 14:23:21 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-27 14:23:21 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-27 14:23:21 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-27 14:23:21 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-27 14:23:21 [http-nio-8080-exec-6] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.9-rc4
2025-06-27 14:23:21 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-27 14:23:21 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=309, endLine=383, snippetLength=1575
2025-06-27 14:23:21 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-27 14:23:21 [http-nio-8080-exec-6] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=31486, commitId='05c5323b2a344c19c51cd1b91a4ab9ae90853794', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2024-04-10 03:22:47', commitTime='2024-05-06 08:53:28', commitTitle='mm: track mapcount of large folios in single value', added=62, deleted=59, company='redhat.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='mapcount for large folios + page_mapcount() cleanups', newbiesVersion='6.10', featureId='51447'}
2025-06-27 14:23:33 [http-nio-8080-exec-3] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='05c5323b2a344c19c51cd1b91a4ab9ae90853794'}
2025-06-27 14:23:33 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-27 14:23:33 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-27 14:23:33 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=05c5323b2a344c19c51cd1b91a4ab9ae90853794
2025-06-27 14:23:34 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 698
2025-06-27 14:23:34 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-27 14:23:34 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-27 14:23:34 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-27 14:23:34 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-27 14:23:34 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.9-rc4
2025-06-27 14:23:34 [http-nio-8080-exec-3] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.9-rc4
2025-06-27 14:23:34 [http-nio-8080-exec-3] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-27 14:23:34 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=309, endLine=383, snippetLength=1575
2025-06-27 14:23:34 [http-nio-8080-exec-3] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-27 14:23:34 [http-nio-8080-exec-3] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=36229, commitId='21c690a349baab895dc68ab70d291e1598d7109d', authorName='surenb@google.com', committerName='akpm@linux-foundation.org', authorTime='2024-03-22 00:36:28', commitTime='2024-04-26 11:55:51', commitTitle='mm: introduce slabobj_ext to support slab object extensions', added=145, deleted=112, company='google.com', version='v6.9-rc4', repo='linux-stable', h1='Memory management', h2='null', text='(FEATURED) Memory allocation profiling: Low overhead per-callsite memory allocation profiling. Not just for debug kernels overhead low enough to be deployed in production', newbiesVersion='6.10', featureId='51430'}
2025-06-27 14:23:34 [http-nio-8080-exec-10] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='21c690a349baab895dc68ab70d291e1598d7109d'}
2025-06-27 14:23:34 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-27 14:23:34 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-27 14:23:34 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=21c690a349baab895dc68ab70d291e1598d7109d
2025-06-27 14:23:34 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 586
2025-06-27 14:23:34 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-27 14:23:34 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-27 14:23:34 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-27 14:23:34 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.6-rc4
2025-06-27 14:23:34 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.6-rc4
2025-06-27 14:23:34 [http-nio-8080-exec-10] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.6-rc4
2025-06-27 14:23:34 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-27 14:23:34 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=293, endLine=361, snippetLength=1454
2025-06-27 14:23:34 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-27 14:23:34 [http-nio-8080-exec-10] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=104645, commitId='1d44f2e6d178163a94980fd5f9a4b04b6b36535b', authorName='wangkefeng.wang@huawei.com', committerName='akpm@linux-foundation.org', authorTime='2023-10-18 22:07:48', commitTime='2023-10-26 07:47:11', commitTitle='mm_types: add virtual and _last_cpupid into struct folio', added=18, deleted=4, company='huawei.com', version='v6.6-rc4', repo='linux-stable', h1='Memory Management', h2='null', text='folios work<sep>Convert page cpupid functions to folios', newbiesVersion='6.7', featureId='48903'}
2025-06-27 14:23:35 [http-nio-8080-exec-5] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='1d44f2e6d178163a94980fd5f9a4b04b6b36535b'}
2025-06-27 14:23:35 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=1d44f2e6d178163a94980fd5f9a4b04b6b36535b
2025-06-27 14:23:35 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=1d44f2e6d178163a94980fd5f9a4b04b6b36535b
2025-06-27 14:23:35 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=1d44f2e6d178163a94980fd5f9a4b04b6b36535b
2025-06-27 14:23:35 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 586
2025-06-27 14:23:35 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-27 14:23:35 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-27 14:23:35 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=131521, commitId='85a1333417a7561c1d10a77d6c873a37e6ea63a0', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:47', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: use dedicated entry for swap in folio', added=15, deleted=13, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-27 14:23:35 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-27 14:23:35 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-27 14:23:35 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.5-rc4
2025-06-27 14:23:35 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-27 14:23:35 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=301, endLine=367, snippetLength=1444
2025-06-27 14:23:35 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=131521, commitId='85a1333417a7561c1d10a77d6c873a37e6ea63a0', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:47', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: use dedicated entry for swap in folio', added=15, deleted=13, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-27 14:23:35 [http-nio-8080-exec-5] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=131521, commitId='85a1333417a7561c1d10a77d6c873a37e6ea63a0', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:47', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: use dedicated entry for swap in folio', added=15, deleted=13, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-27 14:23:36 [http-nio-8080-exec-7] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='85a1333417a7561c1d10a77d6c873a37e6ea63a0'}
2025-06-27 14:23:36 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=85a1333417a7561c1d10a77d6c873a37e6ea63a0
2025-06-27 14:23:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=85a1333417a7561c1d10a77d6c873a37e6ea63a0
2025-06-27 14:23:36 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=85a1333417a7561c1d10a77d6c873a37e6ea63a0
2025-06-27 14:23:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 594
2025-06-27 14:23:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-27 14:23:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-27 14:23:36 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=131522, commitId='cfeed8ffe55b37fa10286aaaa1369da00cb88440', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:46', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: stop using page->private on tail pages for THP_SWAP', added=26, deleted=28, company='redhat.com', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-27 14:23:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-27 14:23:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-27 14:23:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.5-rc4
2025-06-27 14:23:36 [http-nio-8080-exec-7] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-27 14:23:36 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=301, endLine=367, snippetLength=1444
2025-06-27 14:23:36 [http-nio-8080-exec-7] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=131522, commitId='cfeed8ffe55b37fa10286aaaa1369da00cb88440', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:46', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: stop using page->private on tail pages for THP_SWAP', added=26, deleted=28, company='redhat.com', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-27 14:23:36 [http-nio-8080-exec-7] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=131522, commitId='cfeed8ffe55b37fa10286aaaa1369da00cb88440', authorName='david@redhat.com', committerName='akpm@linux-foundation.org', authorTime='2023-08-22 00:08:46', commitTime='2023-08-25 07:20:28', commitTitle='mm/swap: stop using page->private on tail pages for THP_SWAP', added=26, deleted=28, company='redhat.com', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='swap: stop using page->private on tail pages for THP_SWAP + cleanups', newbiesVersion='6.6', featureId='48113'}
2025-06-27 14:23:36 [http-nio-8080-exec-2] INFO  c.c.a.controller.CodeTraceController - 接收代码追溯请求: CodeTraceRequestDTO{filePath=include/linux/mm_types.h, methodName='folio', version='6.10', targetCommit='cfeed8ffe55b37fa10286aaaa1369da00cb88440'}
2025-06-27 14:23:36 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 开始追溯方法历史: methodName=folio, filePath=include/linux/mm_types.h, version=6.10, targetCommit=cfeed8ffe55b37fa10286aaaa1369da00cb88440
2025-06-27 14:23:36 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始获取commit历史: methodName=folio, filePaths=include/linux/mm_types.h, version=6.10, targetCommit=cfeed8ffe55b37fa10286aaaa1369da00cb88440
2025-06-27 14:23:36 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 调用tracker API: http://10.176.34.96:7777/tracker/trackMethod?repoPath=linux-stable&filePaths=include/linux/mm_types.h&methodName=folio&version=6.10&targetCommit=cfeed8ffe55b37fa10286aaaa1369da00cb88440
2025-06-27 14:23:36 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - tracker API响应状态: 200 OK, 响应体长度: 549
2025-06-27 14:23:36 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 成功解析tracker API响应: success=true, code=200, msg=成功
2025-06-27 14:23:36 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 处理方法签名: folio, commit数量: 1
2025-06-27 14:23:36 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取到commit历史记录:CodeTraceResultDTO{id=133180, commitId='b10ff04dc0ec7cc7dbb0eac98c4202ec8d28c21b', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-16 23:12:00', commitTime='2023-08-22 05:28:45', commitTitle='mm: add tail private fields to struct folio', added=13, deleted=1, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='Remove _folio_dtor and _folio_order', newbiesVersion='6.6', featureId='48114'}
2025-06-27 14:23:36 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始使用KernelCodeAnalyzer获取代码信息: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-27 14:23:36 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 开始增强代码搜索: filePath=include/linux/mm_types.h, methodName=folio, version=v6.5-rc4
2025-06-27 14:23:36 [http-nio-8080-exec-2] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码标识符: file=include/linux/mm_types.h, identifier=folio, version=v6.5-rc4
2025-06-27 14:23:36 [http-nio-8080-exec-2] DEBUG c.c.a.s.impl.CodeTraceServiceImpl - 通过完整方法名找到代码元素
2025-06-27 14:23:36 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - ✅ 成功获取代码片段: startLine=301, endLine=367, snippetLength=1444
2025-06-27 14:23:36 [http-nio-8080-exec-2] INFO  c.c.a.s.impl.CodeTraceServiceImpl - 方法历史追溯完成: methodName=folio, 找到commit:CodeTraceResultDTO{id=133180, commitId='b10ff04dc0ec7cc7dbb0eac98c4202ec8d28c21b', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-16 23:12:00', commitTime='2023-08-22 05:28:45', commitTitle='mm: add tail private fields to struct folio', added=13, deleted=1, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='Remove _folio_dtor and _folio_order', newbiesVersion='6.6', featureId='48114'}
2025-06-27 14:23:36 [http-nio-8080-exec-2] INFO  c.c.a.controller.CodeTraceController - 代码追溯成功，找到commit历史:CodeTraceResultDTO{id=133180, commitId='b10ff04dc0ec7cc7dbb0eac98c4202ec8d28c21b', authorName='willy@infradead.org', committerName='akpm@linux-foundation.org', authorTime='2023-08-16 23:12:00', commitTime='2023-08-22 05:28:45', commitTitle='mm: add tail private fields to struct folio', added=13, deleted=1, company='infradead.org', version='v6.5-rc4', repo='linux-stable', h1='Memory management', h2='null', text='Remove _folio_dtor and _folio_order', newbiesVersion='6.6', featureId='48114'}
2025-06-27 14:33:59 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='DAMON', context='linux内核中内存管理相关的特性有哪些？ # Linux内核中的<concept>Memory Management</concept>（内存管理）特性

## 概述

<concept>Memory Management</concept>'}
2025-06-27 14:33:59 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='DAMON', context='linux内核中内存管理相关的特性有哪些？ # Linux内核中的<concept>Memory Management</concept>（内存管理）特性

## 概述

<concept>Memory Management</concept>', version='null'}
2025-06-27 14:33:59 [http-nio-8080-exec-6] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=DAMON, context=linux内核中内存管理相关的特性有哪些？ # Linux内核中的<concept>Memory Management</concept>（内存管理）特性

## 概述

<concept>Memory Management</concept>
2025-06-27 14:33:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=DAMON, contextHint=linux内核中内存管理相关的特性有哪些？ # Linux内核中的<concept>Memory Management</concept>（内存管理）特性

## 概述

<concept>Memory Management</concept>
2025-06-27 14:33:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=DAMON, context=linux内核中内存管理相关的特性有哪些？ # Linux内核中的<concept>Memory Management</concept>（内存管理）特性

## 概述

<concept>Memory Management</concept>, version=null
2025-06-27 14:33:59 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=DAMON, context=linux内核中内存管理相关的特性有哪些？ # Linux内核中的<concept>Memory Management</concept>（内存管理）特性

## 概述

<concept>Memory Management</concept>
2025-06-27 14:33:59 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1297
2025-06-27 14:33:59 [http-nio-8080-exec-6] WARN  c.c.a.s.a.ConceptKnowledgeAnalyzer - 未找到概念信息: DAMON
2025-06-27 14:33:59 [http-nio-8080-exec-6] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=DAMON, explanationLength=50
2025-06-27 14:33:59 [http-nio-8080-exec-6] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=DAMON
2025-06-27 14:34:03 [http-nio-8080-exec-4] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:34:03 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [DAMON, DAMON]
2025-06-27 14:34:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [DAMON]
2025-06-27 14:34:03 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=DAMON, version=v6.14
2025-06-27 14:34:03 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/DAMON?version=v6.14
2025-06-27 14:34:04 [http-nio-8080-exec-4] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:34:04 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:34:04 [http-nio-8080-exec-4] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:34:04 [http-nio-8080-exec-4] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=DAMON, url=https://elixir.bootlin.com/api/ident/linux/DAMON?version=v6.14, 提取到0个代码片段
2025-06-27 14:34:04 [http-nio-8080-exec-4] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增0个结果
2025-06-27 14:34:04 [http-nio-8080-exec-4] INFO  c.c.a.c.EntityLinkController - 未找到匹配的代码: concept=DAMON, context=linux内核中内存管理相关的特性有哪些？ # Linux内核中的<concept>Memory Management</concept>（内存管理）特性

## 概述

<concept>Memory Management</concept>, version=null
2025-06-27 14:38:26 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 接收概念解释请求: ConceptExplanationRequestDTO{concept='page', context='什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示'}
2025-06-27 14:38:26 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 接收代码搜索请求: CodeSearchRequestDTO{concept='page', context='什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示', version='null'}
2025-06-27 14:38:26 [http-nio-8080-exec-10] INFO  c.c.a.s.impl.EntityLinkServiceImpl - 获取概念解释: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-27 14:38:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 查询概念解释: concept=page, contextHint=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-27 14:38:26 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 执行代码搜索: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示, version=null
2025-06-27 14:38:26 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 使用AI模型生成概念变体: concept=page, context=什么是folio # Linux内核中的<concept>Folio</concept>机制

## 概述

<concept>Folio</concept>是Linux内核内存管理子系统引入的一种新数据结构，用于表示
2025-06-27 14:38:26 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - Calling AI model: DEEPSEEK with prompt length: 1283
2025-06-27 14:38:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 描述为空，尝试从URL获取: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 14:38:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 正在从URL获取描述: https://en.wikipedia.org/wiki/Page_(computer_memory)
2025-06-27 14:38:26 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - 调用Wikipedia API: https://en.wikipedia.org/api/rest_v1/page/summary/Page_%28computer_memory%29
2025-06-27 14:38:28 [http-nio-8080-exec-10] DEBUG c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ Wikipedia API返回摘要，长度: 387
2025-06-27 14:38:28 [http-nio-8080-exec-10] INFO  c.c.a.s.a.ConceptKnowledgeAnalyzer - ✅ 使用Wikipedia API成功获取内容，长度: 387, 内容: A page, memory page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in a page table. It is the smal...
2025-06-27 14:38:28 [http-nio-8080-exec-10] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 成功获取概念解释: concept=page, explanationLength=387
2025-06-27 14:38:28 [http-nio-8080-exec-10] INFO  c.c.a.c.EntityLinkController - 概念解释搜索成功: concept=page
2025-06-27 14:38:33 [http-nio-8080-exec-5] INFO  com.cs.api.common.ai.AIService - AI model DEEPSEEK responded successfully
2025-06-27 14:38:33 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - AI模型生成了2个搜索实体: [page, vm_page]
2025-06-27 14:38:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - 准备搜索的实体: [page, vm_page]
2025-06-27 14:38:33 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=page, version=v6.14
2025-06-27 14:38:33 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/page?version=v6.14
2025-06-27 14:38:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 303723
2025-06-27 14:38:41 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 303723
2025-06-27 14:38:41 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=270, 引用=29323
2025-06-27 14:38:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=include/linux/mm_types.h, line=72, version=v6.14
2025-06-27 14:38:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/memblock/internal.h, line=16, version=v6.14
2025-06-27 14:38:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression1.c, line=48, version=v6.14
2025-06-27 14:38:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/testing/radix-tree/regression2.c, line=63, version=v6.14
2025-06-27 14:38:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=tools/virtio/linux/kernel.h, line=38, version=v6.14
2025-06-27 14:38:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 14:38:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=38, version=v6.14
2025-06-27 14:38:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 使用Eclipse CDT查找代码元素: file=arch/alpha/include/asm/cacheflush.h, line=52, version=v6.14
2025-06-27 14:38:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.analyzer.KernelCodeAnalyzer - 未找到第52行的代码元素
2025-06-27 14:38:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=page, url=https://elixir.bootlin.com/api/ident/linux/page?version=v6.14, 提取到7个代码片段
2025-06-27 14:38:41 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 开始搜索Bootlin: entity=vm_page, version=v6.14
2025-06-27 14:38:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - 搜索URL: https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14
2025-06-27 14:38:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.a.BootlinSearchService - Bootlin响应状态码: 200 OK, 内容长度: 59
2025-06-27 14:38:41 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 成功获取Bootlin响应内容，长度: 59
2025-06-27 14:38:41 [http-nio-8080-exec-5] INFO  c.c.a.s.a.BootlinSearchService - 解析完成: 定义=0, 引用=0
2025-06-27 14:38:41 [http-nio-8080-exec-5] DEBUG c.c.a.s.impl.EntityLinkServiceImpl - Bootlin找到结果: entity=vm_page, url=https://elixir.bootlin.com/api/ident/linux/vm_page?version=v6.14, 提取到0个代码片段
2025-06-27 14:38:41 [http-nio-8080-exec-5] INFO  c.c.a.s.impl.EntityLinkServiceImpl - Bootlin辅助搜索完成，新增7个结果
2025-06-27 14:38:41 [http-nio-8080-exec-5] INFO  c.c.a.c.EntityLinkController - 代码搜索成功，找到7个结果
